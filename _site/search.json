[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Geospatial Analytics and Applications",
    "section": "",
    "text": "Here are the latest exercises."
  },
  {
    "objectID": "index.html#welcome-to-my-gaa-learning-journey",
    "href": "index.html#welcome-to-my-gaa-learning-journey",
    "title": "Geospatial Analytics and Applications",
    "section": "",
    "text": "Here are the latest exercises."
  },
  {
    "objectID": "index.html#hands-on-exercise",
    "href": "index.html#hands-on-exercise",
    "title": "Geospatial Analytics and Applications",
    "section": "Hands On Exercise",
    "text": "Hands On Exercise\n\n\n\n\n\n\n\n\n\n1 Geospatial Data Science with R\n\n\n\nLiang Xiuhao Rydia\n\n\nAug 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n2 Thematic Mapping and GeoVisualisation with R\n\n\n\nLiang Xiuhao Rydia\n\n\nAug 23, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n4 1st Order Spatial Point Patterns Analysis Methods\n\n\n\nLiang Xiuhao Rydia\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n5 2nd Order Spatial Point Patterns Analysis Methods\n\n\n\nLiang Xiuhao Rydia\n\n\nAug 31, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n7 Network Constrained Spatial Point Patterns Analysis\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 4, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n8 Spatial Weights and Applications\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 10, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n9 Global Measures of Spatial Autocorrelation\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 21, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n10 Local Measures of Spatial Autocorrelation\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 21, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#in-class-exercise",
    "href": "index.html#in-class-exercise",
    "title": "Geospatial Analytics and Applications",
    "section": "In Class Exercise",
    "text": "In Class Exercise\n\n\n\n\n\n\n\n\n\nIn-class Ex 01\n\n\n\nLiang Xiuhao Rydia\n\n\nAug 26, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Ex 02\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Ex 03\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 9, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Ex 04\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 16, 2024\n\n\n\n\n\n\n\n\n\n\n\n\nIn-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 23, 2024\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#take-home-exercise",
    "href": "index.html#take-home-exercise",
    "title": "Geospatial Analytics and Applications",
    "section": "Take Home Exercise",
    "text": "Take Home Exercise\n\n\n\n\n\n\n\n\n\nTake-home Ex01\n\n\n\nLiang Xiuhao Rydia\n\n\nSep 2, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nIn this hands-on exercise, you are going to gain hands-on experience on using appropriate functions of spNetwork package:\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#overview",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network.\nIn this hands-on exercise, you are going to gain hands-on experience on using appropriate functions of spNetwork package:\n\nto derive network kernel density estimation (NKDE), and\nto perform network G-function and k-function analysis"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#the-data",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.2 The Data",
    "text": "7.2 The Data\nIn this study, we will analyse the spatial distribution of childcare centre in Punggol planning area. For the purpose of this study, two geospatial data sets will be used. They are:\n\nPunggol_St, a line features geospatial data which store the road network within Punggol Planning Area.\nPunggol_CC, a point feature geospatial data which store the location of childcare centres within Punggol Planning Area.\n\nBoth data sets are in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#installing-and-launching-the-r-packages",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.3 Installing and launching the R packages",
    "text": "7.3 Installing and launching the R packages\nIn this hands-on exercise, four R packages will be used, they are:\n\nspNetwork, which provides functions to perform Spatial Point Patterns Analysis such as kernel density estimation (KDE) and K-function on network. It also can be used to build spatial matrices (‘listw’ objects like in ‘spdep’ package) to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf package provides functions to manage, processing, and manipulate Simple Features, a formal geospatial data standard that specifies a storage and access model of spatial geometries such as points, lines, and polygons.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the four R packages.\n\n\nShow the code\npacman::p_load(tidyverse,tmap,\n               sf, spNetwork)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#data-import-and-preparation",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#data-import-and-preparation",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.4 Data Import and Preparation",
    "text": "7.4 Data Import and Preparation\nThe code chunk below uses st_read() of sf package to important Punggol_St and Punggol_CC geospatial data sets into RStudio as sf data frames.\n\n\nShow the code\nnetwork &lt;- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n\n\nReading layer `Punggol_St' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\nShow the code\nchildcare &lt;- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\")\n\n\nReading layer `Punggol_CC' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\nWe can examine the structure of the output simple features data tables in RStudio. Alternative, code chunk below can be used to print the content of network and childcare simple features objects by using the code chunk below.\n\nNetworkChildcare\n\n\n\n\nShow the code\nnetwork\n\n\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     LINK_ID                   ST_NAME                       geometry\n1  116130894                PUNGGOL RD LINESTRING (36546.89 44574....\n2  116130897 PONGGOL TWENTY-FOURTH AVE LINESTRING (36546.89 44574....\n3  116130901   PONGGOL SEVENTEENTH AVE LINESTRING (36012.73 44154....\n4  116130902   PONGGOL SEVENTEENTH AVE LINESTRING (36062.81 44197....\n5  116130907           PUNGGOL CENTRAL LINESTRING (36131.85 42755....\n6  116130908                PUNGGOL RD LINESTRING (36112.93 42752....\n7  116130909           PUNGGOL CENTRAL LINESTRING (36127.4 42744.5...\n8  116130910               PUNGGOL FLD LINESTRING (35994.98 42428....\n9  116130911               PUNGGOL FLD LINESTRING (35984.97 42407....\n10 116130912            EDGEFIELD PLNS LINESTRING (36200.87 42219....\n\n\n\n\n\n\nShow the code\nchildcare\n\n\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n      Name                      geometry\n1   kml_10 POINT Z (36173.81 42550.33 0)\n2   kml_99 POINT Z (36479.56 42405.21 0)\n3  kml_100 POINT Z (36618.72 41989.13 0)\n4  kml_101 POINT Z (36285.37 42261.42 0)\n5  kml_122  POINT Z (35414.54 42625.1 0)\n6  kml_161 POINT Z (36545.16 42580.09 0)\n7  kml_172 POINT Z (35289.44 44083.57 0)\n8  kml_188 POINT Z (36520.56 42844.74 0)\n9  kml_205  POINT Z (36924.01 41503.6 0)\n10 kml_222 POINT Z (37141.76 42326.36 0)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#visualising-the-geospatial-data",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.5 Visualising the Geospatial Data",
    "text": "7.5 Visualising the Geospatial Data\nBefore we jump into the analysis, it is a good practice to visualise the geospatial data. There are at least two ways to visualise the geospatial data. One way is by using plot() of Base R as shown in the code chunk below.\n\n\nShow the code\nplot(st_geometry(network))\nplot(childcare,add=T,col =\"red\",pch = 19)\n\n\n\n\n\n\n\n\n\nTo visualise the geospatial data with high cartographic quality and interactive manner, the mapping function of tmap package can be used as shown in the code chunk below.\n\n\nShow the code\ntmap_mode('view')\ntm_shape(childcare) + \n  tm_dots(col =\"red\") +\n  tm_shape(network) +\n  tm_lines()\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#network-kde-nkde-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#network-kde-nkde-analysis",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.6 Network KDE (NKDE) Analysis",
    "text": "7.6 Network KDE (NKDE) Analysis\nIn this section, we will perform NKDE analysis by using appropriate functions provided in spNetwork package.\n\n7.6.1 Preparing the lixels objects\nBefore computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with lixelize_lines() of spNetwork as shown in the code chunk below.\n\n\nShow the code\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 375)\n\n\nWhat can we learned from the code chunk above:\n\nThe length of a lixel, lx_length is set to 700m, and\nThe minimum length of a lixel, mindist is set to 350m.\n\nAfter cut, if the length of the final lixel is shorter than the minimum distance, then it is added to the previous lixel. If NULL, then mindist = maxdist/10. Also note that the segments that are already shorter than the minimum distance are not modified\nNote: There is another function called lixelize_lines.mc() which provide multicore support.\n\n\n7.6.2 Generating line centre points\nNext, lines_center() of spNetwork will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.\n\n\nShow the code\nsamples &lt;- lines_center(lixels) \n\n\nThe points are located at center of the line based on the length of the line.\n\n\n7.6.3 Performing NKDE\nWe are ready to computer the NKDE by using the code chunk below.\n\n\nShow the code\nchildcare &lt;- st_zm(childcare)\n\n\n\n\nShow the code\ndensities &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\nWhat can we learn from the code chunk above?\n\nkernel_name argument indicates that quartic kernel is used. Are possible kernel methods supported by spNetwork are: triangle, gaussian, scaled gaussian, tricube, cosine ,triweight, epanechnikov or uniform.\nmethod argument indicates that simple method is used to calculate the NKDE. Currently, spNetwork support three popular methods, they are:\n\nmethod=“simple”. This first method was presented by Xie et al. (2008) and proposes an intuitive solution. The distances between events and sampling points are replaced by network distances, and the formula of the kernel is adapted to calculate the density over a linear unit instead of an areal unit.\nmethod=“discontinuous”. The method is proposed by Okabe et al (2008), which equally “divides” the mass density of an event at intersections of lixels.\nmethod=“continuous”. If the discontinuous method is unbiased, it leads to a discontinuous kernel function which is a bit counter-intuitive. Okabe et al (2008) proposed another version of the kernel, that divide the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\n\nThe user guide of spNetwork package provide a comprehensive discussion of nkde(). You should read them at least once to have a basic understanding of the various parameters that can be used to calibrate the NKDE model.\n\n7.6.3.1 Visualising NKDE\nBefore we can visualise the NKDE values, code chunk below will be used to insert the computed density values (i.e. densities) into samples and lixels objects as density field.\n\n\nShow the code\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\n\nSince svy21 projection system is in meter, the computed density values are very small i.e. 0.0000005. The code chunk below is used to resale the density values from number of events per meter to number of events per kilometer.\n\n\nShow the code\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000\n\n\nThe code below uses appropriate functions of tmap package to prepare interactive and high cartographic quality map visualisation.\n\n\nShow the code\ntmap_mode('view')\ntm_shape(lixels)+\n  tm_lines(col=\"density\")+\ntm_shape(childcare)+\n  tm_dots(col = \"red\")\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\nThe interactive map above effectively reveals road segments (darker color) with relatively higher density of childcare centres than road segments with relatively lower density of childcare centres (lighter color)."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#network-constrained-g--and-k-function-analysis",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.7 Network Constrained G- and K-Function Analysis",
    "text": "7.7 Network Constrained G- and K-Function Analysis\nIn this section, we are going to perform complete spatial randomness (CSR) test by using kfunctions() of spNetwork package. The null hypothesis is defined as:\nHo: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol Planning Area.\nThe CSR test is based on the assumption of the binomial point process which implies the hypothesis that the childcare centres are randomly and independently distributed over the street network.\nIf this hypothesis is rejected, we may infer that the distribution of childcare centres are spatially interacting and dependent on each other; as a result, they may form non-random patterns.\n\n\nShow the code\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)\n\n\nWhat can we learn from the code chunk above?\nThere are ten arguments used in the code chunk above they are:\n\nlines: A SpatialLinesDataFrame with the sampling points. The geometries must be a SpatialLinesDataFrame (may crash if some geometries are invalid).\npoints: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: A double, the start value for evaluating the k and g functions.\nend: A double, the last value for evaluating the k and g functions.\nstep: A double, the jump between two evaluations of the k and g function.\nwidth: The width of each donut for the g-function.\nnsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulation was performed. Note: most of the time, more simulations are required for inference\nresolution: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When resolution is null the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\nconf_int: A double indicating the width confidence interval (default = 0.05).\n\nFor the usage of other arguments, you should refer to the user guide of spNetwork package.\nThe output of kfunctions() is a list with the following values:\n\nplotkA, a ggplot2 object representing the values of the k-function\nplotgA, a ggplot2 object representing the values of the g-function\nvaluesA, a DataFrame with the values used to build the plots\n\nFor example, we can visualise the ggplot2 object of k-function by using the code chunk below.\n\n\nShow the code\nkfun_childcare$plotk\n\n\n\n\n\n\n\n\n\nThe blue line is the empirical network K-function of the childcare centres in Punggol planning area. The gray envelop represents the results of the 50 simulations in the interval 2.5% - 97.5%. Because the blue line between the distance of 250m-400m are below the gray area, we can infer that the childcare centres in Punggol planning area resemble regular pattern at the distance of 250m-400m."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#references",
    "href": "Hands-on Exercise/Hands-on_Ex03/Hands-on_Ex03.html#references",
    "title": "7 Network Constrained Spatial Point Patterns Analysis",
    "section": "7.8 References",
    "text": "7.8 References\n\nspNetwork: Spatial Analysis on Network\nNetwork Kernel Density Estimate\nDetails about NKDE\nNetwork k Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html",
    "title": "1 Geospatial Data Science with R",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package.\n\n\nNote: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntaxt and argument option before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#learning-outcome",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#learning-outcome",
    "title": "1 Geospatial Data Science with R",
    "section": "",
    "text": "Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using sf package.\nBy the end of this hands-on exercise, you should acquire the following competencies:\n\ninstalling and loading sf and tidyverse packages into R environment,\nimporting geospatial data by using appropriate functions of sf package,\nimporting aspatial data by using appropriate function of readr package,\nexploring the content of simple feature data frame by using appropriate Base R and sf functions,\nassigning or transforming coordinate systems by using using appropriate sf functions,\nconverting an aspatial data into a sf data frame by using appropriate function of sf package,\nperforming geoprocessing tasks by using appropriate functions of sf package,\nperforming data wrangling tasks by using appropriate functions of dplyr package and\nperforming Exploratory Data Analysis (EDA) by using appropriate functions from ggplot2 package.\n\n\nNote: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntaxt and argument option before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#data-acquisition",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#data-acquisition",
    "title": "1 Geospatial Data Science with R",
    "section": "1.2 Data Acquisition",
    "text": "1.2 Data Acquisition\nData are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:\n\nMaster Plan 2014 Subzone Boundary (Web) from data.gov.sg\nPre-Schools Location from data.gov.sg\nCycling Path from LTADataMall\nLatest version of Singapore Airbnb listing data from Inside Airbnb\n\n\nNote: The purpose of this section is not merely extracting the necessary data sets. It also aims to introduce you to public available data sets. Students are encouraged to explore the rest of the available data sets in these three data sources.\n\n\n1.2.1 Extracting the geospatial data sets\nNext, at the Hands-on_Ex01 folder, create a sub-folder called data. Then, inside the data sub-folder, create two sub-folders and name them geospatial and aspatial respectively.\nPlace Master Plan 2014 Subzone Boundary (Web), Pre-Schools Location and Cycling Path zipped files into geospatial sub-folder and unzipped them. Copy the unzipped files from their respective sub-folders and place them inside geospatial sub-folder.\n\n\n1.2.2 Extracting the aspatial data set\nNow, you will extract the downloaded listing data file. At Downloads folder, cut and paste listing.csv into aspatial sub-folder."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#getting-started",
    "title": "1 Geospatial Data Science with R",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\nIn this hands-on exercise, two R packages will be used. They are:\n\nsf for importing, managing, and processing geospatial data, and\ntidyverse for performing data science tasks such as importing, wrangling and visualising data.\n\nTidyverse consists of a family of R packages. In this hands-on exercise, the following packages will be used:\n\nreadr for importing csv data,\nreadxl for importing Excel worksheet,\ntidyr for manipulating data,\ndplyr for transforming data, and\nggplot2 for visualising data\n\nType the following code chunk.\n\n\nShow the code\npacman::p_load(sf,tidyverse)\n\n\nWhat we can learn from the code chunk above:\n\np_load function pf pacman package is used to install and load sf and tidyverse pacages into R environment."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#importing-geospatial-data",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#importing-geospatial-data",
    "title": "1 Geospatial Data Science with R",
    "section": "1.4 Importing Geospatial Data",
    "text": "1.4 Importing Geospatial Data\nIn this section, you will learn how to import the following geospatial data into R by using st_read() of sf package:\n\nMP14_SUBZONE_WEB_PL, a polygon feature layer in ESRI shapefile format,\nCyclingPath, a line feature layer in ESRI shapefile format, and\nPreSchool, a point feature layer in kml file format.\n\n\n1.4.1 Importing polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame. Note that when the input geospatial data is in shapefile format, two arguments will be used, namely: dsn to define the data path and layer to provide the shapefile name. Also note that no extension such as .shp, .dbf, .prj and .shx are needed.\n\n\nShow the code\nmpsz = st_read(dsn = \"data/geospatial\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex01a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThe message above reveals that the geospatial objects are multipolygon features. There are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data.\n\n\n1.4.2 Importing polyline feature data in shapefile form\nThe code chunk below uses st_read() function of sf package to import CyclingPath shapefile into R as line feature data frame.\n\n\nShow the code\ncyclingpath = st_read(dsn = \"data/geospatial\", \n                         layer = \"CyclingPathGazette\")\n\n\nReading layer `CyclingPathGazette' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex01a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21\n\n\nThe message above reveals that there are a total of 2558 features and 2 fields in cyclingpath linestring feature data frame and it is in svy21 projected coordinates system too.\n\n\n1.4.3 Importing GIS data in kml format\nThe PreSchoolsLocation is in kml format. The code chunk below will be used to import the kml into R. Notice that in the code chunk below, the complete path and the kml file extension were provided.\n\n\nShow the code\npreschool = st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex01a\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThe message above reveals that preschool is a point feature data frame. There are a total of 2290 features and 2 fields. Different from the previous two simple feature data frame, preschool is in wgs84 coordinates system."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#checking-the-content-of-a-simple-feature-data-frame",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#checking-the-content-of-a-simple-feature-data-frame",
    "title": "1 Geospatial Data Science with R",
    "section": "1.5 Checking the Content of A Simple Feature Data Frame",
    "text": "1.5 Checking the Content of A Simple Feature Data Frame\nIn this sub-section, you will learn different ways to retrieve information related to the content of a simple feature data frame.\n\n1.5.1 Working with st_geometry()\nThe column in the sf data.frame that contains the geometries is a list, of class sfc. We can retrieve the geometry list-column in this case by mpsz$geom or mpsz[[1]], but the more general way uses st_geometry() as shown in the code chunk below.\n\n\nShow the code\nst_geometry(mpsz)\n\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nNotice that the print only displays basic information of the feature class such as type of geometry, the geographic extent of the features and the coordinate system of the data.\n\n\n1.5.2 Working with glimpse()\nBeside the basic feature information, we also would like to learn more about the associated attribute information in the data frame. This is the time you will find glimpse() of dplyr. very handy as shown in the code chunk below.\n\n\nShow the code\nglimpse(mpsz)\n\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n\n\nglimpse() report reveals the data type of each fields. For example FMEL-UPD_D field is in date data type and X_ADDR, Y_ADDR, SHAPE_L and SHAPE_AREA fields are all in double-precision values.\n\n\n1.5.3 Working with head()\nSometimes we would like to reveal complete information of a feature object, this is the job of head() of Base R.\n\n\nShow the code\nhead(mpsz, n=5)\n\n\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n\n\nNote: One of the useful argument of head() is it allows user to select the numbers of record to display (i.e. the n argument)."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#plotting-the-geospatial-data",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#plotting-the-geospatial-data",
    "title": "1 Geospatial Data Science with R",
    "section": "1.6 Plotting the Geospatial Data",
    "text": "1.6 Plotting the Geospatial Data\nIn geospatial data science, by looking at the feature information is not enough. We are also interested to visualise the geospatial features. This is the time you will find plot() of R Graphic comes in very handy as shown in the code chunk below.\n\n\nShow the code\nplot(mpsz)\n\n\n\n\n\n\n\n\n\nThe default plot of an sf object is a multi-plot of all attributes, up to a reasonable maximum as shown above. We can, however, choose to plot only the geometry by using the code chunk below.\n\n\nShow the code\nplot(st_geometry(mpsz))\n\n\n\n\n\n\n\n\n\nAlternatively, we can also choose the plot the sf object by using a specific attribute as shown in the code chunk below.\n\n\nShow the code\nplot(mpsz[\"PLN_AREA_N\"])\n\n\n\n\n\n\n\n\n\n\nNote: plot() is mean for plotting the geospatial object for quick look. For high cartographic quality plot, other R package such as tmap should be used."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#working-with-projection",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#working-with-projection",
    "title": "1 Geospatial Data Science with R",
    "section": "1.7 Working with Projection",
    "text": "1.7 Working with Projection\nMap projection is an important property of a geospatial data. In order to perform geoprocessing using two geospatial data, we need to ensure that both geospatial data are projected using similar coordinate system.\nIn this section, you will learn how to project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called projection transformation.\n\n1.7.1 Assigning EPSG code to a simple feature data frame\nOne of the common issue that can happen during importing geospatial data into R is that the coordinate system of the source data was either missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.\nThis is an example the coordinate system of mpsz simple feature data frame by using st_crs() of sf package as shown in the code chunk below.\n\n\nShow the code\nst_crs(mpsz)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAlthough mpsz data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be 3414.\nIn order to assign the correct EPSG code to mpsz data frame, st_set_crs() of sf package is used as shown in the code chunk below.\n\n\nShow the code\nmpsz3414 &lt;- st_set_crs(mpsz, 3414)\n\n\nNow, let us check the CRS again by using the code chunk below.\n\n\nShow the code\nst_crs(mpsz3414)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\nNotice that the EPSG code is 3414 now.\n\n\n1.7.2 Transforming the projection of preschool from wgs84 to svy21.\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\nLet us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.\n\n\nShow the code\nhead(preschool,1)\n\n\nSimple feature collection with 1 feature and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.8072 ymin: 1.299333 xmax: 103.8072 ymax: 1.299333\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n   Name\n1 kml_1\n                                                                                                                                                                                                                                                                                                                                                                                      Description\n1 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                       geometry\n1 POINT Z (103.8072 1.299333 0)\n\n\nThis is a scenario that st_set_crs() is not appropriate and st_transform() of sf package should be used. This is because we need to reproject preschool from one coordinate system to another coordinate system mathemetically.\nLet us perform the projection transformation by using the code chunk below.\n\n\nShow the code\npreschool3414 &lt;- st_transform(preschool, \n                              crs = 3414)\n\npreschool3414\n\n\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 10 features:\n     Name\n1   kml_1\n2   kml_2\n3   kml_3\n4   kml_4\n5   kml_5\n6   kml_6\n7   kml_7\n8   kml_8\n9   kml_9\n10 kml_10\n                                                                                                                                                                                                                                                                                                                                                                                                                  Description\n1                             &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PRESCHOOL PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9390&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;498CC9FE48CC94D4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n2                                      &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S COVE PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8675&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;22877550804213FD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n3                         &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDREN'S VINEYARD PRESCHOOL PTE. LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9308&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B2FE90E44AD494E3&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n4                   &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILDTIME CARE & DEVELOPMENT CENTRE PTE.LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT9122&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;1384CDC0D14B76A1&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n5                                                 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT2070&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;FB24EAA6E73B2723&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n6                                      &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE EAST COAST&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT6550&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B53C79DF64135499&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n7                                     &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE MOUNTBATTEN&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT8637&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;B53C79DFBF7AD96F&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n8                                       &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHILTERN HOUSE TURF CLUB&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;PT5400&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;8F2BC6E9BF962BC8&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n9                              &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHINESE CHRISTIAN MISSION LIMITED&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;RC0740&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;CA317E72A442CEB6&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n10 &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;CENTRE_NAME&lt;/th&gt; &lt;td&gt;CHOW & CHOWS CHILDCARE & EARLY LEARNING CENTRE (CCK 542) LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;CENTRE_CODE&lt;/th&gt; &lt;td&gt;RC1775&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;2072C1C4F5E69A9C&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20211201093631&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt;\n                        geometry\n1  POINT Z (25089.46 31299.16 0)\n2  POINT Z (27189.07 32792.54 0)\n3  POINT Z (28844.56 36773.76 0)\n4  POINT Z (24821.92 46303.16 0)\n5  POINT Z (28637.82 35038.49 0)\n6  POINT Z (33248.74 32260.59 0)\n7  POINT Z (33248.74 32260.59 0)\n8   POINT Z (23591.47 35202.8 0)\n9  POINT Z (18338.28 36619.18 0)\n10 POINT Z (18148.23 41723.46 0)\n\n\n\nNote: In practice, we need find out the appropriate project coordinate system to use before performing the projection transformation.\n\nNotice that it is in svy21 projected coordinate system now. Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#importing-and-converting-an-aspatial-data",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#importing-and-converting-an-aspatial-data",
    "title": "1 Geospatial Data Science with R",
    "section": "1.8 Importing and Converting An Aspatial Data",
    "text": "1.8 Importing and Converting An Aspatial Data\nIn practice, it is not unusual that we will come across data such as listing of Inside Airbnb. We call this kind of data aspatial data. This is because it is not a geospatial data but among the data fields, there are two fields that capture the x- and y-coordinates of the data points.\nIn this section, you will learn how to import an aspatial data into R environment and save it as a tibble data frame. Next, you will convert it into a simple feature data frame.\nFor the purpose of this exercise, the listings.csv data downloaded from AirBnb will be used.\n\n1.8.1 Importing the aspatial data\nSince listings data set is in csv file format, we will use read_csv() of readr package to import listing.csv as shown the code chunk below. The output R object is called listings and it is a tibble data frame.\n\n\nShow the code\nlistings &lt;- read_csv(\"data/aspatial/listings.csv\")\n\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() of Base R instead of glimpse() is used to do the job.\n\n\nShow the code\nlist(listings)\n\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;\n\n\nThe output reveals that listing tibble data frame consists of 3540 rows and 18 columns. Two useful fields we are going to use in the next phase are latitude and longitude. Note that they are in decimal degree format. As a best guess, we will assume that the data is in wgs84 Geographic Coordinate System.\n\n\n1.8.2 Creating a simple feature data frame from an aspatial data frame\nThe code chunk below converts listing data frame into a simple feature data frame by using st_as_sf() of sf packages.\n\n\nShow the code\nlistings_sf &lt;- st_as_sf(listings, \n                       coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %&gt;%\n  st_transform(crs = 3414)\n\n\n\n\n\n\n\n\nThings to learn from the arguments above:\n\n\n\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into svy21 projected coordinates system.\n\n\n\nLet us examine the content of this newly created simple feature data frame.\n\n\nShow the code\nglimpse(listings_sf)\n\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…\n\n\nTable above shows the content of listing_sf. Notice that a new column called geometry has been added into the data frame. On the other hand, the longitude and latitude columns have been dropped from the data frame."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#geoprocessing-with-sf-package",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#geoprocessing-with-sf-package",
    "title": "1 Geospatial Data Science with R",
    "section": "1.9 Geoprocessing with sf package",
    "text": "1.9 Geoprocessing with sf package\nBesides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.\nIn this section, you will learn how to perform two commonly used geoprocessing functions, namely buffering and point in polygon count.\n\n1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the existing cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\n\nShow the code\nbuffer_cycling &lt;- st_buffer(cyclingpath, \n                               dist=5, nQuadSegs = 30)\n\n\n\n\n\n\n\n\nNote\n\n\n\nnQuadSegs = 30: This parameter controls the number of line segments used to approximate a quarter circle when creating the buffer around curved features. A higher number results in a smoother, more accurate buffer but may require more computation.\n\n\nThis is followed by calculating the area of the buffers as shown in the code chunk below.\n\n\nShow the code\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n\nLastly, sum() of Base R will be used to derive the total land involved.\n\n\nShow the code\nsum(buffer_cycling$AREA)\n\n\n2218855 [m^2]\n\n\nMission Accomplished!\n\n\n1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\n\nShow the code\nmpsz3414$`PreSch Count`&lt;- lengths(st_intersects(mpsz3414, preschool3414))\n\n\n\nWarning: You should not confuse with st_intersection().\n\nYou can check the summary statistics of the newly derived PreSch Count field by using summary() as shown in the code chunk below.\n\n\nShow the code\nsummary(mpsz3414$`PreSch Count`)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\nTo list the planning subzone with the most number of pre-school, the top_n() of dplyr package is used as shown in the code chunk below.\n\n\nShow the code\ntop_n(mpsz3414, 1, `PreSch Count`)\n\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nDIY: Calculate the density of pre-school by planning subzone.\n\nThe solution:\nFirstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone.\n\n\nShow the code\nmpsz3414$Area &lt;- mpsz3414 %&gt;%\n  st_area()\n\n\nNext, mutate() of dplyr package is used to compute the density by using the code chunk below.\n\n\nShow the code\nmpsz3414 &lt;- mpsz3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#exploratory-data-analysis-eda",
    "href": "Hands-on Exercise/Hands-on_Ex01a/Hands-on_Ex01a.html#exploratory-data-analysis-eda",
    "title": "1 Geospatial Data Science with R",
    "section": "1.10 Exploratory Data Analysis (EDA)",
    "text": "1.10 Exploratory Data Analysis (EDA)\nIn practice, many geospatial analytics start with Exploratory Data Analysis. In this section, you will learn how to use appropriate ggplot2 functions to create functional and yet truthful statistical graphs for EDA purposes.\nFirstly, we will plot a histogram to reveal the distribution of PreSch Density. Conventionally, hist() of R Graphics will be used as shown in the code chunk below.\n\n\nShow the code\nhist(mpsz3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nAlthough the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.\nIn the code chunk below, appropriate ggplot2 functions will be used.\n\n\nShow the code\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  labs(title = \"Are pre-school even distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single pre-school, on the other hand, \\nthere are two planning sub-zones with at least 20 pre-schools\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Frequency\")\n\n\n\n\n\n\n\n\n\n\nDIY: Using ggplot2 method, plot a scatterplot showing the relationship between Pre-school Density and Pre-school Count.\n\nThe solution:\n\n\nShow the code\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"black\", \n             fill=\"light blue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package.\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#overview",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "In general, thematic mapping involves the use of map symbols to visualize selected properties of geographic features that are not naturally visible, such as population, temperature, crime rate, and property prices, just to mention a few of them.\nGeovisualisation, on the other hand, works by providing graphical ideation to render a place, a phenomenon or a process visible, enabling human’s most powerful information-processing abilities – those of spatial cognition associated with our eye–brain vision system – to be directly brought to bear.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called **tmap** package.\n\n\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#getting-started",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "2.2 Getting Started",
    "text": "2.2 Getting Started\nIn this hands-on exercise, the key R package use is tmap package in R. Beside tmap package, four other R packages will be used. They are:\n\nreadr for importing delimited text file,\ntidyr for tidying data,\ndplyr for wrangling data and\nsf for handling geospatial data.\n\nAmong the four packages, readr, tidyr and dplyr are part of tidyverse package.\nThe code chunk below will be used to install and load these packages in RStudio.\n\n\nShow the code\npacman::p_load(sf, tmap, tidyverse)\n\n\nNotice that, we only need to install tidyverse instead of readr, tidyr and dplyr individually."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#importing-data-into-r",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#importing-data-into-r",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "2.3 Importing Data into R",
    "text": "2.3 Importing Data into R\n\n2.3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data fie. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile.\n\n\n\n2.3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\n\nShow the code\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex01b\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n2.3.3 Importing Attribute Data into R\nNext, we will import respopagesextod2011to2020.csv file into RStudio and save the file into an R dataframe called popdata.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\n\nShow the code\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\n\n2.3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\n2.3.4.1 Data wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\n\nShow the code\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n\n2.3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\n\nShow the code\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\n\nShow the code\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\n\n\n\n\nThing to learn from the code chunk above:\n\n\n\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\n\n\n\nShow the code\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "2.4 Choropleth Mapping Geospatial Data Using tmap",
    "text": "2.4 Choropleth Mapping Geospatial Data Using tmap\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n2.4.1 Plotting a choropleth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\n\nShow the code\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from the code chunk above:\n\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)\n\n\n\n\n\n2.4.2 Creating a choropleth map by using tmap’s elements\nDespite its usefulness of drawing a choropleth map quickly and easily, the disadvantge of qtm() is that it makes aesthetics of individual layers harder to control. To draw a high quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nIn the following sub-section, we will share with you tmap functions that used to plot these elements.\n\n2.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons.\n\n\nShow the code\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n \n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\n\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n\n\n2.4.2.3 Drawing a choropleth map using tm_fill() and tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”.\n\n\n\n\n2.4.3 Data classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n2.4.3.1 Plotting choropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, sd data classification method is used.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"sd\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nIn the code chunk below, kmeans data classification method is used.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\nWarning: Maps Lie!\n\n\nDIY: Using what you had learned, prepare choropleth maps by using different classification methods supported by tmap and compare their differences.\n\n\nDIY: Preparing choropleth maps by using similar classification method but with different numbers of classes (i.e. 2, 6, 10, 20). Compare the output maps, what observation can you draw?\n\nAdjusting the n to 2,6,10, and 20.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 2,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 20,\n          style = \"kmeans\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n2.4.3.2 Plotting choropleth map with custom break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\n\nShow the code\nsummary(mpsz_pop2020$DEPENDENCY)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n2.4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nNotice that the colour scheme has been reversed.\n\n\n\n2.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n2.4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n2.4.5.2 Map style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n\n2.4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\n\nShow the code\ntmap_style(\"white\")\n\n\n\n\n\n2.4.6 Drawing Small Multiple Choropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\n\nShow the code\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\n\nShow the code\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n\n2.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\n\nShow the code\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\n\nShow the code\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.7 Mappping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\n\nShow the code\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex01b/Hands-on_Ex01b.html#reference",
    "title": "2 Thematic Mapping and GeoVisualisation with R",
    "section": "2.5 Reference",
    "text": "2.5 Reference\n\n2.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n2.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n2.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#overview",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.1 Overview",
    "text": "4.1 Overview\nSpatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can be location of:\n\nevents such as crime, traffic accident and disease onset, or\nbusiness services (coffee and fastfood outlets) or facilities such as childcare and eldercare.\n\nUsing appropriate functions of spatstat, this hands-on exercise aims to discover the spatial point processes of childecare centres in Singapore.\nThe specific questions we would like to answer are as follows:\n\nare the childcare centres in Singapore randomly distributed throughout the country?\nif the answer is not, then the next logical question is where are the locations with higher concentration of childcare centres?"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#the-data",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#the-data",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.2 The data",
    "text": "4.2 The data\nTo provide answers to the questions above, three data sets will be used. They are:\n\nCHILDCARE, a point feature data providing both location and attribute information of childcare centres. It was downloaded from Data.gov.sg and is in geojson format.\nMP14_SUBZONE_WEB_PL, a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg.\nCostalOutline, a polygon feature data showing the national boundary of Singapore. It is provided by SLA and is in ESRI shapefile format."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#installing-and-loading-the-r-packages",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#installing-and-loading-the-r-packages",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.3 Installing and Loading the R packages",
    "text": "4.3 Installing and Loading the R packages\nIn this hands-on exercise, five R packages will be used, they are:\n\nsf, a relatively new R package specially designed to import, manage and process vector-based geospatial data in R.\nspatstat, which has a wide range of useful functions for point pattern analysis. In this hands-on exercise, it will be used to perform 1st- and 2nd-order spatial point patterns analysis and derive kernel density estimation (KDE) layer.\nraster which reads, writes, manipulates, analyses and model of gridded spatial data (i.e. raster). In this hands-on exercise, it will be used to convert image output generate by spatstat into raster format.\nmaptools which provides a set of tools for manipulating geographic data. In this hands-on exercise, we mainly use it to convert Spatial objects into ppp format of spatstat.\ntmap which provides functions for plotting cartographic quality static point patterns maps or interactive maps by using leaflet API.\n\nUse the code chunk below to install and launch the five R packages.\n\n\nShow the code\npacman::p_load(sf, raster, spatstat, tmap, tidyverse,\n               ggstatsplot, maptools)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#spatial-data-wrangling",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#spatial-data-wrangling",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "5.4 Spatial Data Wrangling",
    "text": "5.4 Spatial Data Wrangling\n\n5.4.1 Importing the spatial data\nIn this section, st_read() of sf package will be used to import these three geospatial data sets into R.\n\n\nShow the code\nchildcare_sf &lt;- st_read(\"data/child-care-services-geojson.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `child-care-services-geojson' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex02a\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nsg_sf &lt;- st_read(dsn = \"data\", \n                 layer=\"CostalOutline\")\n\n\nReading layer `CostalOutline' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex02a\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\n\n\n\nShow the code\nmpsz_sf &lt;- st_read(dsn = \"data\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex02a\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nBefore we can use these data for analysis, it is important for us to ensure that they are projected in same projection system.\n\nDIY: Using the appropriate sf function you learned in Hands-on Exercise 1a, retrieve the referencing system information of these geospatial data.\n\n\n\nShow the code\nst_crs(childcare_sf)\n\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n\n\n\n\nShow the code\nst_crs(mpsz_sf)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\n\n\nShow the code\nst_crs(sg_sf)\n\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nNotice that except childcare_sf, both mpsz_sf and sg_sf do not have proper crs information.\n\nDIY: Using the method you learned in Lesson 1, assign the correct crs to mpsz_sf and sg_sf simple feature data frames.\n\n\n\nShow the code\nmpsz &lt;- st_transform(mpsz_sf, 3414)\n\n\n\n\nShow the code\nsg &lt;- st_transform(sg_sf,3414)\n\n\n\nDIY: If necessary, changing the referencing system to Singapore national projected coordinate system.\n\n\n\n4.4.2 Mapping the geospatial data sets\nAfter checking the referencing system of each geospatial data data frame, it is also useful for us to plot a map to show their spatial patterns.\n\nDIY: Using the mapping methods you learned in Hands-on Exercise 3, prepare a map as shown below.\n\n\n\n\nShow the code\nplot(st_geometry(mpsz_sf),\n     col='lightgrey')\nplot(childcare_sf,\n     add=T,\n     col='black',\n     fill='black',\n     pch=22,\n     cex=.1)\n\n\n\n\n\n\n\n\n\nNotice that all the geospatial layers are within the same map extend. This shows that their referencing system and coordinate values are referred to similar spatial context. This is very important in any geospatial analysis.\nAlternatively, we can also prepare a pin map by using the code chunk below.\n\n\nShow the code\ntmap_mode('view')\ntm_shape(childcare_sf)+\n  tm_dots()\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\nNotice that at the interactive mode, tmap is using leaflet for R API. The advantage of this interactive pin map is it allows us to navigate and zoom around the map freely. We can also query the information of each simple feature (i.e. the point) by clicking of them. Last but not least, you can also change the background of the internet map layer. Currently, three internet map layers are provided. They are: ESRI.WorldGrayCanvas, OpenStreetMap, and ESRI.WorldTopoMap. The default is ESRI.WorldGrayCanvas.\n\nReminder: Always remember to switch back to plot mode after the interactive map. This is because, each interactive mode will consume a connection. You should also avoid displaying excessive numbers of interactive maps (i.e. not more than 10) in one RMarkdown document when publish on Netlify."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#geospatial-data-wrangling",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#geospatial-data-wrangling",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.5 Geospatial Data wrangling",
    "text": "4.5 Geospatial Data wrangling\nAlthough simple feature data frame is gaining popularity again sp’s Spatial* classes, there are, however, many geospatial analysis packages require the input geospatial data in sp’s Spatial* classes. In this section, you will learn how to convert simple feature data frame to sp’s Spatial* class.\n\n4.5.1 Converting sf data frames to sp’s Spatial* class\nThe code chunk below uses as_Spatial() of sf package to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\n\nShow the code\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\n\n\n\nShow the code\nchildcare\n\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\n\n\n\nShow the code\nmpsz\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\n\n\n\nShow the code\nsg\n\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\nNotice that the geospatial data have been converted into their respective sp’s Spatial* classes now.\n\n\n4.5.2 Converting the Spatial* class into generic sp format\nspatstat requires the analytical data in ppp object form. There is no direct way to convert a Spatial* classes into ppp object. We need to convert the Spatial classes* into Spatial object first.\nThe codes chunk below converts the Spatial* classes into generic sp objects.\n\n\nShow the code\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\n\n\nNext, you should display the sp objects properties as shown below.\n\n\nShow the code\nchildcare_sp\n\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\n\n\n\nShow the code\nsg_sp\n\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\n\n\n4.5.3 Converting the generic sp format into spatstat’s ppp format\nNow, we will use as.ppp() function of spatstat to convert the spatial data into spatstat’s ppp object format.\n\n\nShow the code\nchildcare_ppp &lt;- as.ppp(childcare_sf)\nchildcare_ppp\n\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\n\nNow, let us plot childcare_ppp and examine the different.\n\n\nShow the code\nplot(childcare_ppp)\n\n\n\n\n\n\n\n\n\nYou can take a quick look at the summary statistics of the newly created ppp object by using the code chunk below.\n\n\nShow the code\nsummary(childcare_ppp)\n\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n\n\nNotice the warning message about duplicates. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.\n\n\n4.5.4 Handling duplicated points\nWe can check the duplication in a ppp object by using the code chunk below.\n\n\nShow the code\nany(duplicated(childcare_ppp))\n\n\n[1] FALSE\n\n\nTo count the number of co-incidence point, we will use the multiplicity() function as shown in the code chunk below.\n\n\nShow the code\nmultiplicity(childcare_ppp)\n\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nIf we want to know how many locations have more than one point event, we can use the code chunk below.\n\n\nShow the code\nsum(multiplicity(childcare_ppp) &gt; 1)\n\n\n[1] 0\n\n\nThe output shows that there are no duplicated point events.\nTo view the locations of these duplicate point events, we will plot childcare data by using the code chunk below.\n\n\nShow the code\ntmap_mode('view')\ntm_shape(childcare_sf) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\nThere are three ways to overcome this problem. The easiest way is to delete the duplicates. But, that will also mean that some useful point events will be lost.\nThe second solution is use jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe third solution is to make each point “unique” and then attach the duplicates of the points to the patterns as marks, as attributes of the points. Then you would need analytical techniques that take into account these marks.\nThe code chunk below implements the jittering approach.\n\n\nShow the code\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\n\n\nShow the code\nany(duplicated(childcare_ppp_jit))\n\n\n[1] FALSE\n\n\n\n\n4.5.5 Creating owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis with a geographical area like Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\nThe code chunk below is used to covert sg SpatialPolygon object into owin object of spatstat.\n\n\nShow the code\nsg_owin &lt;- as.owin(sg_sf)\n\n\nThe ouput object can be displayed by using plot() function\n\n\nShow the code\nplot(sg_owin)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nsummary(sg_owin)\n\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\n4.5.6 Combining point events object and owin object\nIn this last step of geospatial data wrangling, we will extract childcare events that are located within Singapore by using the code chunk below.\n\n\nShow the code\nchildcareSG_ppp = childcare_ppp[sg_owin]\n\n\nThe output object combined both the point and polygon feature in one ppp object class as shown below.\n\n\nShow the code\nsummary(childcareSG_ppp)\n\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\nShow the code\nplot(childcareSG_ppp)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#first-order-spatial-point-patterns-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#first-order-spatial-point-patterns-analysis",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.6 First-order Spatial Point Patterns Analysis",
    "text": "4.6 First-order Spatial Point Patterns Analysis\nIn this section, you will learn how to perform first-order SPPA by using spatstat package. The hands-on exercise will focus on:\n\nderiving kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes,\nperforming Confirmatory Spatial Point Patterns Analysis by using Nearest Neighbour statistics.\n\n\n4.6.1 Kernel Density Estimation\nIn this section, you will learn how to compute the kernel density estimation (KDE) of childcare services in Singapore.\n\n4.6.1.1 Computing kernel density estimation using automatic bandwidth selection method\nThe code chunk below computes a kernel density by using the following configurations of density() of spatstat:\n\nbw.diggle() automatic bandwidth selection method. Other recommended methods are bw.CvL(), bw.scott() or bw.ppl().\nThe smoothing kernel used is gaussian, which is the default. Other smoothing methods are: “epanechnikov”, “quartic” or “disc”.\nThe intensity estimate is corrected for edge effect bias by using method described by Jones (1993) and Diggle (2010, equation 18.9). The default is FALSE.\n\n\n\nShow the code\nkde_childcareSG_bw &lt;- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\n\n\nShow the code\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\nThe density values of the output range from 0 to 0.000035 which is way too small to comprehend. This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”.\nBefore we move on to next section, it is good to know that you can retrieve the bandwidth used to compute the kde layer by using the code chunk below.\n\n\nShow the code\nbw &lt;- bw.diggle(childcareSG_ppp)\nbw\n\n\n   sigma \n298.4095 \n\n\n\n\n4.6.1.2 Rescalling KDE values\nIn the code chunk below, rescale.ppp() is used to covert the unit of measurement from meter to kilometer.\n\n\nShow the code\nchildcareSG_ppp.km &lt;- rescale.ppp(childcareSG_ppp, 1000, \"km\")\n\n\nNow, we can re-run density() using the resale data set and plot the output kde map.\n\n\nShow the code\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\n\nNotice that output image looks identical to the earlier version, the only changes in the data values (refer to the legend).\n\n\n\n4.6.2 Working with different automatic badwidth methods\nBeside bw.diggle(), there are three other spatstat functions can be used to determine the bandwidth, they are: bw.CvL(), bw.scott(), and bw.ppl().\nLet us take a look at the bandwidth return by these automatic bandwidth calculation methods by using the code chunk below.\n\n\nShow the code\n bw.CvL(childcareSG_ppp.km)\n\n\n   sigma \n4.543278 \n\n\n\n\nShow the code\n bw.scott(childcareSG_ppp.km)\n\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\n\n\n\nShow the code\nbw.ppl(childcareSG_ppp.km)\n\n\n    sigma \n0.3897114 \n\n\n\n\nShow the code\nbw.diggle(childcareSG_ppp.km)\n\n\n    sigma \n0.2984095 \n\n\nBaddeley et. (2016) suggested the use of the bw.ppl() algorithm because in ther experience it tends to produce the more appropriate values when the pattern consists predominantly of tight clusters. But they also insist that if the purpose of once study is to detect a single tight cluster in the midst of random noise then the bw.diggle() method seems to work best.\nThe code chunk beow will be used to compare the output of using bw.diggle and bw.ppl methods.\n\n\nShow the code\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\n\n4.6.3 Working with different kernel methods\nBy default, the kernel method used in density.ppp() is gaussian. But there are three other options, namely: Epanechnikov, Quartic and Dics.\nThe code chunk below will be used to compute three more kernel density estimations by using these three kernel function.\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#fixed-and-adaptive-kde",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#fixed-and-adaptive-kde",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.7 Fixed and Adaptive KDE",
    "text": "4.7 Fixed and Adaptive KDE\n\n4.7.1 Computing KDE by using fixed bandwidth\nNext, you will compute a KDE layer by defining a bandwidth of 600 meter. Notice that in the code chunk below, the sigma value used is 0.6. This is because the unit of measurement of childcareSG_ppp.km object is in kilometer, hence the 600m is 0.6km.\n\n\nShow the code\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\n\n4.7.2 Computing KDE by using adaptive bandwidth\nFixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural. One way to overcome this problem is by using adaptive bandwidth instead.\nIn this section, you will learn how to derive adaptive kernel density estimation by using density.adaptive() of spatstat.\n\n\nShow the code\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\n\nWe can compare the fixed and adaptive kernel density estimation outputs by using the code chunk below.\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\n\n4.7.3 Converting KDE output into grid object.\nThe result is the same, we just convert it so that it is suitable for mapping purposes.\n\n\nShow the code\ngridded_kde_childcareSG_bw &lt;- as.SpatialGridDataFrame.im(kde_childcareSG.bw)\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n\n4.7.3.1 Converting gridded output into raster\nNext, we will convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\n\nShow the code\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\n\n\nLet us take a look at the properties of kde_childcareSG_bw_raster RasterLayer.\n\n\nShow the code\nkde_childcareSG_bw_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNotice that the crs property is NA.\n\n\n4.7.3.2 Assigning projection systems\nThe code chunk below will be used to include the CRS information on kde_childcareSG_bw_raster RasterLayer.\n\n\nShow the code\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\nNotice that the crs property is completed.\n\n\n\n4.7.4 Visualising the output in tmap\nFinally, we will display the raster in cartographic quality map using tmap package.\n\n\nShow the code\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\nNotice that the raster values are encoded explicitly onto the raster pixel using the values in “v”” field.\n\n\n4.7.5 Comparing Spatial Point Patterns using KDE\nIn this section, you will learn how to compare KDE of childcare at Ponggol, Tampines, Chua Chu Kang and Jurong West planning areas.\n\n4.7.5.1 Extracting study area\nThe code chunk below will be used to extract the target planning areas.\n\n\nShow the code\npg &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n\nPlotting target planning areas:\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nplot(tm, main = \"Tampines\")\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nplot(jw, main = \"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\n4.7.5.2 Creating owin object\nNow, we will convert these sf objects into owin objects that is required by spatstat.\n\n\nShow the code\npg_owin = as.owin(pg)\ntm_owin = as.owin(tm)\nck_owin = as.owin(ck)\njw_owin = as.owin(jw)\n\n\n\n\n4.7.5.3 Combining childcare points and the study area\nBy using the code chunk below, we are able to extract childcare that is within the specific region to do our analysis later on.\n\n\nShow the code\nchildcare_pg_ppp = childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp = childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp = childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp = childcare_ppp_jit[jw_owin]\n\n\nrescale.ppp()\n\n\nShow the code\nchildcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\n\nPlot\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Punggol\")\nplot(childcare_tm_ppp.km, main=\"Tampines\")\nplot(childcare_ck_ppp.km, main=\"Choa Chu Kang\")\nplot(childcare_jw_ppp.km, main=\"Jurong West\")\n\n\n\n\n\n\n\n\n\n\n\n4.7.5.4 Computing KDE\nThe code chunk below will be used to compute the KDE of these four planning area. bw.diggle method is used to derive the bandwidth of each\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\n\n\n\n\n\n\n\n\n\n\n\n4.7.5.5 Computing fixed bandwidth KDE\nFor comparison purposes, we will use 250m as the bandwidth.\n\n\nShow the code\npar(mfrow=c(2,2))\nplot(density(childcare_ck_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Chou Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"JUrong West\")\nplot(density(childcare_pg_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=0.25, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tampines\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#nearest-neighbour-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#nearest-neighbour-analysis",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.8 Nearest Neighbour Analysis",
    "text": "4.8 Nearest Neighbour Analysis\nIn this section, we will perform the Clark-Evans test of aggregation for a spatial point pattern by using clarkevans.test() of statspat.\nThe test hypotheses are:\nHo = The distribution of childcare services are randomly distributed.\nH1= The distribution of childcare services are not randomly distributed.\nThe 95% confident interval will be used.\n\n4.8.1 Testing spatial point patterns using Clark and Evans Test\n\n\nShow the code\nclarkevans.test(childcareSG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcareSG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\n\n\n4.8.2 Clark and Evans Test: Choa Chu Kang planning area\nIn the code chunk below, clarkevans.test() of spatstat is used to performs Clark-Evans test of aggregation for childcare centre in Choa Chu Kang planning area.\n\n\nShow the code\nclarkevans.test(childcare_ck_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_ck_ppp\nR = 0.97713, p-value = 0.7326\nalternative hypothesis: two-sided\n\n\n\n\n4.8.3 Clark and Evans Test: Tampines planning area\nIn the code chunk below, the similar test is used to analyse the spatial point patterns of childcare centre in Tampines planning area.\n\n\nShow the code\nclarkevans.test(childcare_tm_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_tm_ppp\nR = 0.78152, p-value = 8.045e-05\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#reference",
    "href": "Hands-on Exercise/Hands-on_Ex02a/Hands-on_Ex02a.html#reference",
    "title": "4 1st Order Spatial Point Patterns Analysis Methods",
    "section": "4.9 Reference",
    "text": "4.9 Reference\nProf T.S. Kam - Chapter 4: R for Geospatial Data Science and Analytics"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#loading-library-and-data",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#loading-library-and-data",
    "title": "In-class Ex 01",
    "section": "1.0 Loading Library and Data",
    "text": "1.0 Loading Library and Data\nThis code chunk install and load the relevant package.\n\n\nShow the code\npacman::p_load(tidyverse,sf,\n               tmap,ggstatsplot)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-planning-sub-zone-data",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-planning-sub-zone-data",
    "title": "In-class Ex 01",
    "section": "2.1 Working with Master Plan Planning Sub-zone Data",
    "text": "2.1 Working with Master Plan Planning Sub-zone Data\nThis code chunk imports shapefile(.shp):\n\n\nShow the code\nmpsz14_shp = st_read(dsn = \"data/\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThis code chunk imports kml file(.kml):\n\n\nShow the code\nst_write(mpsz14_shp,\n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n\n\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nfor “delete_dsn” argument = TRUE, the file of the same name (mpsz14_shp) will be overwritten by the new file."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-pre-school-location-data",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-pre-school-location-data",
    "title": "In-class Ex 01",
    "section": "2.2 Working with Pre-school Location Data",
    "text": "2.2 Working with Pre-school Location Data\nThis code chunk imports kml file.\n\n\nShow the code\npreschool_kml &lt;- st_read(\"data/PreSchoolsLocation.kml\")\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nThis code chunk imports geojson file.\n\n\nShow the code\npreschool_geojson &lt;- st_read(\"data/PreSchoolsLocation.geojson\") \n\n\nReading layer `PreSchoolsLocation' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\PreSchoolsLocation.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-2019-subzone-boundary-data",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-master-plan-2019-subzone-boundary-data",
    "title": "In-class Ex 01",
    "section": "2.3 Working with Master Plan 2019 Subzone Boundary Data",
    "text": "2.3 Working with Master Plan 2019 Subzone Boundary Data\nThis code chunk import shapefile.\n\n\nShow the code\nmpsz19_shp &lt;- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\")\n\n\nReading layer `MPSZ-2019' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\nThis code chunk import kml file:\n\n\nShow the code\nmpsz19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#handling-coordinate-systems",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#handling-coordinate-systems",
    "title": "In-class Ex 01",
    "section": "3.0 Handling Coordinate Systems",
    "text": "3.0 Handling Coordinate Systems\n\n3.1 Checking coordinate system\n\n\nShow the code\nst_crs(mpsz19_shp)\n\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nNote that the EPSG code is 4326 for WGS84.\nWe may need to perform transformation to change the EPSG code accordingly if we notice that the EPSG code does not corresponding to the CRS.\nThe correct EPSG code for svy21 should be 3414.\n\n\n\n\n\n3.2 Transformation / Re-projection\nImport and transform coordinate system for the shapefile:\n\n\nShow the code\nmpsz19_shp &lt;- st_read(dsn = \"data/\",\n                  layer = \"MPSZ-2019\") %&gt;% \n  st_transform(crs = 3414)\n\n\nReading layer `MPSZ-2019' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nGeographical Coordinate Systems\n\n\n\n\nGCS define locations on the earth using a three-dimensional spherical surface. For example, WGS84.\nThey provides accuracy position information. Unit of measurement will be in either decimal degree or degree-minute-second format.\nGCS, however, are not appropriate for distance and area measurements. In this figure, it is clear that 1 degree distance at the north pole is relatively shorter than 1 degree at the equator.\nRefer to 9.1 Geographic Coordinate Systems to learn more about GCS.\n\n\n\n\n\n\n\n\n\nProjected Coordinate Systems (PCS)\n\n\n\n\nBased on a map projection such as transverse Mercator, Albers equal area, or Robinson.\nPCS provides consistent length and area measurement across space. Hence, it is important to transform a geospatial data from GCS to PCS before performing geospatial analysis.\nRefer to 9.2 Projected Coordinate Systems to learn more about GCS.\n\n\n\n\n\n\n\n\n\nTransformation (st_transform)\n\n\n\n\ntechnical term: re-projection\nmpsz19_shp geometry changed.\nBefore:\n\nAfter:\n\n\n\n\nImport and transform kml file:\n\n\nShow the code\npreschool &lt;- st_read(\"data/PreSchoolsLocation.kml\") %&gt;%\n  st_transform(crs = 3414)\n\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nNote on CSV and Excel file\n\n\n\nWe may prefer to work with csv file as it is tidier. Excel file may contain headers and merged cell, which may result in requirement for data cleaning."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#geospatial-data-wrangling",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#geospatial-data-wrangling",
    "title": "In-class Ex 01",
    "section": "4.0 Geospatial Data Wrangling",
    "text": "4.0 Geospatial Data Wrangling\n\n4.1 Point-in-Polygon count\nThe code chunk below count the number of pre-schools in each planning sub-zone.\n\n\nShow the code\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(`PreSch Count` = lengths(\n    st_intersects(mpsz19_shp, preschool)))\n\n\n\n\n\n\n\n\nRecap on st_intersects / st_intersection\n\n\n\n\nst_intersects: touch or overlap. This commands compare two sf data object and return a sparse matrix with matching (TRUE) indexes, or a full logical matrix.\nst_intersection: intersection of pairs of geometries. This command overlay two sf data frames.\n\n\n\n\n\n4.2 Computing Density\nThe code chunk below performs the following tasks:\n\nDerive the area of each planning sub-zone.\nDrop the unit of measurement of the area (i.e. m^2)\nCalculate the density of pre-school at the planning sub-zone level.\n\n\n\nShow the code\nmpsz19_shp &lt;- mpsz19_shp %&gt;%\n  mutate(Area = units::drop_units(\n    st_area(.)),\n    `PreSch Density` = `PreSch Count` / Area * 1000000\n  )"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#statistical-analysis",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#statistical-analysis",
    "title": "In-class Ex 01",
    "section": "5.0 Statistical Analysis",
    "text": "5.0 Statistical Analysis\nThe tasks: Using appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.\nTip: Refer to ggscatterstats() of ggstatsplot package.\n\n\nShow the code\nmpsz19_shp$`PreSch Density` &lt;- as.numeric(as.character(mpsz19_shp$`PreSch Density`))\nmpsz19_shp$`PreSch Count` &lt;- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) \nmpsz19_shp_1 &lt;- as.data.frame(mpsz19_shp)\n\nggscatterstats(data = mpsz19_shp_1,\n               x = `PreSch Density`,\n               y = `PreSch Count`,\n               type = \"parametric\",\n               label.var = `SUBZONE_N`,\n               label.expression =  `PreSch Density` &gt; 30 |`PreSch Count` &gt; 50) \n\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\n\n`stat_xsidebin()` using `bins = 30`. Pick better value with `binwidth`.\n`stat_ysidebin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-population-data",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#working-with-population-data",
    "title": "In-class Ex 01",
    "section": "6.0 Working with Population Data",
    "text": "6.0 Working with Population Data\nThe code chunk below import the csv file:\n\n\nShow the code\npopdata &lt;- read_csv(\"data/respopagesextod2023.csv\")\n\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#data-wrangling",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#data-wrangling",
    "title": "In-class Ex 01",
    "section": "6.1 Data Wrangling",
    "text": "6.1 Data Wrangling\nPrepare a data.frame showing population by Planning Area and Planning subzone.\n\n\nShow the code\npopdata2023 &lt;- popdata %&gt;% \n  group_by(PA, SZ, AG) %&gt;% \n  summarise(`POP`=sum(`Pop`)) %&gt;%  \n  ungroup() %&gt;% \n  pivot_wider(names_from=AG,\n              values_from = POP)\n\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\n\nShow the code\ncolnames(popdata2023)\n\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n\n\n\n6.1.1 Derive New Fields\nDerive a tibble data.framewith the following fields PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, DEPENDENCY where by:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age group, and\nDEPENDENCY: the ratio between young and aged against economy active group.\n\n\n\nShow the code\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate(YOUNG=rowSums(.[3:6]) # Aged 0 - 24, 10 - 24\n         +rowSums(.[14])) %&gt;% # Aged 5 - 9\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:13])+ # Aged 25 - 59\n  rowSums(.[15])) %&gt;%  # Aged 60 -64\n  mutate(`AGED`=rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n  / `ECONOMY ACTIVE`) %&gt;% \n  select(`PA`, `SZ`, `YOUNG`, \n         `ECONOMY ACTIVE`, `AGED`,\n         `TOTAL`, `DEPENDENCY`)\n\n\n\n\n\n\n\n\nCaution\n\n\n\n\nTake note of the column number for each age group. Some do not run in sequence.\n\nAged 5 - 9: Column 14\nAged 60 -64: Column 15\n\n\n\n\n\n\n6.1.2 Joining popdata2023 and mpsz19_shp.\nUsing dplyr::mutate_at() to change to uppercase:\n\n\nShow the code\npopdata2023 &lt;- popdata2023 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) \n\n\nCombining using left_join():\n\n\nShow the code\nmpsz_pop2023 &lt;- left_join(mpsz19_shp, popdata2023,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\n\n\nShow the code\npop2023_mpsz &lt;- left_join(popdata2023, mpsz19_shp, \n                          by = c(\"SZ\" = \"SUBZONE_N\"))\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nSequence of the left_join() will determine the order of the columns in the new data.frame.\nThe data.frame columns will be added in the same sequence as in the left_join() arguments.\n\ni.e. mpsz_pop2023 df will have SUBZONE_N as the first column followed by all other columns in mpsz, then followed by columns in the pop2023.\n\npop2023_mpsz will have PA as the first column, followed by all other columns in pop2023, then followed by columns in the mpsz."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#choropleth-map-of-dependency-ratio-by-planning-subzone",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#choropleth-map-of-dependency-ratio-by-planning-subzone",
    "title": "In-class Ex 01",
    "section": "7.0 Choropleth Map of Dependency Ratio by Planning Subzone",
    "text": "7.0 Choropleth Map of Dependency Ratio by Planning Subzone\n\n\nShow the code\ntmap_style(\"white\")\n\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\nShow the code\ntm_shape(mpsz_pop2023)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE,\n            bg.color = \"#FFE5CC\") +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(position = c(\"center\", \"bottom\")) +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"top\"))"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#analytical-map-percentile-map",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#analytical-map-percentile-map",
    "title": "In-class Ex 01",
    "section": "8.0 Analytical Map: Percentile Map",
    "text": "8.0 Analytical Map: Percentile Map\n\n8.1 The concept\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n\n8.2 Step 1: Data Preparation\nThe code chunk below excludes records with NA by using the code chunk below.\n\n\nShow the code\nmpsz_pop2023 &lt;- mpsz_pop2023 %&gt;%\n  drop_na()\n\n\n\n\n8.3 Step 2: The get function\nThe code chunk below defines a function to get the input data and field to be used for creating the percentile map.\n\n\nShow the code\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n8.4 Step 3: A percentile mapping function\nThe code chunk below creates a function for computing and plotting the percentile map.\n\n\nShow the code\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(mpsz_pop2023) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\n\n8.5 Step 4: Running the functions\nThe code chunk below runs the percentile map function.\n\n\nShow the code\npercentmap(\"DEPENDENCY\", mpsz_pop2023)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#analytical-map-box-map",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#analytical-map-box-map",
    "title": "In-class Ex 01",
    "section": "9.0 Analytical Map: Box Map",
    "text": "9.0 Analytical Map: Box Map\n\nThe Concept\nIn essence, a box map is an augmented quartile map, with an additional lower and upper category. When there are lower outliers, then the starting point for the breaks is the minimum value, and the second break is the lower fence. In contrast, when there are no lower outliers, then the starting point for the breaks will be the lower fence, and the second break is the minimum value (there will be no observations that fall in the interval between the lower fence and the minimum value).\n\n\nShow the code\nggplot(data = mpsz_pop2023,\n       aes(x = \"\",\n           y = DEPENDENCY)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\n\n\n9.1 Step 1: Creating the boxbreaks function\nThe code chunk on the right is an R function that creating break points for a box map.\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\n\nShow the code\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\n\n9.2 Step 2: Creating the get.var function\nThe code chunk on the right an R function to extract a variable as a vector out of an sf data frame.\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\n\nShow the code\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\n9.3 Step 3: Boxmap function\nThe code chunk on the right is an R function to create a box map.\n\narguments:\n\nvnam: variable name (as character, in quotes)\ndf: simple features polygon layer\nlegtitle: legend title\nmtitle: map title\nmult: multiplier for IQR\n\nreturns:\n\na tmap-element (plots a map)\n\n\n\n\nShow the code\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\n\n\n9.4 Step 4: Plotting Box Map\n\n\nShow the code\nboxmap(\"DEPENDENCY\", mpsz_pop2023)\n\n\n\n\n\n\n\n\n\n\n\n9.5 Plotting Interactive Box Map\n\n\nShow the code\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\nboxmap(\"DEPENDENCY\", mpsz_pop2023)\n\n\nWarning: The shape df is invalid (after reprojection). See sf::st_is_valid\nWarning: The shape df is invalid (after reprojection). See sf::st_is_valid"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#reference",
    "href": "In-class Exercise/In-class_Ex01/In-class_Ex01.html#reference",
    "title": "In-class Ex 01",
    "section": "10 Reference",
    "text": "10 Reference\nProf T.S. Kam: Geospatial Analytics & Application In-Class Ex 01"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-study-area",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-study-area",
    "title": "Take-home Ex01",
    "section": "The Study Area",
    "text": "The Study Area\nThe study area is Bangkok Metropolitan Area.\nWGS 84 / UTM zone 47N\nEPSG code 32647"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#loading-library-and-importing-traffic-accident-data",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#loading-library-and-importing-traffic-accident-data",
    "title": "Take-home Ex01",
    "section": "2.0 Loading Library and Importing Traffic Accident Data",
    "text": "2.0 Loading Library and Importing Traffic Accident Data\n\n\nShow the code\npacman::p_load(sf, \n               raster,\n               spNetwork,\n               tmap, \n               tidyverse)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#references",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#references",
    "title": "Take-home Ex01",
    "section": "References",
    "text": "References\nNews: https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html",
    "title": "In-class Ex 03",
    "section": "",
    "text": "Show the code\npacman::p_load(sf,\n               spNetwork,\n               tmap,\n               tidyverse)\n\n\n\nsf: used for importing and exporting (.rds)\nspNetwork: using sf tibble data frame as input.\ntmap: for creating quality map. tidyverse: readr() for .csv. lubridate() to manipulate date type data."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#loading-the-packages",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#loading-the-packages",
    "title": "In-class Ex 03",
    "section": "1.0 Loading the Packages",
    "text": "1.0 Loading the Packages\n\n\nShow the code\npacman::p_load(sf,\n               spNetwork,\n               tmap,\n               tidyverse)\n\n\n\nsf: used for importing and exporting (.rds)\nspNetwork: using sf tibble data frame as input.\ntmap: for creating quality map. tidyverse: readr() for .csv. lubridate() to manipulate date type data."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#data-import-and-preparation",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#data-import-and-preparation",
    "title": "In-class Ex 03",
    "section": "2.0 Data Import and Preparation",
    "text": "2.0 Data Import and Preparation\n\n\nShow the code\nnetwork &lt;- st_read(dsn=\"data/geospatial\", \n                   layer=\"Punggol_St\")\n\n\nReading layer `Punggol_St' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2642 features and 2 fields\nGeometry type: LINESTRING\nDimension:     XY\nBounding box:  xmin: 34038.56 ymin: 40941.11 xmax: 38882.85 ymax: 44801.27\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nCheck that geometry is Linestring.\n\n\n\n\n\nShow the code\nchildcare_xyz &lt;- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\")\n\n\nReading layer `Punggol_CC' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\nShow the code\nchildcare &lt;- st_read(dsn=\"data/geospatial\",\n                     layer=\"Punggol_CC\") %&gt;% \n  st_zm(drop = TRUE,\n        what = 'ZM')\n\n\nReading layer `Punggol_CC' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex03\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 61 features and 1 field\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 34423.98 ymin: 41503.6 xmax: 37619.47 ymax: 44685.77\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\n\n\n\n\n\n\n\n\nNote\n\n\n\n\nchildcare_xyz: We notice that the Dimension is XYZ. i.e. it is 3 dimension, X,Y, and Z. (before processing with st_zm())\nchildcare_xyz is POINT Z data in geometry.\n\nZ- value = height\nst_zm() removes the dimension.\nchildcare is now a POINT geometry.\n\n\n\n\n\n\nShow the code\nplot(network) \nplot(childcare,add=T,col =\"red\",pch = 19)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsf layers\n\n\n\n\nwhen we use plot(network), it will show individual columns as a layer, based on the unique names of the LINK_ID or ST_NAME.\nwe use st_geometry() as below instead.\nWe use plot() for a quick look. It is by no means a comprehensive way to plot a quality map, but more of helping us to understand the geometry quickly.\n\n\n\n\n\nShow the code\nplot(st_geometry(network)) \nplot(childcare,add=T,col =\"red\",pch = 19)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode('view')\n\n\ntmap mode set to interactive viewing\n\n\nShow the code\ntm_shape(childcare) + \n  tm_dots(col =\"red\") +\n  tm_shape(network) +\n  tm_lines()\n\n\n\n\n\n\nShow the code\ntmap_mode('plot')\n\n\ntmap mode set to plotting\n\n\n\n\n\n\n\n\ntmap notes\n\n\n\n\ntmap_mode(): “plot” or “view” to set the interactivity of tmap.\n\ntmap_mode(“view”) allow use to open different background layers like OpenStreetMap etc.\nwe can also change the layers (childcare, network) that we want to hide or appear.\n\ntmap_shape: the extend/boundaries of the data.\ntmap_symbols: add symbols\ntm_squares():\ntm_bubbles(): size changes when zooming in and out. Absolute size\ntm_dots(): size remains relative same size\nLeaflet: used by foursquare/mapbox"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#preparing-the-lixels-objects",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#preparing-the-lixels-objects",
    "title": "In-class Ex 03",
    "section": "2.0 Preparing the lixels objects",
    "text": "2.0 Preparing the lixels objects\n\n\nShow the code\nlixels &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 350)\n\n\n\n\nShow the code\nlixels_350 &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 350)\n\n\n\n\nShow the code\nlixels_500 &lt;- lixelize_lines(network, \n                         700, \n                         mindist = 500)\n\n\n\n\n\n\n\n\nLixels\n\n\n\n\n700: derived from research on willing walkable distance in Singapore.\n350: mindist is half of 700. Decide after testing. Start with half of 700. Take note of how many observations are added to the original data.\nHow to decide what is a good outcome for number of lixels obs.?\n\ncalculate nearest neighbour\ntake lowest 10% (rough gauge) of the data to ensure all these points are included."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#generating-line-centre-points",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#generating-line-centre-points",
    "title": "In-class Ex 03",
    "section": "3.0 Generating line centre points",
    "text": "3.0 Generating line centre points\n\n\nShow the code\nsamples &lt;- lines_center(lixels)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#performing-nkde",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#performing-nkde",
    "title": "In-class Ex 03",
    "section": "4.0 Performing NKDE",
    "text": "4.0 Performing NKDE\n\n\nShow the code\ndensities &lt;- nkde(network, \n                  events = childcare,\n                  w = rep(1, nrow(childcare)),\n                  samples = samples,\n                  kernel_name = \"quartic\",\n                  bw = 300, \n                  div= \"bw\", \n                  method = \"simple\", \n                  digits = 1, \n                  tol = 1,\n                  grid_shape = c(1,1), \n                  max_depth = 8,\n                  agg = 5, \n                  sparse = TRUE,\n                  verbose = FALSE)\n\n\n\n\nShow the code\nsamples$density &lt;- densities\nlixels$density &lt;- densities\n\n\n\n\n\n\n\n\nNKDE\n\n\n\n\nDon’t use Gaussian to avoid negative values\nOutput is a list called densities: a list of number which is the intensity value of the line\nuse samples$density and lixels$density to append the calculated densities into each dataset.\n\n!!! do not sort the data. If not, the data will be appended in the wrong column.\nsimilar to using left_join(), except that there is no need to have unique identifier.\n\nuse lixel data if we want to highlight the line.\nuse samples data if we want to highlight the point.\n\n\n\n\n\nShow the code\n# rescaling to help the mapping\nsamples$density &lt;- samples$density*1000\nlixels$density &lt;- lixels$density*1000"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#network-constrained-g--and-k-function-analysis",
    "href": "In-class Exercise/In-class_Ex03/In-class_Ex03.html#network-constrained-g--and-k-function-analysis",
    "title": "In-class Ex 03",
    "section": "Network Constrained G- and K-Function Analysis",
    "text": "Network Constrained G- and K-Function Analysis\n\n\nShow the code\nkfun_childcare &lt;- kfunctions(network, \n                             childcare,\n                             start = 0, \n                             end = 1000, \n                             step = 50, \n                             width = 50, \n                             nsim = 50, \n                             resolution = 50,\n                             verbose = FALSE, \n                             conf_int = 0.05)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#introduction",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#introduction",
    "title": "Take-home Ex01",
    "section": "1.0 Introduction",
    "text": "1.0 Introduction\n\n1.1 The Study Area\n\nThe study area is Bangkok Metropolitan Area.\nWGS 84 / UTM zone 47N\nEPSG code 32647"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-datasets",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#the-datasets",
    "title": "Take-home Ex01",
    "section": "1.2 The Datasets",
    "text": "1.2 The Datasets\nThe following datasets are provided as part of the Take Home Exercise 1:\nAspatial\n\nThailand Road Accident [2019-2022] on Kaggle\n\nThis dataset is a list of Thailand Road Accident between 2019 to 2022 in .csv format, where details like province, date/time of accident, cause of accident, type of vehicles and weather conditions are provided. The variables in this dataset will be used for analysis of the factors that contributes to the road traffic accidents.\n\n\nGeospatial\n\nThailand Roads (OpenStreetMap Export) on HDX.\n\nThis dataset contains all the Thailand Road network which we will use to extract relevant roads within the study area.\n\nThailand - Subnational Administrative Boundaries on HDX.\n\nThis dataset will be used to set the boundaries for the study area, so as to exclude the data points that are irrelevant for this study."
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#importing-data",
    "title": "Take-home Ex01",
    "section": "3.0 Importing Data",
    "text": "3.0 Importing Data\n\n3.1 Importing Aspatial Data and Converting it into Spatial Data\nSince the Thailand Road Accident [2019-2022] is data set is in csv file format, we will use read_csv() of readr package to import Thailand Road Accident [2019-2022].Following which, we use the pipe function and dplyr::filter() to filter out rows that has “na” or is empty in value. Next, we use st_as_sf to combine the longitude and latitude in the csv file can combine it into “geometry” column. Lastly, we use st_transform to change the Coordinate Reference System (CRS) to 32647, which is Thailand’s ESPG code. The output R object is called rdacc_sf and it is a sf data frame.\n\n\nShow the code\nrdacc_sf &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n  filter(!is.na(longitude) &longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %&gt;% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %&gt;% \n  st_transform(crs = 32647)\n\n\n\n\n\n\n\n\nNotes on rdacc_sf\n\n\n\n\nincident_datetime is datetime format of POSIXct.\nst_as_sf(coords = c(“longitude”, “latitude”), crs = 4326) combines and longitude and latitude columns into geometry column\nThai projection code is 32647, hence we use this code chunk: st_transform(crs = 32647)\nFilter is used to remove the longitude and latitude that has na as value.\nCheck what is the number of data lost after removing na. Make sure the study region, the data lost is not significant. (not more than 5% lost)\nuse readr::read_csv() to ensure the data is imported as tibble data frame. Do not use read.csv().\nCheck the data.\n\n\n\n\n\n3.1.1 Wrangling the Date Fields\nUsing tidyverse::lubridate\n\n\nShow the code\nrdacc_sf &lt;- rdacc_sf %&gt;% \n  mutate(DayOfWeek = day(incident_datetime)) %&gt;% \n  mutate(Month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n\n\n\n\nShow the code\nwrite_rds(rdacc_sf, \"data/rds/rdacc_sf.rds\")\n\n\n\n\nShow the code\nrdacc_sf &lt;- read_rds(\"data/rds/rdacc_sf.rds\")\n\n\n\n\n\n\n\n\nLubridate\n\n\n\n\nlubridate::month(): label = TRUE -&gt; change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.\n\n\n\n\n\n3.2 Importing Spatial Data\nImporting the Thailand - Subnational Administrative Boundaries"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html",
    "title": "8 Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#overview",
    "title": "8 Spatial Weights and Applications",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute spatial weights using appropriate functions of spdep package, and\ncalculate spatially lagged variables using appropriate functions of spdep package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#the-study-area-and-data",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#the-study-area-and-data",
    "title": "8 Spatial Weights and Applications",
    "section": "8.2 The Study Area and Data",
    "text": "8.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan county boundary layer. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n8.2.1 Getting Started\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#getting-the-data-into-r-environment",
    "title": "8 Spatial Weights and Applications",
    "section": "8.3 Getting the Data Into R Environment",
    "text": "8.3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n8.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nShow the code\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n8.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R dataframe class.\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n8.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan &lt;- left_join(hunan,hunan2012) %&gt;% \n  select(1:3,7,15,16,31,32)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-regional-development-indicator",
    "title": "8 Spatial Weights and Applications",
    "section": "8.4 Visualising Regional Development Indicator",
    "text": "8.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\ntmap_mode(\"view\")\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#computing-contiguity-spatial-weights",
    "title": "8 Spatial Weights and Applications",
    "section": "8.5 Computing Contiguity Spatial Weights",
    "text": "8.5 Computing Contiguity Spatial Weights\nIn this section, you will learn how to use poly2nb() of spdep package to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\n\n8.5.1 Computing (QUEEN) contiguity based neighbours\nThe code chunk below is used to compute Queen contiguity weight matrix.\n\n\nShow the code\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit (85) has 11 neighbours. There are two area units (30 and 65) with only one neighbours.\nFor each polygon in our polygon object, wm_q lists all neighboring polygons. For example, to see the neighbors for the first polygon in the object, type:\n\n\nShow the code\nwm_q[[1]]\n\n\n[1]  2  3  4 57 85\n\n\nPolygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.\nWe can retrive the county name of Polygon ID=1 by using the code chunk below:\n\n\nShow the code\nhunan$County[1]\n\n\n[1] \"Anxiang\"\n\n\nThe output reveals that Polygon ID=1 is Anxiang county.\nTo reveal the county names of the five neighboring polygons, the code chunk will be used:\n\n\nShow the code\nhunan$NAME_3[c(2,3,4,57,85)]\n\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nWe can retrieve the GDPPC of these five countries by using the code chunk below.\n\n\nShow the code\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe printed output above shows that the GDPPC of the five nearest neighbours based on Queen’s method are 20981, 34592, 24473, 21311 and 22879 respectively.\nYou can display the complete weight matrix by using str().\n\n\nShow the code\nstr(wm_q)\n\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\nBe warned: The output might cut across several pages. Save the trees if you are going to print out the report.\n\n\n8.5.2 Creating (ROOK) contiguity based neighbours\nThe code chunk below is used to compute Rook contiguity weight matrix.\n\n\nShow the code\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connect area unit (85) has 10 neighbours. There are two area units (30 and 65) with only one neighbours.\nWe can use the code chunks below to retrieve the GDPPC of the area unit 85 and its neighbours:\n\nFinding area unit 85’s neighbour:\n\n\n\nShow the code\nwm_r[[85]]\n\n\n [1]  1  2  3  5  6 32 56 69 75 78\n\n\nThe 10 neighbours of area 85 are 1, 2, 3, 5, 6, 32, 56, 69, 75, and 78.\n\nFinding thecounty and GDPCC of 85’s 10 neighbours:\n\n\n\nShow the code\nhunan$County[c(1, 2, 3, 5, 6, 32, 56, 69, 75, 78, 85)]\n\n\n [1] \"Anxiang\"  \"Hanshou\"  \"Jinshi\"   \"Linli\"    \"Shimen\"   \"Yuanling\"\n [7] \"Anhua\"    \"Cili\"     \"Sangzhi\"  \"Taojiang\" \"Taoyuan\" \n\n\nShow the code\nnb85 &lt;- wm_r[[85]]\nnb85 &lt;- hunan$GDPPC[nb85]\nnb85\n\n\n [1] 23667 20981 34592 25554 27137 24194 14567 18714 14624 19509\n\n\nShow the code\nhunan$GDPPC[85]\n\n\n[1] 22879\n\n\nArea unit 85, Taoyuan’s neighbour are “Anxiang” , “Hanshou”, “Jinshi”, “Linli” , “Shimen” , “Yuanling”, “Anhua”, “Cili” , “Sangzhi” , and “Taojiang”. Taoyuan has a GDPPC of 22879, against its neigbours’ GDPCC of 23667, 20981, 34592, 25554, 27137, 24194, 14567, 18714, 14624, and 19509 respectively."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#visualising-contiguity-weights",
    "title": "8 Spatial Weights and Applications",
    "section": "8.5.3 Visualising contiguity weights",
    "text": "8.5.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids. We will calculate these in the sf package before moving onto the graphs. Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nShow the code\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nShow the code\ncoords &lt;- cbind(longitude, latitude)\n\n\nWe check the first few observations to see if things are formatted correctly.plot(hunan$geometry, border=“lightgrey”) plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= “red”){r} head(coords)\n\n8.5.3.1 Plotting Queen contiguity based neighbours map\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\n\n8.5.3.2 Plotting Rook contiguity based neighbours map\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\n8.5.3.3 Plotting both Queen and Rook contiguity based neighbours maps\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#computing-distance-based-neighbours",
    "title": "8 Spatial Weights and Applications",
    "section": "8.6 Computing distance based neighbours",
    "text": "8.6 Computing distance based neighbours\nIn this section, you will learn how to derive distance-based weight matrices by using dnearneigh() of spdep package.\nThe function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n8.6.1 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\n# coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nnb_length &lt;- nbdists(k1, coords, longlat = TRUE)\nk1dists &lt;- unlist(nb_length)\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\n\n\n\n\nknearneigh()\n\n\n\n\nknearneigh(x, k=1, longlat = NULL, use_kd_tree=TRUE)\nwhen k is not stated as an argument, it takes the default value of 1, i.e. finding the 1st nearest neighbour)\n\n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n8.6.2 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nShow the code\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nQuiz: What is the meaning of “Average number of links: 3.681818” shown above?\nAnswer: Each region in Hunan has an average of 3.681818 number of neighbours.\nNext, we will use str() to display the content of wm_d62 weight matrix.\n\n\nShow the code\nstr(wm_d62)\n\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nAnother way to display the structure of the weight matrix is to combine table() and card() of spdep.\n\n\nShow the code\ntable(hunan$County, card(wm_d62))\n\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\n\n\n\nShow the code\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n\n[1] 1\n\n\n\n\nShow the code\ntable(n_comp$comp.id)\n\n\n\n 1 \n88 \n\n\nThe results above shows that there are 88 data points with non-zero weights.\n\n8.6.2.1 Plotting fixed distance weight matrix\nNext, we will plot the distance weight matrix by using the code chunk below.\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\n\nThe red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.\nAlternatively, we can plot both of them next to each other by using the code chunk below.\n\n\nShow the code\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\n\n8.6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nShow the code\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\n\nSimilarly, we can display the content of the matrix by using str().\n\n\nShow the code\nstr(knn6)\n\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\nNotice that each county has six neighbours, no less no more!\n\n8.6.3.1 Plotting distance based neighbours\nWe can plot the weight matrix using the code chunk below.\n\n\nShow the code\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#weights-based-on-idw",
    "title": "8 Spatial Weights and Applications",
    "section": "8.7 Weights based on IDW",
    "text": "8.7 Weights based on IDW\nIn this section, you will learn how to derive a spatial weight matrix based on Inversed Distance method.\nFirst, we will compute the distances between areas by using nbdists() of spdep.\n\n\nShow the code\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weights-matrix",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#row-standardised-weights-matrix",
    "title": "8 Spatial Weights and Applications",
    "section": "8.8 Row-standardised Weights Matrix",
    "text": "8.8 Row-standardised Weights Matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values, it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\nThe zero.policy=TRUE option allows for lists of non-neighbors. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.\nTo see the weight of the first polygon’s five neighbors type:\n\n\nShow the code\nrswm_q$weights[1]\n\n\n[[1]]\n[1] 0.2 0.2 0.2 0.2 0.2\n\n\nEach neighbor is assigned a 0.2 of the total weight. This means that when R computes the average neighboring income values, each neighbor’s income will be multiplied by 0.2 before being tallied.\nUsing the same method, we can also derive a row standardised distance weight matrix by using the code chunk below.\n\n\nShow the code\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\n\n\n\nShow the code\nrswm_ids$weights[1]\n\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n\n\n8.9.1 Spatial lag with row-standardized weights\nFinally, we’ll compute the average neighbor GDPPC value for each polygon. These values are often referred to as spatially lagged values.\n\n\nShow the code\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nWe can append the spatially lag GDPPC values onto hunan sf data frame by using the code chunk below.\n\n\nShow the code\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\n\n\n\n\n\n\n\nleft_join()\n\n\n\n\ngeometry remains in the last column though we use left_join() to join lag GDPPC to hunan. GDPPC is at the second last column instead of last.\n\n\n\n\nThe following table shows the average neighboring income values (stored in the Inc.lag object) for each county.\n\n\nShow the code\nhead(hunan)\n\n\nSimple feature collection with 6 features and 9 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3  County GDPPC     GIO    Agri Service lag GDPPC\n1 Changde 21098 Anxiang Anxiang 23667  5108.9 4524.41   14100  24847.20\n2 Changde 21100 Hanshou Hanshou 20981 13491.0 6545.35   17727  22724.80\n3 Changde 21101  Jinshi  Jinshi 34592 10935.0 2562.46    7525  24143.25\n4 Changde 21102      Li      Li 24473 18402.0 7562.34   53160  27737.50\n5 Changde 21103   Linli   Linli 25554  8214.0 3583.91    7031  27270.25\n6 Changde 21104  Shimen  Shimen 27137 17795.0 5266.51    6981  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\n\nNext, we will plot both the GDPPC and spatial lag GDPPC for comparison using the code chunk below.\n\n\nShow the code\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n8.9.2 Spatial lag as a sum of neighboring values\nWe can calculate spatial lag as a sum of neighboring values by assigning binary weights. This requires us to go back to our neighbors list, then apply a function that will assign binary weights, then we use glist = in the nb2listw function to explicitly assign these weights.\nWe start by applying a function that will assign a value of 1 per each neighbor. This is done with lapply, which we have been using to manipulate the neighbors structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.\n\n\nShow the code\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC.\n\n\nShow the code\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\n\n\nFirst, let us examine the result by using the code chunk below.\n\n\nShow the code\nlag_sum\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, we will append the lag_sum GDPPC field into hunan sf data frame by using the code chunk below.\n\n\nShow the code\nhunan &lt;- left_join(hunan, lag.res)\n\n\n\n\nShow the code\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n8.9.3 Spatial window average\nThe spatial window average uses row-standardized weights and includes the diagonal element. To do this in R, we need to go back to the neighbors structure and add the diagonal element before assigning weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nShow the code\nwm_qs &lt;- include.self(wm_q)\nwm_q\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\n\nShow the code\nwm_qs\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNotice that the Number of nonzero links, Percentage nonzero weights and Average number of links are 536, 6.921488 and 6.090909 respectively as compared to wm_q of 448, 5.785124 and 5.090909\nLet us take a good look at the neighbour list of area [1] by using the code chunk below.\n\n\nShow the code\nwm_qs[[1]]\n\n\n[1]  1  2  3  4 57 85\n\n\nNotice that now [1] has six neighbours instead of five.\nNow we obtain weights with nb2listw()\n\n\nShow the code\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\n\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\nLastly, we just need to create the lag variable from our weight structure and GDPPC variable.\n\n\nShow the code\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nShow the code\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\n\n\nNote: The third command line on the code chunk above renames the field names of lag_wm_q1.res object into NAME_3 and lag_window_avg GDPPC respectively.\nNext, the code chunk below will be used to append lag_window_avg GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nShow the code\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\n\n\n\nShow the code\nhunan %&gt;%\n  dplyr::select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_gdppc and w_ave_gdppc maps next to each other for quick comparison.\n\n\nShow the code\nw_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\ntmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advisable to use the core tmap mapping functions.\n\n\n8.9.4 Spatial window sum\nThe spatial window sum is the counter part of the window average, but without using row-standardized weights.\nTo add the diagonal element to the neighbour list, we just need to use include.self() from spdep.\n\n\nShow the code\nwm_qs &lt;- include.self(wm_q)\nwm_qs\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\n\nNext, we will assign binary weights to the neighbour structure that includes the diagonal element.\n\n\nShow the code\nb_weights &lt;- lapply(wm_qs, function(x) 0*x + 1)\nb_weights[1]\n\n\n[[1]]\n[1] 1 1 1 1 1 1\n\n\nNotice that now [1] has six neighbours instead of five.\nAgain, we use nb2listw() and glist() to explicitly assign weight values.\n\n\nShow the code\nb_weights2 &lt;- nb2listw(wm_qs, \n                       glist = b_weights, \n                       style = \"B\")\nb_weights2\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 536 1072 14160\n\n\nWith our new weight structure, we can compute the lag variable with lag.listw().\n\n\nShow the code\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 147903 134605 131165 135423 134635 133381 238106 297281 344573 268982\n[11] 106510 136141 126832 103303 151645 196097 207589 143926 178242 175235\n[21] 138765 155699 160150 117145 113730  89002  63532 112988  59330  35930\n[31] 154439 145795 112587 107515 162322 145517  61826  79925  82589  83352\n[41] 119897 116749  81510  63530 151986 174193 210294  97361  96472 108936\n[51]  79819 108871  48531 128935  84305 188958 171869 148402  83813 104663\n[61] 155742  73336 112705  78084  58257 279414 237883 219273  83354  90124\n[71] 168462 165714 165668 311663 126892 229971 165876 271045 117731 256646\n[81] 126603 127467 295688 336838 267729 431516  85667  51028\n\n\nNext, we will convert the lag variable listw object into a data.frame by using as.data.frame().\n\n\nShow the code\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\n\n\nNote: The second command line on the code chunk above renames the field names of w_sum_gdppc.res object into NAME_3 and w_sum GDPPC respectively.\nNext, the code chunk below will be used to append w_sum GDPPC values onto hunan sf data.frame by using left_join() of dplyr package.\n\n\nShow the code\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\n\nTo compare the values of lag GDPPC and Spatial window average, kable() of Knitr package is used to prepare a table using the code chunk below.\n\n\nShow the code\nhunan %&gt;%\n  dplyr::select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n147903\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n134605\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n131165\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n135423\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n134635\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n133381\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n238106\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n297281\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n344573\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n268982\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n106510\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n136141\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n126832\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n103303\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n151645\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n196097\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n207589\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n143926\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n178242\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n175235\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n138765\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n155699\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n160150\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n117145\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n113730\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n89002\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n63532\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n112988\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n59330\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n35930\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n154439\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n145795\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n112587\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n107515\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n162322\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n145517\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n61826\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n79925\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n82589\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n83352\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n119897\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n116749\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n81510\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n63530\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n151986\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n174193\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n210294\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n97361\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n96472\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n108936\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n79819\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n108871\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n48531\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n128935\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n84305\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n188958\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n171869\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n148402\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n83813\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n104663\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n155742\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n73336\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n112705\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n78084\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n58257\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n279414\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n237883\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n219273\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n83354\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n90124\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n168462\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n165714\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n165668\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n311663\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n126892\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n229971\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n165876\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n271045\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n117731\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n256646\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n126603\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n127467\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n295688\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n336838\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n267729\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n431516\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n85667\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n51028\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\nLastly, qtm() of tmap package is used to plot the lag_sum GDPPC and w_sum_gdppc maps next to each other for quick comparison.\n\n\nShow the code\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nNote: For more effective comparison, it is advisable to use the core tmap mapping functions."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "href": "Hands-on Exercise/Hands-on_Ex04/Hands-on_Ex04.html#references",
    "title": "8 Spatial Weights and Applications",
    "section": "8.10 References",
    "text": "8.10 References\n\nCreating Neighbours using sf objects"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#introduction-objectives",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#introduction-objectives",
    "title": "Take-home Ex01",
    "section": "1.0 Introduction & Objectives",
    "text": "1.0 Introduction & Objectives\nIn this Take-Home Exercise 1, we will be discovering factors affecting road traffic accidents in the Bangkok Metropolitan Region BMR by employing both spatial and spatio-temporal point patterns analysis methods.\nThe specific objectives of this take-home exercise are as follows:\n\nTo visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\nTo conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\nTo conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n\n1.1 The Study Area\n\nThailand has four administrative levels:\n\nLevel 0 - Country - Whole of Thailand\nLevel 1 - Provinces (Changwat) - Total: 76 provinces, with Bangkok as special administrative area.\nLevel 2 - District (Amphoe)\nLevel 3 - Sub-district (Tambon)\nLevel 4 - Village (Muban)\n\nIn this exercise we will focus our analysis on the study area called the Bangkok Metropolitan Region (BMR), which consists of Bangkok and its five adjacent provinces, namely Nakhon Pathom, Pathum Thani, Nonthaburi, Samut Prakan, and Samut Sakhon.\nTo confirm the EPSG code for the study area, we can check it on epsg.io. Enter “Thailand” and we will yield several results under Projected CRS:\n\nIndian 1954 / UTM zone 46N - EPSG 23946 with transformation: 1153\nIndian 1954 / UTM zone 47N - EPSG 23947 with transformation 1153\nIndian 1954 / UTM zone 48N - EPSG 23948 with transformation 1153\nIndian 1975 / UTM zone 47N - EPSG 24047 with transformation 1812\nIndian 1975 / UTM zone 48N - EPSG 24048 with transformation 1812\nWGS 84 / UTM zone 47N - EPSG 32647\nWGS 84 / UTM zone 48N - EPSG 32648\nWGS 84 / PDC Mercator - EPSG 3832\n\n\nWe will be using Geodetic CRS WGS 84 as it is a global standard. It leaves us with the last three options. As will click into each result, we will observe that WGS 84 / PDC Mercator covers wide area of use, and perhaps, more suitable for seafare. Whereas for WGS 84 / UTM zone 47N and WGS 84 / UTM zone 48N, the area are more precise, defined by the Easting and Northing.\n\n\n\nWGS 84 / UTM zone 47N - EPSG 32647\nWGS 84 / UTM zone 48N - EPSG 32648\n\n\n\n\nArea of use: Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.\nArea of use: Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.\n\n\n\n\n\n\n\n\n\nProjected CRS\n\n\n\nConsidering Bangkok’s Coordinate (13.7563° N, 100.5018° E), we will use WGS 84 / UTM zone 47N - EPSG 32647, as its Northing of 13.7563° falls between the Equator and 84°N, and its Easting of 100.5018° falls between 96°E and 102°E, which are both in the area of use as indicated in the table above."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html",
    "title": "In-class Ex 04",
    "section": "",
    "text": "Short cut to In-class Ex 4"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#what-are-spatial-weights-wij",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#what-are-spatial-weights-wij",
    "title": "In-class Ex 04",
    "section": "1.0 What are Spatial Weights (wij)",
    "text": "1.0 What are Spatial Weights (wij)\nIt is a way to define spatial neighbourhood."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#contiguity-neighbours",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#contiguity-neighbours",
    "title": "In-class Ex 04",
    "section": "2.0 Contiguity Neighbours",
    "text": "2.0 Contiguity Neighbours\n\nRefer to Hands on Ex 4 - 8.5.3.1 and 8.5.3.2:\n\n\n\n\n\n\n\nQueen’s\nRook’s (differences in blue circle)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#defining-spatial-weights",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#defining-spatial-weights",
    "title": "In-class Ex 04",
    "section": "2.2 Defining Spatial Weights",
    "text": "2.2 Defining Spatial Weights\n\nA better measure of spatial weights will be using the third method, a general spatial distance weight matrices, where no boundaries were set (like distance criterion)."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#weights-matrix-distance-based-neighbours",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#weights-matrix-distance-based-neighbours",
    "title": "In-class Ex 04",
    "section": "2.3 Weights Matrix: Distance-based neighbours",
    "text": "2.3 Weights Matrix: Distance-based neighbours\nThe weight matrix below is constructed using Queen’s method.\n\nQuiz: With reference to the figure above, list down the neighbour(s) of area 1202 using Rook case.\nNeighbour of 1202 using Rook’s case:\n\n1201\n1302\n901\n1000\n1102\n\n\nWeights Matrix: Distance-based neighbours\n\nAnswer: (all distance, d &gt;650, will become 0 in value)\n\n\n\n\nA\nB\nC\nD\nE\n\n\n\n\nA\n0\n353\n516\n641\n0\n\n\nB\n353\n0\n357\n0\n0\n\n\nC\n516\n357\n0\n0\n0\n\n\nD\n641\n0\n0\n0\n263\n\n\nE\n0\n0\n0\n263\n0\n\n\n\n\n\nRow standardisation\nIn practice, row-standardised weights instead of spatial weights will be used.\n\n\n\nSpatially Lagged Variables\nSpatial lag with row-standardised weights.\n\n\n\n\n\n\n\nGDPCC (left) vs lag GDPCC (right)\n\n\n\n\nLag GDPCC smooth out the value, and help us identify the difference of the lighter western region and the darker regions to the north-east.\nIdeally, we want to know which areas are with values that are statistically significant. Having 2 neighbours vs 6 neighbours? Next lesson!\n\n\n\n\n\nSpatial window sum\nThe spatial window sum uses and includes the diagonal element. (Include self = lag_sum)\n\n\n\nComparing the visualisation to actual network\nSource: Analysis of Coupling Coordination Relationship between the Accessibility and Economic Linkage of a High-Speed Railway Network Case Study in Hunan, China\n\n\n\n\n\n\n\nPolygon Centroid Distance vs Network Distance\n\n\n\n\nCentroid distance vs Network distance (e.g. shortest path)\nIt may take longer time to compute all possible shortest path.\nCentroid distance generally simpler to calculate and it is quite similar to Network distance after aggregation.\nHowever, there are many cases that network distance is a better measure.\n\ni.e. Rail network."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#lagged-contiguity",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#lagged-contiguity",
    "title": "In-class Ex 04",
    "section": "2.1 Lagged Contiguity",
    "text": "2.1 Lagged Contiguity"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#setting-up-the-environment",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#setting-up-the-environment",
    "title": "In-class Ex 04",
    "section": "3.0 Setting up the environment",
    "text": "3.0 Setting up the environment\nLoading required packages using the code chunk below:\n\n\nShow the code\npacman::p_load(tidyverse,\n               sf,\n               ggstatsplot,\n               tmap,\n               knitr,\n               GWmodel)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#preparing-the-data",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#preparing-the-data",
    "title": "In-class Ex 04",
    "section": "3.1 Preparing the Data",
    "text": "3.1 Preparing the Data\n\n\nShow the code\nhunan_sf &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\n\n\nGeometry Type\n\n\n\n\nUsually in polygon.\nIf there’s island apart from mainland, there might be cases of multi-polygon.\n\n\n\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n\n\n\n\nRelational Join\n\n\n\n\nWe need to final potential Unique Identifier to do the left_join().\nUsually we have to define the join field.\nFor example, we can use NAME_3 for hunan_sf and County for hunan2012 to do the relational join.\nWe need to make sure that the cells has the same values, including upper and lower case.\nThe case below, it is already tidied up and we know exactly what information/columns we need to sift out, by using select().\n\n\n\n\n\nShow the code\nhunan_sf &lt;- left_join(hunan_sf,hunan2012) %&gt;% \n  select(1:3,7,15,16,31,32)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#converting-to-spatialpolygondataframe",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#converting-to-spatialpolygondataframe",
    "title": "In-class Ex 04",
    "section": "Converting to SpatialPolygonDataFrame",
    "text": "Converting to SpatialPolygonDataFrame\nGWmodel is presently built around the older sp and\n\n\nShow the code\nhunan_sp &lt;- hunan_sf %&gt;% \n  as_Spatial()"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#gwss-with-adaptive-bandwidth",
    "href": "In-class Exercise/In-class_Ex04/In-class_Ex04.html#gwss-with-adaptive-bandwidth",
    "title": "In-class Ex 04",
    "section": "GWSS with adaptive bandwidth",
    "text": "GWSS with adaptive bandwidth\n\nDetermine adaptive bandwidth ( adaptive = TRUE )\nCross-validation:\n\n\nShow the code\nbw_CV &lt;-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n\n\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n\n\n\n\n\n\n\n\nResults\n\n\n\n\n62 ….. 22 are number of neighbours.\nstop when the figure (GDPPC) don’t change much.\n\n\n\nAIC\n\n\nShow the code\nbw_AIC &lt;-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\n\n\n\n\n\n\n\nResults\n\n\n\n\nAICc values in kilometers (?)\nboth CV and AIC provide same results.\n\n\n\n\n\nFixed Kernal ( adaptive = FALSE )\nCV:\n\n\nShow the code\nbw_CV &lt;-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\n\nAIC\n\n\nShow the code\nbw_AIC &lt;-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\n\n\n\n\n\n\n\nResults Intepretation\n\n\n\n\nFixed distance (kernel) produce vastly different results.\nDistance will provide more variability.\nSame location but different methods, bandwidth of neighbours differs.\n\nWe need to test different numbers of neighbours. In this case, use adaptive as the results for both CV and AIC are similar.\n\n\n\n\n\n\nShow the code\ngwstat &lt;- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n\n\n\n\n\n\n\n\ngwss()\n\n\n\n\nremember to ensure the arguments for kernel, adaptive, longlat, must be the same as the chosen method, CV or AIC.\nthe resulting object is gwss class.\nWe can access the data table by clicking into the document icon to the right of the “data” attribute.\n\n\n\n\nAccessing gwstat:\n\nAccessing SDF data table:\n\nThis data table is calculated using 22 neighbour (based on AIC, adaptive kernel)\nExtracting the data table as df:\n\n\nShow the code\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\n\ncbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\n\nShow the code\nhunan_gstat &lt;- cbind(hunan_sf, gwstat_df)\n\n\n\n\n\n\n\n\ncbind()\n\n\n\n\ncannot work if we do sorting prior to this step.\nworks without unique identifier, given that the sequence of the data did not change.\n\n\n\n\n\nVisualising geographically weighted summary statistics\nThe Geographically Weighted Mean\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5 ) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 0.9,\n            legend.text.size = 0.5,\n            legend.height = 1.0,\n            legend.width = 1.0,\n            frame = TRUE)\n\n\n\n\n\n\n\n\n\nBusiness Quesion: Is there any relationship between GDP per capita (GDPPC) and Gross Industry Output (GIO)?\n\n\nVisualising Local Correlation"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-environment",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#setting-up-the-environment",
    "title": "Take-home Ex01",
    "section": "2.0 Setting up the Environment",
    "text": "2.0 Setting up the Environment\n\n2.1 Installing and loading the required libraries\nThe code chunk below checks if the packages are installed. If the packages are not yet installed, it will proceed to install and subsequently load the libraries. If the packages are already installed, it will proceed to launch into the R environment.\n\npacman::p_load(leaflet,\n               lubridate,\n               raster,\n               sf,\n               spatstat,\n               spNetwork,\n               tidyverse,\n               tmap)\n\n\n\n\n\n\n\n\nPackages\nDescription\n\n\n\n\nleaflet\nFor interactive map\n\n\nlubridate\nFunctions to work with date-times and time-spans\n\n\nraster\nReading, writing, manipulating, analyzing and modeling of spatial data. \n\n\nsf\nFor importing, managing, ad handling geospatial data\n\n\nspatstat\nFor Spatial Point Pattern Analysis (SPPA)\n\n\nspNetwork\nPerform spatial analysis on network\n\n\ntidyverse\nFor aspatial data wrangling\n\n\ntmap\nFor thematic mapping\n\n\n\n\n\n2.2 Setting Seeds to Ensure Reproducibility\nThe set. seed() function is used to set a Random seed which Pseudorandom number generators use when generating “random” numbers. By using this function, we ensure that the randomly generated numbers remain the same when the code are reproduced.\n\nset.seed(12345)"
  },
  {
    "objectID": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#importing-and-wrangling-the-data",
    "href": "Take-home Exercise/Take-home_Ex01/Take-home_Ex01.html#importing-and-wrangling-the-data",
    "title": "Take-home Ex01",
    "section": "3.0 Importing and Wrangling the Data",
    "text": "3.0 Importing and Wrangling the Data\n\n3.1 Importing Aspatial Data and Converting it into Spatial Data\nImporting the data without filtering:\n\nacc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n\nImporting the data, and conducting necessary filter, conversion to sf, transformation of CRS, and get the days component of the incident_datetime:\n\nacc_sf &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%   \n  filter(!is.na(longitude) &longitude != \"\",!is.na(latitude) & latitude != \"\") %&gt;%    \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),            crs = 4326) %&gt;%    \n  st_transform(crs = 32647) %&gt;% \n  mutate(Day = day(incident_datetime)) %&gt;% \n  mutate(Month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %&gt;% \n  mutate(Year = year(incident_datetime)) %&gt;% \n  mutate(DaysOfWeek = wday(incident_datetime,\n                           week_start = 1)) %&gt;% \n  dplyr::select(c(2,5,8:21))\n\n\n\n\n\n\n\nThailand Road Accident [ 2019-2022]\n\n\n\n\nread_csv() of readr package to import the data in .csv format as tibble dataframe.\n\nBefore proceeding to filter the data, we observe that there is a total of 81,735 observations.\n\n-   ![](images/clipboard-3840017767.png)\n\ndplyr::filter() to filter out rows that has “na” or is empty in value.\n\nAfter filtering “na” and empty values, we are left with 81,376 observations. This means that we have lost about 0.44% of the data. This will not affect our analysis as 0.44% a small proportion of the total number of observations. (Rule of Thumb, not &gt;5% lost)\n\n\nst_as_sf(coords = c(“longitude”, “latitude”), crs = 4326) combines and longitude and latitude columns into geometry column.\n\nbefore applying st_as_sf() function, we observe that the latitude and longitude are in decimal degrees, therefore, we assume it is WGS84 datum, with the EPSG code of 4326.\n\nNotice that the number of variables changed from 18 to 17. This is because st_as_sf() function has combined the longitude and latitude columns in the original dataset into one column name geometry. The columns named longitude and latitude are no longer found in the data.\n\n\nst_transform() to change the Coordinate Reference System (CRS) to the correct EPSG code of 32647.\nlubridate() is used to wrangle the incident_datetime, which is in datetime format of POSIXct.\n\nlubridate::month(): label = TRUE -&gt; change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.\nThe columns of Day, Month, Year, and DaysOfWeek are created.\n\n\nUse dplyr::select() to select the relevant columns to retain.\nThe output R object is called acc_sf and it is a sf data frame.\n\n\n\nAfter the wrangling the data, we will save them for future use, using the write_rds() of readr package. The step will help us save time of re-running the codes for importing and wrangling the raw data.\n\nwrite_rds(acc_sf, \"data/rds/acc_sf.rds\")\n\nWe can import the data using the read_rds() of the readr package:\n\nacc_sf &lt;- read_rds(\"data/rds/acc_sf.rds\")\n\n\n\n3.2 Importing Spatial Data\n\n\n3.2.1 Importing the Administraive Boundaries\nImporting the Thailand - Subnational Administrative Boundaries using st_read() of sf package. Since we are only interested in the Bangkok Metropolitan Region (BMR) as our study area, we will extract only the six provinces by using filter(). We will use the layer name “tha_admbnda_adm1_rtsd_20220121” as ADM1 refers to the province level boundaries. Note: Thailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries.\n\nsab_P &lt;- st_read(dsn = \"data/rawdata\",\n               layer = \"tha_admbnda_adm1_rtsd_20220121\") %&gt;% filter(ADM1_EN %in% c(\"Bangkok\",\"Nakhon Pathom\", \"Pathum Thani\", \"Nonthaburi\", \"Samut Prakan\", \"Samut Sakhon\"))\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nWe will use the following code chunk to take a quick look at selected BMR boundaries.\n\nplot(st_geometry(sab_P))\n\n\n\n\n\n\n\n\nSince we are not very familiar with the Thailand map, we may want to double check the correctness by including the label with name of the six province and the coordinates.\n\n# setting the colors for each Province\ncolors = c(\"Bangkok\" = \"#FF0000\",\n           \"Nakhon Pathom\" = \"#55FF00\",\n           \"Pathum Thani\" = \"#FFAA00\",\n           \"Nonthaburi\" = \"#0000FF\",\n           \"Samut Prakan\" = \"#7F00FF\",\n           \"Samut Sakhon\" = \"#00FFFF\")\n\nggplot(data = sab_P) +\n  geom_sf(aes(fill = ADM1_EN)) + \n  scale_fill_manual(values = colors, \n                    name = \"Province\") +\n  geom_text(aes(label = ADM1_EN,\n                geometry = geometry), \n            stat = \"sf_coordinates\", \n            size = 3)\n\n\n\n\n\n\n\n\nIf we wish to go to the district-level granularity, we may choose to import the ADM2 layer instead.\n\nsab_C &lt;- st_read(dsn = \"data/rawdata\",\n               layer = \"tha_admbnda_adm2_rtsd_20220121\") %&gt;% filter(ADM1_EN %in% c(\"Bangkok\",\"Nakhon Pathom\", \"Pathum Thani\", \"Nonthaburi\", \"Samut Prakan\", \"Samut Sakhon\"))\n\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nSimilarly, we will use ggplot2() to visualise the using the Level 2 - District (Amphoe) boundaries.\n\nggplot(data = sab_C) +\n  geom_sf(aes(fill = ADM1_EN)) +\n  scale_fill_manual(values = colors, \n                    name = \"Province\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoundaries\n\n\n\n\nFor creating the boundaries for the study area, ADM1_EN would be sufficient.\nHowever, we may want to have ADM2_EN for detailed study for each districts within the BMR.\n\n\n\nThe code chunk below re-project the boundaries into the correct CRS.\n\nsab_P &lt;- sab_P %&gt;% \n  st_transform(crs = 32647)\n\nsab_C &lt;- sab_C %&gt;% \n  st_transform(crs = 32647)\n\n\n\n3.2.2 Creating owin object for BMR boundaries\n\nbmr_owin &lt;- as.owin(sab_P)\n\n\nplot(bmr_owin)\n\n\n\n\n\n\n\n\n\nsummary(bmr_owin)\n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\n\n\n\n\n\n\nWIndow Area / Size of the Area\n\n\n\n\nWindow Area = 7,668,990,000 square units (m2)\n\nconverting to km2 by dividing it by 1,000,000.\nWindow Area of BMR = ~7,668.99 km2\n\n\n\n\n\n\n3.2.3 Importing the Road Networks\nIn this code chunk, we will import the Thailand Roads (OpenStreetMap Export) downloaded from HDX.\n\nroads &lt;- st_read(dsn =\"data/rawdata\",\n                 layer = \"hotosm_tha_roads_lines_shp\") \n\nReading layer `hotosm_tha_roads_lines_shp' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex01\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 2792590 features and 14 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 97.34457 ymin: 5.643645 xmax: 105.6528 ymax: 20.47168\nCRS:           NA\n\n\nAssigning EPSG code 4326 as the geometry shows longlat decimal degree between (-180 to 180). Next, we use st_transform() to re-project from Geographic CRS of WGS84 to Projected CRS of UTM Zone 47N.\n\nroads &lt;- roads %&gt;% \n  st_set_crs(4326) %&gt;% \n  st_transform(crs = 32647)\n\n\nroads_bmr &lt;- st_intersection(sab_P,roads)\n\n\n\n3.2.4 Combining the bmr_owin with the data points\nConverting the acc_sf and roads data into ppp.\n\nacc_ppp = as.ppp(acc_sf)\n\nExtracting accident events located within BMR:\n\naccBMR_ppp = acc_ppp[bmr_owin]\n\n\nsummary(accBMR_ppp)\n\nMarked planar point pattern:  12989 points\nAverage intensity 1.693704e-06 points per square unit\n\n*Pattern contains duplicated points*\n\nCoordinates are given to 10 decimal places\n\nmarks are of type 'double'\nSummary:\n                      Min.                    1st Qu. \n\"2019-01-01 02:25:00.0000\" \"2020-01-27 06:00:00.0000\" \n                    Median                       Mean \n\"2021-01-26 18:05:00.0000\" \"2021-01-28 09:05:17.6734\" \n                   3rd Qu.                       Max. \n\"2022-02-09 08:00:00.0000\" \"2022-12-31 23:11:00.0000\" \n\nWindow: polygonal boundary\nsingle connected closed polygon with 13779 vertices\nenclosing rectangle: [587893.5, 712440.5] x [1484413.7, 1579076.3] units\n                     (124500 x 94660 units)\nWindow area = 7668990000 square units\nFraction of frame area: 0.65\n\n\nHandling duplicated points.\n\nany(duplicated(accBMR_ppp))\n\n[1] TRUE\n\n\nTo count the number of co-incidence point, we will use the multiplicity() function as shown in the code chunk below.\n\nmultiplicity(accBMR_ppp)\n\n    1     2     3     4     5     6     7     8     9    10    11    12    13 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   14    15    16    17    18    19    20    21    22    23    24    25    26 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   27    28    29    30    31    32    33    34    35    36    37    38    39 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   40    41    42    43    44    45    46    47    48    49    50    51    52 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   53    54    55    56    57    58    59    60    61    62    63    64    65 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   66    67    68    69    70    71    72    73    74    75    76    77    78 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   79    80    81    82    83    84    85    86    87    88    89    90    91 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n   92    93    94    95    96    97    98    99   100   101   102   103   104 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  105   106   107   108   109   110   111   112   113   114   115   116   117 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  118   119   120   121   122   123   124   125   126   127   128   129   130 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  131   132   133   134   135   136   137   138   139   140   141   142   143 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  144   145   146   147   148   149   150   151   152   153   154   155   156 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  157   158   159   160   161   162   163   164   165   166   167   168   169 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  170   171   172   173   174   175   176   177   178   179   180   181   182 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  183   184   185   186   187   188   189   190   191   192   193   194   195 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  196   197   198   199   200   201   202   203   204   205   206   207   208 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  209   210   211   212   213   214   215   216   217   218   219   220   221 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  222   223   224   225   226   227   228   229   230   231   232   233   234 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  235   236   237   238   239   240   241   242   243   244   245   246   247 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  248   249   250   251   252   253   254   255   256   257   258   259   260 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  261   262   263   264   265   266   267   268   269   270   271   272   273 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  274   275   276   277   278   279   280   281   282   283   284   285   286 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  287   288   289   290   291   292   293   294   295   296   297   298   299 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  300   301   302   303   304   305   306   307   308   309   310   311   312 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  313   314   315   316   317   318   319   320   321   322   323   324   325 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  326   327   328   329   330   331   332   333   334   335   336   337   338 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  339   340   341   342   343   344   345   346   347   348   349   350   351 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  352   353   354   355   356   357   358   359   360   361   362   363   364 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  365   366   367   368   369   370   371   372   373   374   375   376   377 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  378   379   380   381   382   383   384   385   386   387   388   389   390 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  391   392   393   394   395   396   397   398   399   400   401   402   403 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  404   405   406   407   408   409   410   411   412   413   414   415   416 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  417   418   419   420   421   422   423   424   425   426   427   428   429 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  430   431   432   433   434   435   436   437   438   439   440   441   442 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  443   444   445   446   447   448   449   450   451   452   453   454   455 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  456   457   458   459   460   461   462   463   464   465   466   467   468 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  469   470   471   472   473   474   475   476   477   478   479   480   481 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  482   483   484   485   486   487   488   489   490   491   492   493   494 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  495   496   497   498   499   500   501   502   503   504   505   506   507 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  508   509   510   511   512   513   514   515   516   517   518   519   520 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  521   522   523   524   525   526   527   528   529   530   531   532   533 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  534   535   536   537   538   539   540   541   542   543   544   545   546 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  547   548   549   550   551   552   553   554   555   556   557   558   559 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  560   561   562   563   564   565   566   567   568   569   570   571   572 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  573   574   575   576   577   578   579   580   581   582   583   584   585 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  586   587   588   589   590   591   592   593   594   595   596   597   598 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  599   600   601   602   603   604   605   606   607   608   609   610   611 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  612   613   614   615   616   617   618   619   620   621   622   623   624 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  625   626   627   628   629   630   631   632   633   634   635   636   637 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  638   639   640   641   642   643   644   645   646   647   648   649   650 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  651   652   653   654   655   656   657   658   659   660   661   662   663 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  664   665   666   667   668   669   670   671   672   673   674   675   676 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  677   678   679   680   681   682   683   684   685   686   687   688   689 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  690   691   692   693   694   695   696   697   698   699   700   701   702 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  703   704   705   706   707   708   709   710   711   712   713   714   715 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  716   717   718   719   720   721   722   723   724   725   726   727   728 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  729   730   731   732   733   734   735   736   737   738   739   740   741 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  742   743   744   745   746   747   748   749   750   751   752   753   754 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  755   756   757   758   759   760   761   762   763   764   765   766   767 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  768   769   770   771   772   773   774   775   776   777   778   779   780 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  781   782   783   784   785   786   787   788   789   790   791   792   793 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  794   795   796   797   798   799   800   801   802   803   804   805   806 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  807   808   809   810   811   812   813   814   815   816   817   818   819 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  820   821   822   823   824   825   826   827   828   829   830   831   832 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  833   834   835   836   837   838   839   840   841   842   843   844   845 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  846   847   848   849   850   851   852   853   854   855   856   857   858 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  859   860   861   862   863   864   865   866   867   868   869   870   871 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  872   873   874   875   876   877   878   879   880   881   882   883   884 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  885   886   887   888   889   890   891   892   893   894   895   896   897 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  898   899   900   901   902   903   904   905   906   907   908   909   910 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  911   912   913   914   915   916   917   918   919   920   921   922   923 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  924   925   926   927   928   929   930   931   932   933   934   935   936 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  937   938   939   940   941   942   943   944   945   946   947   948   949 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  950   951   952   953   954   955   956   957   958   959   960   961   962 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  963   964   965   966   967   968   969   970   971   972   973   974   975 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  976   977   978   979   980   981   982   983   984   985   986   987   988 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n  989   990   991   992   993   994   995   996   997   998   999  1000  1001 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1002  1003  1004  1005  1006  1007  1008  1009  1010  1011  1012  1013  1014 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1015  1016  1017  1018  1019  1020  1021  1022  1023  1024  1025  1026  1027 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1028  1029  1030  1031  1032  1033  1034  1035  1036  1037  1038  1039  1040 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1041  1042  1043  1044  1045  1046  1047  1048  1049  1050  1051  1052  1053 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1054  1055  1056  1057  1058  1059  1060  1061  1062  1063  1064  1065  1066 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1067  1068  1069  1070  1071  1072  1073  1074  1075  1076  1077  1078  1079 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1080  1081  1082  1083  1084  1085  1086  1087  1088  1089  1090  1091  1092 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1093  1094  1095  1096  1097  1098  1099  1100  1101  1102  1103  1104  1105 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1106  1107  1108  1109  1110  1111  1112  1113  1114  1115  1116  1117  1118 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1119  1120  1121  1122  1123  1124  1125  1126  1127  1128  1129  1130  1131 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1132  1133  1134  1135  1136  1137  1138  1139  1140  1141  1142  1143  1144 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1145  1146  1147  1148  1149  1150  1151  1152  1153  1154  1155  1156  1157 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1158  1159  1160  1161  1162  1163  1164  1165  1166  1167  1168  1169  1170 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1171  1172  1173  1174  1175  1176  1177  1178  1179  1180  1181  1182  1183 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1184  1185  1186  1187  1188  1189  1190  1191  1192  1193  1194  1195  1196 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1197  1198  1199  1200  1201  1202  1203  1204  1205  1206  1207  1208  1209 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1210  1211  1212  1213  1214  1215  1216  1217  1218  1219  1220  1221  1222 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1223  1224  1225  1226  1227  1228  1229  1230  1231  1232  1233  1234  1235 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1236  1237  1238  1239  1240  1241  1242  1243  1244  1245  1246  1247  1248 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1249  1250  1251  1252  1253  1254  1255  1256  1257  1258  1259  1260  1261 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1262  1263  1264  1265  1266  1267  1268  1269  1270  1271  1272  1273  1274 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1275  1276  1277  1278  1279  1280  1281  1282  1283  1284  1285  1286  1287 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1288  1289  1290  1291  1292  1293  1294  1295  1296  1297  1298  1299  1300 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1301  1302  1303  1304  1305  1306  1307  1308  1309  1310  1311  1312  1313 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1314  1315  1316  1317  1318  1319  1320  1321  1322  1323  1324  1325  1326 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1327  1328  1329  1330  1331  1332  1333  1334  1335  1336  1337  1338  1339 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1340  1341  1342  1343  1344  1345  1346  1347  1348  1349  1350  1351  1352 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1353  1354  1355  1356  1357  1358  1359  1360  1361  1362  1363  1364  1365 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1366  1367  1368  1369  1370  1371  1372  1373  1374  1375  1376  1377  1378 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1379  1380  1381  1382  1383  1384  1385  1386  1387  1388  1389  1390  1391 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1392  1393  1394  1395  1396  1397  1398  1399  1400  1401  1402  1403  1404 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1405  1406  1407  1408  1409  1410  1411  1412  1413  1414  1415  1416  1417 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1418  1419  1420  1421  1422  1423  1424  1425  1426  1427  1428  1429  1430 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1431  1432  1433  1434  1435  1436  1437  1438  1439  1440  1441  1442  1443 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1444  1445  1446  1447  1448  1449  1450  1451  1452  1453  1454  1455  1456 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1457  1458  1459  1460  1461  1462  1463  1464  1465  1466  1467  1468  1469 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1470  1471  1472  1473  1474  1475  1476  1477  1478  1479  1480  1481  1482 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1483  1484  1485  1486  1487  1488  1489  1490  1491  1492  1493  1494  1495 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1496  1497  1498  1499  1500  1501  1502  1503  1504  1505  1506  1507  1508 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1509  1510  1511  1512  1513  1514  1515  1516  1517  1518  1519  1520  1521 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1522  1523  1524  1525  1526  1527  1528  1529  1530  1531  1532  1533  1534 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1535  1536  1537  1538  1539  1540  1541  1542  1543  1544  1545  1546  1547 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1548  1549  1550  1551  1552  1553  1554  1555  1556  1557  1558  1559  1560 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1561  1562  1563  1564  1565  1566  1567  1568  1569  1570  1571  1572  1573 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1574  1575  1576  1577  1578  1579  1580  1581  1582  1583  1584  1585  1586 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1587  1588  1589  1590  1591  1592  1593  1594  1595  1596  1597  1598  1599 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1600  1601  1602  1603  1604  1605  1606  1607  1608  1609  1610  1611  1612 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1613  1614  1615  1616  1617  1618  1619  1620  1621  1622  1623  1624  1625 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1626  1627  1628  1629  1630  1631  1632  1633  1634  1635  1636  1637  1638 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1639  1640  1641  1642  1643  1644  1645  1646  1647  1648  1649  1650  1651 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1652  1653  1654  1655  1656  1657  1658  1659  1660  1661  1662  1663  1664 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1665  1666  1667  1668  1669  1670  1671  1672  1673  1674  1675  1676  1677 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1678  1679  1680  1681  1682  1683  1684  1685  1686  1687  1688  1689  1690 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1691  1692  1693  1694  1695  1696  1697  1698  1699  1700  1701  1702  1703 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1704  1705  1706  1707  1708  1709  1710  1711  1712  1713  1714  1715  1716 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1717  1718  1719  1720  1721  1722  1723  1724  1725  1726  1727  1728  1729 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1730  1731  1732  1733  1734  1735  1736  1737  1738  1739  1740  1741  1742 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1743  1744  1745  1746  1747  1748  1749  1750  1751  1752  1753  1754  1755 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1756  1757  1758  1759  1760  1761  1762  1763  1764  1765  1766  1767  1768 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1769  1770  1771  1772  1773  1774  1775  1776  1777  1778  1779  1780  1781 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1782  1783  1784  1785  1786  1787  1788  1789  1790  1791  1792  1793  1794 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1795  1796  1797  1798  1799  1800  1801  1802  1803  1804  1805  1806  1807 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1808  1809  1810  1811  1812  1813  1814  1815  1816  1817  1818  1819  1820 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1821  1822  1823  1824  1825  1826  1827  1828  1829  1830  1831  1832  1833 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1834  1835  1836  1837  1838  1839  1840  1841  1842  1843  1844  1845  1846 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1847  1848  1849  1850  1851  1852  1853  1854  1855  1856  1857  1858  1859 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1860  1861  1862  1863  1864  1865  1866  1867  1868  1869  1870  1871  1872 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1873  1874  1875  1876  1877  1878  1879  1880  1881  1882  1883  1884  1885 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1886  1887  1888  1889  1890  1891  1892  1893  1894  1895  1896  1897  1898 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1899  1900  1901  1902  1903  1904  1905  1906  1907  1908  1909  1910  1911 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1912  1913  1914  1915  1916  1917  1918  1919  1920  1921  1922  1923  1924 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1925  1926  1927  1928  1929  1930  1931  1932  1933  1934  1935  1936  1937 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1938  1939  1940  1941  1942  1943  1944  1945  1946  1947  1948  1949  1950 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1951  1952  1953  1954  1955  1956  1957  1958  1959  1960  1961  1962  1963 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1964  1965  1966  1967  1968  1969  1970  1971  1972  1973  1974  1975  1976 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1977  1978  1979  1980  1981  1982  1983  1984  1985  1986  1987  1988  1989 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 1990  1991  1992  1993  1994  1995  1996  1997  1998  1999  2000  2001  2002 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2003  2004  2005  2006  2007  2008  2009  2010  2011  2012  2013  2014  2015 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2016  2017  2018  2019  2020  2021  2022  2023  2024  2025  2026  2027  2028 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2029  2030  2031  2032  2033  2034  2035  2036  2037  2038  2039  2040  2041 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2042  2043  2044  2045  2046  2047  2048  2049  2050  2051  2052  2053  2054 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2055  2056  2057  2058  2059  2060  2061  2062  2063  2064  2065  2066  2067 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2068  2069  2070  2071  2072  2073  2074  2075  2076  2077  2078  2079  2080 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2081  2082  2083  2084  2085  2086  2087  2088  2089  2090  2091  2092  2093 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2094  2095  2096  2097  2098  2099  2100  2101  2102  2103  2104  2105  2106 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2107  2108  2109  2110  2111  2112  2113  2114  2115  2116  2117  2118  2119 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2120  2121  2122  2123  2124  2125  2126  2127  2128  2129  2130  2131  2132 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2133  2134  2135  2136  2137  2138  2139  2140  2141  2142  2143  2144  2145 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2146  2147  2148  2149  2150  2151  2152  2153  2154  2155  2156  2157  2158 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2159  2160  2161  2162  2163  2164  2165  2166  2167  2168  2169  2170  2171 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2172  2173  2174  2175  2176  2177  2178  2179  2180  2181  2182  2183  2184 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2185  2186  2187  2188  2189  2190  2191  2192  2193  2194  2195  2196  2197 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2198  2199  2200  2201  2202  2203  2204  2205  2206  2207  2208  2209  2210 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2211  2212  2213  2214  2215  2216  2217  2218  2219  2220  2221  2222  2223 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2224  2225  2226  2227  2228  2229  2230  2231  2232  2233  2234  2235  2236 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2237  2238  2239  2240  2241  2242  2243  2244  2245  2246  2247  2248  2249 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2250  2251  2252  2253  2254  2255  2256  2257  2258  2259  2260  2261  2262 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2263  2264  2265  2266  2267  2268  2269  2270  2271  2272  2273  2274  2275 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2276  2277  2278  2279  2280  2281  2282  2283  2284  2285  2286  2287  2288 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2289  2290  2291  2292  2293  2294  2295  2296  2297  2298  2299  2300  2301 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2302  2303  2304  2305  2306  2307  2308  2309  2310  2311  2312  2313  2314 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2315  2316  2317  2318  2319  2320  2321  2322  2323  2324  2325  2326  2327 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2328  2329  2330  2331  2332  2333  2334  2335  2336  2337  2338  2339  2340 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2341  2342  2343  2344  2345  2346  2347  2348  2349  2350  2351  2352  2353 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2354  2355  2356  2357  2358  2359  2360  2361  2362  2363  2364  2365  2366 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2367  2368  2369  2370  2371  2372  2373  2374  2375  2376  2377  2378  2379 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2380  2381  2382  2383  2384  2385  2386  2387  2388  2389  2390  2391  2392 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2393  2394  2395  2396  2397  2398  2399  2400  2401  2402  2403  2404  2405 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2406  2407  2408  2409  2410  2411  2412  2413  2414  2415  2416  2417  2418 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2419  2420  2421  2422  2423  2424  2425  2426  2427  2428  2429  2430  2431 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2432  2433  2434  2435  2436  2437  2438  2439  2440  2441  2442  2443  2444 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2445  2446  2447  2448  2449  2450  2451  2452  2453  2454  2455  2456  2457 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2458  2459  2460  2461  2462  2463  2464  2465  2466  2467  2468  2469  2470 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2471  2472  2473  2474  2475  2476  2477  2478  2479  2480  2481  2482  2483 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2484  2485  2486  2487  2488  2489  2490  2491  2492  2493  2494  2495  2496 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2497  2498  2499  2500  2501  2502  2503  2504  2505  2506  2507  2508  2509 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2510  2511  2512  2513  2514  2515  2516  2517  2518  2519  2520  2521  2522 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2523  2524  2525  2526  2527  2528  2529  2530  2531  2532  2533  2534  2535 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2536  2537  2538  2539  2540  2541  2542  2543  2544  2545  2546  2547  2548 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2549  2550  2551  2552  2553  2554  2555  2556  2557  2558  2559  2560  2561 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2562  2563  2564  2565  2566  2567  2568  2569  2570  2571  2572  2573  2574 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2575  2576  2577  2578  2579  2580  2581  2582  2583  2584  2585  2586  2587 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2588  2589  2590  2591  2592  2593  2594  2595  2596  2597  2598  2599  2600 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2601  2602  2603  2604  2605  2606  2607  2608  2609  2610  2611  2612  2613 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2614  2615  2616  2617  2618  2619  2620  2621  2622  2623  2624  2625  2626 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2627  2628  2629  2630  2631  2632  2633  2634  2635  2636  2637  2638  2639 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2640  2641  2642  2643  2644  2645  2646  2647  2648  2649  2650  2651  2652 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2653  2654  2655  2656  2657  2658  2659  2660  2661  2662  2663  2664  2665 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2666  2667  2668  2669  2670  2671  2672  2673  2674  2675  2676  2677  2678 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2679  2680  2681  2682  2683  2684  2685  2686  2687  2688  2689  2690  2691 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2692  2693  2694  2695  2696  2697  2698  2699  2700  2701  2702  2703  2704 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2705  2706  2707  2708  2709  2710  2711  2712  2713  2714  2715  2716  2717 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2718  2719  2720  2721  2722  2723  2724  2725  2726  2727  2728  2729  2730 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2731  2732  2733  2734  2735  2736  2737  2738  2739  2740  2741  2742  2743 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2744  2745  2746  2747  2748  2749  2750  2751  2752  2753  2754  2755  2756 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2757  2758  2759  2760  2761  2762  2763  2764  2765  2766  2767  2768  2769 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2770  2771  2772  2773  2774  2775  2776  2777  2778  2779  2780  2781  2782 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2783  2784  2785  2786  2787  2788  2789  2790  2791  2792  2793  2794  2795 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2796  2797  2798  2799  2800  2801  2802  2803  2804  2805  2806  2807  2808 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2809  2810  2811  2812  2813  2814  2815  2816  2817  2818  2819  2820  2821 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2822  2823  2824  2825  2826  2827  2828  2829  2830  2831  2832  2833  2834 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2835  2836  2837  2838  2839  2840  2841  2842  2843  2844  2845  2846  2847 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2848  2849  2850  2851  2852  2853  2854  2855  2856  2857  2858  2859  2860 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2861  2862  2863  2864  2865  2866  2867  2868  2869  2870  2871  2872  2873 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2874  2875  2876  2877  2878  2879  2880  2881  2882  2883  2884  2885  2886 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2887  2888  2889  2890  2891  2892  2893  2894  2895  2896  2897  2898  2899 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2900  2901  2902  2903  2904  2905  2906  2907  2908  2909  2910  2911  2912 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2913  2914  2915  2916  2917  2918  2919  2920  2921  2922  2923  2924  2925 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2926  2927  2928  2929  2930  2931  2932  2933  2934  2935  2936  2937  2938 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2939  2940  2941  2942  2943  2944  2945  2946  2947  2948  2949  2950  2951 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2952  2953  2954  2955  2956  2957  2958  2959  2960  2961  2962  2963  2964 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2965  2966  2967  2968  2969  2970  2971  2972  2973  2974  2975  2976  2977 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2978  2979  2980  2981  2982  2983  2984  2985  2986  2987  2988  2989  2990 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 2991  2992  2993  2994  2995  2996  2997  2998  2999  3000  3001  3002  3003 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3004  3005  3006  3007  3008  3009  3010  3011  3012  3013  3014  3015  3016 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3017  3018  3019  3020  3021  3022  3023  3024  3025  3026  3027  3028  3029 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3030  3031  3032  3033  3034  3035  3036  3037  3038  3039  3040  3041  3042 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3043  3044  3045  3046  3047  3048  3049  3050  3051  3052  3053  3054  3055 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3056  3057  3058  3059  3060  3061  3062  3063  3064  3065  3066  3067  3068 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3069  3070  3071  3072  3073  3074  3075  3076  3077  3078  3079  3080  3081 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3082  3083  3084  3085  3086  3087  3088  3089  3090  3091  3092  3093  3094 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3095  3096  3097  3098  3099  3100  3101  3102  3103  3104  3105  3106  3107 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3108  3109  3110  3111  3112  3113  3114  3115  3116  3117  3118  3119  3120 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3121  3122  3123  3124  3125  3126  3127  3128  3129  3130  3131  3132  3133 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3134  3135  3136  3137  3138  3139  3140  3141  3142  3143  3144  3145  3146 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3147  3148  3149  3150  3151  3152  3153  3154  3155  3156  3157  3158  3159 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3160  3161  3162  3163  3164  3165  3166  3167  3168  3169  3170  3171  3172 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3173  3174  3175  3176  3177  3178  3179  3180  3181  3182  3183  3184  3185 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3186  3187  3188  3189  3190  3191  3192  3193  3194  3195  3196  3197  3198 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3199  3200  3201  3202  3203  3204  3205  3206  3207  3208  3209  3210  3211 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3212  3213  3214  3215  3216  3217  3218  3219  3220  3221  3222  3223  3224 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3225  3226  3227  3228  3229  3230  3231  3232  3233  3234  3235  3236  3237 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3238  3239  3240  3241  3242  3243  3244  3245  3246  3247  3248  3249  3250 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3251  3252  3253  3254  3255  3256  3257  3258  3259  3260  3261  3262  3263 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3264  3265  3266  3267  3268  3269  3270  3271  3272  3273  3274  3275  3276 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3277  3278  3279  3280  3281  3282  3283  3284  3285  3286  3287  3288  3289 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3290  3291  3292  3293  3294  3295  3296  3297  3298  3299  3300  3301  3302 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3303  3304  3305  3306  3307  3308  3309  3310  3311  3312  3313  3314  3315 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3316  3317  3318  3319  3320  3321  3322  3323  3324  3325  3326  3327  3328 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3329  3330  3331  3332  3333  3334  3335  3336  3337  3338  3339  3340  3341 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3342  3343  3344  3345  3346  3347  3348  3349  3350  3351  3352  3353  3354 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3355  3356  3357  3358  3359  3360  3361  3362  3363  3364  3365  3366  3367 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3368  3369  3370  3371  3372  3373  3374  3375  3376  3377  3378  3379  3380 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3381  3382  3383  3384  3385  3386  3387  3388  3389  3390  3391  3392  3393 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3394  3395  3396  3397  3398  3399  3400  3401  3402  3403  3404  3405  3406 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3407  3408  3409  3410  3411  3412  3413  3414  3415  3416  3417  3418  3419 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3420  3421  3422  3423  3424  3425  3426  3427  3428  3429  3430  3431  3432 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3433  3434  3435  3436  3437  3438  3439  3440  3441  3442  3443  3444  3445 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3446  3447  3448  3449  3450  3451  3452  3453  3454  3455  3456  3457  3458 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3459  3460  3461  3462  3463  3464  3465  3466  3467  3468  3469  3470  3471 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3472  3473  3474  3475  3476  3477  3478  3479  3480  3481  3482  3483  3484 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3485  3486  3487  3488  3489  3490  3491  3492  3493  3494  3495  3496  3497 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3498  3499  3500  3501  3502  3503  3504  3505  3506  3507  3508  3509  3510 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3511  3512  3513  3514  3515  3516  3517  3518  3519  3520  3521  3522  3523 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3524  3525  3526  3527  3528  3529  3530  3531  3532  3533  3534  3535  3536 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3537  3538  3539  3540  3541  3542  3543  3544  3545  3546  3547  3548  3549 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3550  3551  3552  3553  3554  3555  3556  3557  3558  3559  3560  3561  3562 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3563  3564  3565  3566  3567  3568  3569  3570  3571  3572  3573  3574  3575 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3576  3577  3578  3579  3580  3581  3582  3583  3584  3585  3586  3587  3588 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3589  3590  3591  3592  3593  3594  3595  3596  3597  3598  3599  3600  3601 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3602  3603  3604  3605  3606  3607  3608  3609  3610  3611  3612  3613  3614 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3615  3616  3617  3618  3619  3620  3621  3622  3623  3624  3625  3626  3627 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3628  3629  3630  3631  3632  3633  3634  3635  3636  3637  3638  3639  3640 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3641  3642  3643  3644  3645  3646  3647  3648  3649  3650  3651  3652  3653 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3654  3655  3656  3657  3658  3659  3660  3661  3662  3663  3664  3665  3666 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3667  3668  3669  3670  3671  3672  3673  3674  3675  3676  3677  3678  3679 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3680  3681  3682  3683  3684  3685  3686  3687  3688  3689  3690  3691  3692 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3693  3694  3695  3696  3697  3698  3699  3700  3701  3702  3703  3704  3705 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3706  3707  3708  3709  3710  3711  3712  3713  3714  3715  3716  3717  3718 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3719  3720  3721  3722  3723  3724  3725  3726  3727  3728  3729  3730  3731 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3732  3733  3734  3735  3736  3737  3738  3739  3740  3741  3742  3743  3744 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3745  3746  3747  3748  3749  3750  3751  3752  3753  3754  3755  3756  3757 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3758  3759  3760  3761  3762  3763  3764  3765  3766  3767  3768  3769  3770 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3771  3772  3773  3774  3775  3776  3777  3778  3779  3780  3781  3782  3783 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3784  3785  3786  3787  3788  3789  3790  3791  3792  3793  3794  3795  3796 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3797  3798  3799  3800  3801  3802  3803  3804  3805  3806  3807  3808  3809 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3810  3811  3812  3813  3814  3815  3816  3817  3818  3819  3820  3821  3822 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3823  3824  3825  3826  3827  3828  3829  3830  3831  3832  3833  3834  3835 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3836  3837  3838  3839  3840  3841  3842  3843  3844  3845  3846  3847  3848 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3849  3850  3851  3852  3853  3854  3855  3856  3857  3858  3859  3860  3861 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3862  3863  3864  3865  3866  3867  3868  3869  3870  3871  3872  3873  3874 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3875  3876  3877  3878  3879  3880  3881  3882  3883  3884  3885  3886  3887 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3888  3889  3890  3891  3892  3893  3894  3895  3896  3897  3898  3899  3900 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3901  3902  3903  3904  3905  3906  3907  3908  3909  3910  3911  3912  3913 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3914  3915  3916  3917  3918  3919  3920  3921  3922  3923  3924  3925  3926 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3927  3928  3929  3930  3931  3932  3933  3934  3935  3936  3937  3938  3939 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3940  3941  3942  3943  3944  3945  3946  3947  3948  3949  3950  3951  3952 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3953  3954  3955  3956  3957  3958  3959  3960  3961  3962  3963  3964  3965 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3966  3967  3968  3969  3970  3971  3972  3973  3974  3975  3976  3977  3978 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3979  3980  3981  3982  3983  3984  3985  3986  3987  3988  3989  3990  3991 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 3992  3993  3994  3995  3996  3997  3998  3999  4000  4001  4002  4003  4004 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4005  4006  4007  4008  4009  4010  4011  4012  4013  4014  4015  4016  4017 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4018  4019  4020  4021  4022  4023  4024  4025  4026  4027  4028  4029  4030 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4031  4032  4033  4034  4035  4036  4037  4038  4039  4040  4041  4042  4043 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4044  4045  4046  4047  4048  4049  4050  4051  4052  4053  4054  4055  4056 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4057  4058  4059  4060  4061  4062  4063  4064  4065  4066  4067  4068  4069 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4070  4071  4072  4073  4074  4075  4076  4077  4078  4079  4080  4081  4082 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4083  4084  4085  4086  4087  4088  4089  4090  4091  4092  4093  4094  4095 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4096  4097  4098  4099  4100  4101  4102  4103  4104  4105  4106  4107  4108 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4109  4110  4111  4112  4113  4114  4115  4116  4117  4118  4119  4120  4121 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4122  4123  4124  4125  4126  4127  4128  4129  4130  4131  4132  4133  4134 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4135  4136  4137  4138  4139  4140  4141  4142  4143  4144  4145  4146  4147 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4148  4149  4150  4151  4152  4153  4154  4155  4156  4157  4158  4159  4160 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4161  4162  4163  4164  4165  4166  4167  4168  4169  4170  4171  4172  4173 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4174  4175  4176  4177  4178  4179  4180  4181  4182  4183  4184  4185  4186 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4187  4188  4189  4190  4191  4192  4193  4194  4195  4196  4197  4198  4199 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4200  4201  4202  4203  4204  4205  4206  4207  4208  4209  4210  4211  4212 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4213  4214  4215  4216  4217  4218  4219  4220  4221  4222  4223  4224  4225 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4226  4227  4228  4229  4230  4231  4232  4233  4234  4235  4236  4237  4238 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4239  4240  4241  4242  4243  4244  4245  4246  4247  4248  4249  4250  4251 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4252  4253  4254  4255  4256  4257  4258  4259  4260  4261  4262  4263  4264 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4265  4266  4267  4268  4269  4270  4271  4272  4273  4274  4275  4276  4277 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4278  4279  4280  4281  4282  4283  4284  4285  4286  4287  4288  4289  4290 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4291  4292  4293  4294  4295  4296  4297  4298  4299  4300  4301  4302  4303 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4304  4305  4306  4307  4308  4309  4310  4311  4312  4313  4314  4315  4316 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4317  4318  4319  4320  4321  4322  4323  4324  4325  4326  4327  4328  4329 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4330  4331  4332  4333  4334  4335  4336  4337  4338  4339  4340  4341  4342 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4343  4344  4345  4346  4347  4348  4349  4350  4351  4352  4353  4354  4355 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4356  4357  4358  4359  4360  4361  4362  4363  4364  4365  4366  4367  4368 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4369  4370  4371  4372  4373  4374  4375  4376  4377  4378  4379  4380  4381 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4382  4383  4384  4385  4386  4387  4388  4389  4390  4391  4392  4393  4394 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4395  4396  4397  4398  4399  4400  4401  4402  4403  4404  4405  4406  4407 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4408  4409  4410  4411  4412  4413  4414  4415  4416  4417  4418  4419  4420 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4421  4422  4423  4424  4425  4426  4427  4428  4429  4430  4431  4432  4433 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4434  4435  4436  4437  4438  4439  4440  4441  4442  4443  4444  4445  4446 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4447  4448  4449  4450  4451  4452  4453  4454  4455  4456  4457  4458  4459 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4460  4461  4462  4463  4464  4465  4466  4467  4468  4469  4470  4471  4472 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4473  4474  4475  4476  4477  4478  4479  4480  4481  4482  4483  4484  4485 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4486  4487  4488  4489  4490  4491  4492  4493  4494  4495  4496  4497  4498 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4499  4500  4501  4502  4503  4504  4505  4506  4507  4508  4509  4510  4511 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4512  4513  4514  4515  4516  4517  4518  4519  4520  4521  4522  4523  4524 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4525  4526  4527  4528  4529  4530  4531  4532  4533  4534  4535  4536  4537 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4538  4539  4540  4541  4542  4543  4544  4545  4546  4547  4548  4549  4550 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4551  4552  4553  4554  4555  4556  4557  4558  4559  4560  4561  4562  4563 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4564  4565  4566  4567  4568  4569  4570  4571  4572  4573  4574  4575  4576 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4577  4578  4579  4580  4581  4582  4583  4584  4585  4586  4587  4588  4589 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4590  4591  4592  4593  4594  4595  4596  4597  4598  4599  4600  4601  4602 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4603  4604  4605  4606  4607  4608  4609  4610  4611  4612  4613  4614  4615 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4616  4617  4618  4619  4620  4621  4622  4623  4624  4625  4626  4627  4628 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4629  4630  4631  4632  4633  4634  4635  4636  4637  4638  4639  4640  4641 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4642  4643  4644  4645  4646  4647  4648  4649  4650  4651  4652  4653  4654 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4655  4656  4657  4658  4659  4660  4661  4662  4663  4664  4665  4666  4667 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4668  4669  4670  4671  4672  4673  4674  4675  4676  4677  4678  4679  4680 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4681  4682  4683  4684  4685  4686  4687  4688  4689  4690  4691  4692  4693 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4694  4695  4696  4697  4698  4699  4700  4701  4702  4703  4704  4705  4706 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4707  4708  4709  4710  4711  4712  4713  4714  4715  4716  4717  4718  4719 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4720  4721  4722  4723  4724  4725  4726  4727  4728  4729  4730  4731  4732 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4733  4734  4735  4736  4737  4738  4739  4740  4741  4742  4743  4744  4745 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4746  4747  4748  4749  4750  4751  4752  4753  4754  4755  4756  4757  4758 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4759  4760  4761  4762  4763  4764  4765  4766  4767  4768  4769  4770  4771 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4772  4773  4774  4775  4776  4777  4778  4779  4780  4781  4782  4783  4784 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4785  4786  4787  4788  4789  4790  4791  4792  4793  4794  4795  4796  4797 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4798  4799  4800  4801  4802  4803  4804  4805  4806  4807  4808  4809  4810 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4811  4812  4813  4814  4815  4816  4817  4818  4819  4820  4821  4822  4823 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4824  4825  4826  4827  4828  4829  4830  4831  4832  4833  4834  4835  4836 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4837  4838  4839  4840  4841  4842  4843  4844  4845  4846  4847  4848  4849 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4850  4851  4852  4853  4854  4855  4856  4857  4858  4859  4860  4861  4862 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4863  4864  4865  4866  4867  4868  4869  4870  4871  4872  4873  4874  4875 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4876  4877  4878  4879  4880  4881  4882  4883  4884  4885  4886  4887  4888 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4889  4890  4891  4892  4893  4894  4895  4896  4897  4898  4899  4900  4901 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4902  4903  4904  4905  4906  4907  4908  4909  4910  4911  4912  4913  4914 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4915  4916  4917  4918  4919  4920  4921  4922  4923  4924  4925  4926  4927 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4928  4929  4930  4931  4932  4933  4934  4935  4936  4937  4938  4939  4940 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4941  4942  4943  4944  4945  4946  4947  4948  4949  4950  4951  4952  4953 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4954  4955  4956  4957  4958  4959  4960  4961  4962  4963  4964  4965  4966 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4967  4968  4969  4970  4971  4972  4973  4974  4975  4976  4977  4978  4979 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4980  4981  4982  4983  4984  4985  4986  4987  4988  4989  4990  4991  4992 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 4993  4994  4995  4996  4997  4998  4999  5000  5001  5002  5003  5004  5005 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5006  5007  5008  5009  5010  5011  5012  5013  5014  5015  5016  5017  5018 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5019  5020  5021  5022  5023  5024  5025  5026  5027  5028  5029  5030  5031 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5032  5033  5034  5035  5036  5037  5038  5039  5040  5041  5042  5043  5044 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5045  5046  5047  5048  5049  5050  5051  5052  5053  5054  5055  5056  5057 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5058  5059  5060  5061  5062  5063  5064  5065  5066  5067  5068  5069  5070 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5071  5072  5073  5074  5075  5076  5077  5078  5079  5080  5081  5082  5083 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5084  5085  5086  5087  5088  5089  5090  5091  5092  5093  5094  5095  5096 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5097  5098  5099  5100  5101  5102  5103  5104  5105  5106  5107  5108  5109 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5110  5111  5112  5113  5114  5115  5116  5117  5118  5119  5120  5121  5122 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5123  5124  5125  5126  5127  5128  5129  5130  5131  5132  5133  5134  5135 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5136  5137  5138  5139  5140  5141  5142  5143  5144  5145  5146  5147  5148 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5149  5150  5151  5152  5153  5154  5155  5156  5157  5158  5159  5160  5161 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5162  5163  5164  5165  5166  5167  5168  5169  5170  5171  5172  5173  5174 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5175  5176  5177  5178  5179  5180  5181  5182  5183  5184  5185  5186  5187 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5188  5189  5190  5191  5192  5193  5194  5195  5196  5197  5198  5199  5200 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5201  5202  5203  5204  5205  5206  5207  5208  5209  5210  5211  5212  5213 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5214  5215  5216  5217  5218  5219  5220  5221  5222  5223  5224  5225  5226 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5227  5228  5229  5230  5231  5232  5233  5234  5235  5236  5237  5238  5239 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5240  5241  5242  5243  5244  5245  5246  5247  5248  5249  5250  5251  5252 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5253  5254  5255  5256  5257  5258  5259  5260  5261  5262  5263  5264  5265 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5266  5267  5268  5269  5270  5271  5272  5273  5274  5275  5276  5277  5278 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5279  5280  5281  5282  5283  5284  5285  5286  5287  5288  5289  5290  5291 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5292  5293  5294  5295  5296  5297  5298  5299  5300  5301  5302  5303  5304 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5305  5306  5307  5308  5309  5310  5311  5312  5313  5314  5315  5316  5317 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5318  5319  5320  5321  5322  5323  5324  5325  5326  5327  5328  5329  5330 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5331  5332  5333  5334  5335  5336  5337  5338  5339  5340  5341  5342  5343 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5344  5345  5346  5347  5348  5349  5350  5351  5352  5353  5354  5355  5356 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5357  5358  5359  5360  5361  5362  5363  5364  5365  5366  5367  5368  5369 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5370  5371  5372  5373  5374  5375  5376  5377  5378  5379  5380  5381  5382 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5383  5384  5385  5386  5387  5388  5389  5390  5391  5392  5393  5394  5395 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5396  5397  5398  5399  5400  5401  5402  5403  5404  5405  5406  5407  5408 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5409  5410  5411  5412  5413  5414  5415  5416  5417  5418  5419  5420  5421 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5422  5423  5424  5425  5426  5427  5428  5429  5430  5431  5432  5433  5434 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5435  5436  5437  5438  5439  5440  5441  5442  5443  5444  5445  5446  5447 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5448  5449  5450  5451  5452  5453  5454  5455  5456  5457  5458  5459  5460 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5461  5462  5463  5464  5465  5466  5467  5468  5469  5470  5471  5472  5473 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5474  5475  5476  5477  5478  5479  5480  5481  5482  5483  5484  5485  5486 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5487  5488  5489  5490  5491  5492  5493  5494  5495  5496  5497  5498  5499 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5500  5501  5502  5503  5504  5505  5506  5507  5508  5509  5510  5511  5512 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5513  5514  5515  5516  5517  5518  5519  5520  5521  5522  5523  5524  5525 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5526  5527  5528  5529  5530  5531  5532  5533  5534  5535  5536  5537  5538 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5539  5540  5541  5542  5543  5544  5545  5546  5547  5548  5549  5550  5551 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5552  5553  5554  5555  5556  5557  5558  5559  5560  5561  5562  5563  5564 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5565  5566  5567  5568  5569  5570  5571  5572  5573  5574  5575  5576  5577 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5578  5579  5580  5581  5582  5583  5584  5585  5586  5587  5588  5589  5590 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5591  5592  5593  5594  5595  5596  5597  5598  5599  5600  5601  5602  5603 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5604  5605  5606  5607  5608  5609  5610  5611  5612  5613  5614  5615  5616 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5617  5618  5619  5620  5621  5622  5623  5624  5625  5626  5627  5628  5629 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5630  5631  5632  5633  5634  5635  5636  5637  5638  5639  5640  5641  5642 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5643  5644  5645  5646  5647  5648  5649  5650  5651  5652  5653  5654  5655 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5656  5657  5658  5659  5660  5661  5662  5663  5664  5665  5666  5667  5668 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5669  5670  5671  5672  5673  5674  5675  5676  5677  5678  5679  5680  5681 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5682  5683  5684  5685  5686  5687  5688  5689  5690  5691  5692  5693  5694 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5695  5696  5697  5698  5699  5700  5701  5702  5703  5704  5705  5706  5707 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5708  5709  5710  5711  5712  5713  5714  5715  5716  5717  5718  5719  5720 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5721  5722  5723  5724  5725  5726  5727  5728  5729  5730  5731  5732  5733 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5734  5735  5736  5737  5738  5739  5740  5741  5742  5743  5744  5745  5746 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5747  5748  5749  5750  5751  5752  5753  5754  5755  5756  5757  5758  5759 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5760  5761  5762  5763  5764  5765  5766  5767  5768  5769  5770  5771  5772 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5773  5774  5775  5776  5777  5778  5779  5780  5781  5782  5783  5784  5785 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5786  5787  5788  5789  5790  5791  5792  5793  5794  5795  5796  5797  5798 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5799  5800  5801  5802  5803  5804  5805  5806  5807  5808  5809  5810  5811 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5812  5813  5814  5815  5816  5817  5818  5819  5820  5821  5822  5823  5824 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5825  5826  5827  5828  5829  5830  5831  5832  5833  5834  5835  5836  5837 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5838  5839  5840  5841  5842  5843  5844  5845  5846  5847  5848  5849  5850 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5851  5852  5853  5854  5855  5856  5857  5858  5859  5860  5861  5862  5863 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5864  5865  5866  5867  5868  5869  5870  5871  5872  5873  5874  5875  5876 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5877  5878  5879  5880  5881  5882  5883  5884  5885  5886  5887  5888  5889 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5890  5891  5892  5893  5894  5895  5896  5897  5898  5899  5900  5901  5902 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5903  5904  5905  5906  5907  5908  5909  5910  5911  5912  5913  5914  5915 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5916  5917  5918  5919  5920  5921  5922  5923  5924  5925  5926  5927  5928 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5929  5930  5931  5932  5933  5934  5935  5936  5937  5938  5939  5940  5941 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5942  5943  5944  5945  5946  5947  5948  5949  5950  5951  5952  5953  5954 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5955  5956  5957  5958  5959  5960  5961  5962  5963  5964  5965  5966  5967 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5968  5969  5970  5971  5972  5973  5974  5975  5976  5977  5978  5979  5980 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5981  5982  5983  5984  5985  5986  5987  5988  5989  5990  5991  5992  5993 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 5994  5995  5996  5997  5998  5999  6000  6001  6002  6003  6004  6005  6006 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6007  6008  6009  6010  6011  6012  6013  6014  6015  6016  6017  6018  6019 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6020  6021  6022  6023  6024  6025  6026  6027  6028  6029  6030  6031  6032 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6033  6034  6035  6036  6037  6038  6039  6040  6041  6042  6043  6044  6045 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6046  6047  6048  6049  6050  6051  6052  6053  6054  6055  6056  6057  6058 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6059  6060  6061  6062  6063  6064  6065  6066  6067  6068  6069  6070  6071 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6072  6073  6074  6075  6076  6077  6078  6079  6080  6081  6082  6083  6084 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6085  6086  6087  6088  6089  6090  6091  6092  6093  6094  6095  6096  6097 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6098  6099  6100  6101  6102  6103  6104  6105  6106  6107  6108  6109  6110 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6111  6112  6113  6114  6115  6116  6117  6118  6119  6120  6121  6122  6123 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6124  6125  6126  6127  6128  6129  6130  6131  6132  6133  6134  6135  6136 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6137  6138  6139  6140  6141  6142  6143  6144  6145  6146  6147  6148  6149 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6150  6151  6152  6153  6154  6155  6156  6157  6158  6159  6160  6161  6162 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6163  6164  6165  6166  6167  6168  6169  6170  6171  6172  6173  6174  6175 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6176  6177  6178  6179  6180  6181  6182  6183  6184  6185  6186  6187  6188 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6189  6190  6191  6192  6193  6194  6195  6196  6197  6198  6199  6200  6201 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6202  6203  6204  6205  6206  6207  6208  6209  6210  6211  6212  6213  6214 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6215  6216  6217  6218  6219  6220  6221  6222  6223  6224  6225  6226  6227 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6228  6229  6230  6231  6232  6233  6234  6235  6236  6237  6238  6239  6240 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6241  6242  6243  6244  6245  6246  6247  6248  6249  6250  6251  6252  6253 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6254  6255  6256  6257  6258  6259  6260  6261  6262  6263  6264  6265  6266 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6267  6268  6269  6270  6271  6272  6273  6274  6275  6276  6277  6278  6279 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6280  6281  6282  6283  6284  6285  6286  6287  6288  6289  6290  6291  6292 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6293  6294  6295  6296  6297  6298  6299  6300  6301  6302  6303  6304  6305 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6306  6307  6308  6309  6310  6311  6312  6313  6314  6315  6316  6317  6318 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6319  6320  6321  6322  6323  6324  6325  6326  6327  6328  6329  6330  6331 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6332  6333  6334  6335  6336  6337  6338  6339  6340  6341  6342  6343  6344 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6345  6346  6347  6348  6349  6350  6351  6352  6353  6354  6355  6356  6357 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6358  6359  6360  6361  6362  6363  6364  6365  6366  6367  6368  6369  6370 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6371  6372  6373  6374  6375  6376  6377  6378  6379  6380  6381  6382  6383 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6384  6385  6386  6387  6388  6389  6390  6391  6392  6393  6394  6395  6396 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6397  6398  6399  6400  6401  6402  6403  6404  6405  6406  6407  6408  6409 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6410  6411  6412  6413  6414  6415  6416  6417  6418  6419  6420  6421  6422 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6423  6424  6425  6426  6427  6428  6429  6430  6431  6432  6433  6434  6435 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6436  6437  6438  6439  6440  6441  6442  6443  6444  6445  6446  6447  6448 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6449  6450  6451  6452  6453  6454  6455  6456  6457  6458  6459  6460  6461 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6462  6463  6464  6465  6466  6467  6468  6469  6470  6471  6472  6473  6474 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6475  6476  6477  6478  6479  6480  6481  6482  6483  6484  6485  6486  6487 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6488  6489  6490  6491  6492  6493  6494  6495  6496  6497  6498  6499  6500 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6501  6502  6503  6504  6505  6506  6507  6508  6509  6510  6511  6512  6513 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6514  6515  6516  6517  6518  6519  6520  6521  6522  6523  6524  6525  6526 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6527  6528  6529  6530  6531  6532  6533  6534  6535  6536  6537  6538  6539 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6540  6541  6542  6543  6544  6545  6546  6547  6548  6549  6550  6551  6552 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6553  6554  6555  6556  6557  6558  6559  6560  6561  6562  6563  6564  6565 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6566  6567  6568  6569  6570  6571  6572  6573  6574  6575  6576  6577  6578 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6579  6580  6581  6582  6583  6584  6585  6586  6587  6588  6589  6590  6591 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6592  6593  6594  6595  6596  6597  6598  6599  6600  6601  6602  6603  6604 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6605  6606  6607  6608  6609  6610  6611  6612  6613  6614  6615  6616  6617 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6618  6619  6620  6621  6622  6623  6624  6625  6626  6627  6628  6629  6630 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6631  6632  6633  6634  6635  6636  6637  6638  6639  6640  6641  6642  6643 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6644  6645  6646  6647  6648  6649  6650  6651  6652  6653  6654  6655  6656 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6657  6658  6659  6660  6661  6662  6663  6664  6665  6666  6667  6668  6669 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6670  6671  6672  6673  6674  6675  6676  6677  6678  6679  6680  6681  6682 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6683  6684  6685  6686  6687  6688  6689  6690  6691  6692  6693  6694  6695 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6696  6697  6698  6699  6700  6701  6702  6703  6704  6705  6706  6707  6708 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6709  6710  6711  6712  6713  6714  6715  6716  6717  6718  6719  6720  6721 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6722  6723  6724  6725  6726  6727  6728  6729  6730  6731  6732  6733  6734 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6735  6736  6737  6738  6739  6740  6741  6742  6743  6744  6745  6746  6747 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6748  6749  6750  6751  6752  6753  6754  6755  6756  6757  6758  6759  6760 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6761  6762  6763  6764  6765  6766  6767  6768  6769  6770  6771  6772  6773 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6774  6775  6776  6777  6778  6779  6780  6781  6782  6783  6784  6785  6786 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6787  6788  6789  6790  6791  6792  6793  6794  6795  6796  6797  6798  6799 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6800  6801  6802  6803  6804  6805  6806  6807  6808  6809  6810  6811  6812 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6813  6814  6815  6816  6817  6818  6819  6820  6821  6822  6823  6824  6825 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6826  6827  6828  6829  6830  6831  6832  6833  6834  6835  6836  6837  6838 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6839  6840  6841  6842  6843  6844  6845  6846  6847  6848  6849  6850  6851 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6852  6853  6854  6855  6856  6857  6858  6859  6860  6861  6862  6863  6864 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6865  6866  6867  6868  6869  6870  6871  6872  6873  6874  6875  6876  6877 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6878  6879  6880  6881  6882  6883  6884  6885  6886  6887  6888  6889  6890 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6891  6892  6893  6894  6895  6896  6897  6898  6899  6900  6901  6902  6903 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6904  6905  6906  6907  6908  6909  6910  6911  6912  6913  6914  6915  6916 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6917  6918  6919  6920  6921  6922  6923  6924  6925  6926  6927  6928  6929 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6930  6931  6932  6933  6934  6935  6936  6937  6938  6939  6940  6941  6942 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6943  6944  6945  6946  6947  6948  6949  6950  6951  6952  6953  6954  6955 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6956  6957  6958  6959  6960  6961  6962  6963  6964  6965  6966  6967  6968 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6969  6970  6971  6972  6973  6974  6975  6976  6977  6978  6979  6980  6981 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6982  6983  6984  6985  6986  6987  6988  6989  6990  6991  6992  6993  6994 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 6995  6996  6997  6998  6999  7000  7001  7002  7003  7004  7005  7006  7007 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7008  7009  7010  7011  7012  7013  7014  7015  7016  7017  7018  7019  7020 \n    1     1     1     2     2     1     1     1     1     1     1     1     1 \n 7021  7022  7023  7024  7025  7026  7027  7028  7029  7030  7031  7032  7033 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7034  7035  7036  7037  7038  7039  7040  7041  7042  7043  7044  7045  7046 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7047  7048  7049  7050  7051  7052  7053  7054  7055  7056  7057  7058  7059 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7060  7061  7062  7063  7064  7065  7066  7067  7068  7069  7070  7071  7072 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7073  7074  7075  7076  7077  7078  7079  7080  7081  7082  7083  7084  7085 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7086  7087  7088  7089  7090  7091  7092  7093  7094  7095  7096  7097  7098 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7099  7100  7101  7102  7103  7104  7105  7106  7107  7108  7109  7110  7111 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7112  7113  7114  7115  7116  7117  7118  7119  7120  7121  7122  7123  7124 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7125  7126  7127  7128  7129  7130  7131  7132  7133  7134  7135  7136  7137 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7138  7139  7140  7141  7142  7143  7144  7145  7146  7147  7148  7149  7150 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7151  7152  7153  7154  7155  7156  7157  7158  7159  7160  7161  7162  7163 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7164  7165  7166  7167  7168  7169  7170  7171  7172  7173  7174  7175  7176 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7177  7178  7179  7180  7181  7182  7183  7184  7185  7186  7187  7188  7189 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7190  7191  7192  7193  7194  7195  7196  7197  7198  7199  7200  7201  7202 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7203  7204  7205  7206  7207  7208  7209  7210  7211  7212  7213  7214  7215 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7216  7217  7218  7219  7220  7221  7222  7223  7224  7225  7226  7227  7228 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7229  7230  7231  7232  7233  7234  7235  7236  7237  7238  7239  7240  7241 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7242  7243  7244  7245  7246  7247  7248  7249  7250  7251  7252  7253  7254 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7255  7256  7257  7258  7259  7260  7261  7262  7263  7264  7265  7266  7267 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7268  7269  7270  7271  7272  7273  7274  7275  7276  7277  7278  7279  7280 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7281  7282  7283  7284  7285  7286  7287  7288  7289  7290  7291  7292  7293 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7294  7295  7296  7297  7298  7299  7300  7301  7302  7303  7304  7305  7306 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7307  7308  7309  7310  7311  7312  7313  7314  7315  7316  7317  7318  7319 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7320  7321  7322  7323  7324  7325  7326  7327  7328  7329  7330  7331  7332 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7333  7334  7335  7336  7337  7338  7339  7340  7341  7342  7343  7344  7345 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7346  7347  7348  7349  7350  7351  7352  7353  7354  7355  7356  7357  7358 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7359  7360  7361  7362  7363  7364  7365  7366  7367  7368  7369  7370  7371 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7372  7373  7374  7375  7376  7377  7378  7379  7380  7381  7382  7383  7384 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7385  7386  7387  7388  7389  7390  7391  7392  7393  7394  7395  7396  7397 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7398  7399  7400  7401  7402  7403  7404  7405  7406  7407  7408  7409  7410 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7411  7412  7413  7414  7415  7416  7417  7418  7419  7420  7421  7422  7423 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7424  7425  7426  7427  7428  7429  7430  7431  7432  7433  7434  7435  7436 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7437  7438  7439  7440  7441  7442  7443  7444  7445  7446  7447  7448  7449 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7450  7451  7452  7453  7454  7455  7456  7457  7458  7459  7460  7461  7462 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7463  7464  7465  7466  7467  7468  7469  7470  7471  7472  7473  7474  7475 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7476  7477  7478  7479  7480  7481  7482  7483  7484  7485  7486  7487  7488 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7489  7490  7491  7492  7493  7494  7495  7496  7497  7498  7499  7500  7501 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7502  7503  7504  7505  7506  7507  7508  7509  7510  7511  7512  7513  7514 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7515  7516  7517  7518  7519  7520  7521  7522  7523  7524  7525  7526  7527 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7528  7529  7530  7531  7532  7533  7534  7535  7536  7537  7538  7539  7540 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7541  7542  7543  7544  7545  7546  7547  7548  7549  7550  7551  7552  7553 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7554  7555  7556  7557  7558  7559  7560  7561  7562  7563  7564  7565  7566 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7567  7568  7569  7570  7571  7572  7573  7574  7575  7576  7577  7578  7579 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7580  7581  7582  7583  7584  7585  7586  7587  7588  7589  7590  7591  7592 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7593  7594  7595  7596  7597  7598  7599  7600  7601  7602  7603  7604  7605 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7606  7607  7608  7609  7610  7611  7612  7613  7614  7615  7616  7617  7618 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7619  7620  7621  7622  7623  7624  7625  7626  7627  7628  7629  7630  7631 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7632  7633  7634  7635  7636  7637  7638  7639  7640  7641  7642  7643  7644 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7645  7646  7647  7648  7649  7650  7651  7652  7653  7654  7655  7656  7657 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7658  7659  7660  7661  7662  7663  7664  7665  7666  7667  7668  7669  7670 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7671  7672  7673  7674  7675  7676  7677  7678  7679  7680  7681  7682  7683 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7684  7685  7686  7687  7688  7689  7690  7691  7692  7693  7694  7695  7696 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7697  7698  7699  7700  7701  7702  7703  7704  7705  7706  7707  7708  7709 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7710  7711  7712  7713  7714  7715  7716  7717  7718  7719  7720  7721  7722 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7723  7724  7725  7726  7727  7728  7729  7730  7731  7732  7733  7734  7735 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7736  7737  7738  7739  7740  7741  7742  7743  7744  7745  7746  7747  7748 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7749  7750  7751  7752  7753  7754  7755  7756  7757  7758  7759  7760  7761 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7762  7763  7764  7765  7766  7767  7768  7769  7770  7771  7772  7773  7774 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7775  7776  7777  7778  7779  7780  7781  7782  7783  7784  7785  7786  7787 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7788  7789  7790  7791  7792  7793  7794  7795  7796  7797  7798  7799  7800 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7801  7802  7803  7804  7805  7806  7807  7808  7809  7810  7811  7812  7813 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7814  7815  7816  7817  7818  7819  7820  7821  7822  7823  7824  7825  7826 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7827  7828  7829  7830  7831  7832  7833  7834  7835  7836  7837  7838  7839 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7840  7841  7842  7843  7844  7845  7846  7847  7848  7849  7850  7851  7852 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7853  7854  7855  7856  7857  7858  7859  7860  7861  7862  7863  7864  7865 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7866  7867  7868  7869  7870  7871  7872  7873  7874  7875  7876  7877  7878 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7879  7880  7881  7882  7883  7884  7885  7886  7887  7888  7889  7890  7891 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7892  7893  7894  7895  7896  7897  7898  7899  7900  7901  7902  7903  7904 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7905  7906  7907  7908  7909  7910  7911  7912  7913  7914  7915  7916  7917 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7918  7919  7920  7921  7922  7923  7924  7925  7926  7927  7928  7929  7930 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7931  7932  7933  7934  7935  7936  7937  7938  7939  7940  7941  7942  7943 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7944  7945  7946  7947  7948  7949  7950  7951  7952  7953  7954  7955  7956 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7957  7958  7959  7960  7961  7962  7963  7964  7965  7966  7967  7968  7969 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7970  7971  7972  7973  7974  7975  7976  7977  7978  7979  7980  7981  7982 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7983  7984  7985  7986  7987  7988  7989  7990  7991  7992  7993  7994  7995 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 7996  7997  7998  7999  8000  8001  8002  8003  8004  8005  8006  8007  8008 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8009  8010  8011  8012  8013  8014  8015  8016  8017  8018  8019  8020  8021 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8022  8023  8024  8025  8026  8027  8028  8029  8030  8031  8032  8033  8034 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8035  8036  8037  8038  8039  8040  8041  8042  8043  8044  8045  8046  8047 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8048  8049  8050  8051  8052  8053  8054  8055  8056  8057  8058  8059  8060 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8061  8062  8063  8064  8065  8066  8067  8068  8069  8070  8071  8072  8073 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8074  8075  8076  8077  8078  8079  8080  8081  8082  8083  8084  8085  8086 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8087  8088  8089  8090  8091  8092  8093  8094  8095  8096  8097  8098  8099 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8100  8101  8102  8103  8104  8105  8106  8107  8108  8109  8110  8111  8112 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8113  8114  8115  8116  8117  8118  8119  8120  8121  8122  8123  8124  8125 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8126  8127  8128  8129  8130  8131  8132  8133  8134  8135  8136  8137  8138 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8139  8140  8141  8142  8143  8144  8145  8146  8147  8148  8149  8150  8151 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8152  8153  8154  8155  8156  8157  8158  8159  8160  8161  8162  8163  8164 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8165  8166  8167  8168  8169  8170  8171  8172  8173  8174  8175  8176  8177 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8178  8179  8180  8181  8182  8183  8184  8185  8186  8187  8188  8189  8190 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8191  8192  8193  8194  8195  8196  8197  8198  8199  8200  8201  8202  8203 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8204  8205  8206  8207  8208  8209  8210  8211  8212  8213  8214  8215  8216 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8217  8218  8219  8220  8221  8222  8223  8224  8225  8226  8227  8228  8229 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8230  8231  8232  8233  8234  8235  8236  8237  8238  8239  8240  8241  8242 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8243  8244  8245  8246  8247  8248  8249  8250  8251  8252  8253  8254  8255 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8256  8257  8258  8259  8260  8261  8262  8263  8264  8265  8266  8267  8268 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8269  8270  8271  8272  8273  8274  8275  8276  8277  8278  8279  8280  8281 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8282  8283  8284  8285  8286  8287  8288  8289  8290  8291  8292  8293  8294 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8295  8296  8297  8298  8299  8300  8301  8302  8303  8304  8305  8306  8307 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8308  8309  8310  8311  8312  8313  8314  8315  8316  8317  8318  8319  8320 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8321  8322  8323  8324  8325  8326  8327  8328  8329  8330  8331  8332  8333 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8334  8335  8336  8337  8338  8339  8340  8341  8342  8343  8344  8345  8346 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8347  8348  8349  8350  8351  8352  8353  8354  8355  8356  8357  8358  8359 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8360  8361  8362  8363  8364  8365  8366  8367  8368  8369  8370  8371  8372 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8373  8374  8375  8376  8377  8378  8379  8380  8381  8382  8383  8384  8385 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8386  8387  8388  8389  8390  8391  8392  8393  8394  8395  8396  8397  8398 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8399  8400  8401  8402  8403  8404  8405  8406  8407  8408  8409  8410  8411 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8412  8413  8414  8415  8416  8417  8418  8419  8420  8421  8422  8423  8424 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8425  8426  8427  8428  8429  8430  8431  8432  8433  8434  8435  8436  8437 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8438  8439  8440  8441  8442  8443  8444  8445  8446  8447  8448  8449  8450 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8451  8452  8453  8454  8455  8456  8457  8458  8459  8460  8461  8462  8463 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8464  8465  8466  8467  8468  8469  8470  8471  8472  8473  8474  8475  8476 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8477  8478  8479  8480  8481  8482  8483  8484  8485  8486  8487  8488  8489 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8490  8491  8492  8493  8494  8495  8496  8497  8498  8499  8500  8501  8502 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8503  8504  8505  8506  8507  8508  8509  8510  8511  8512  8513  8514  8515 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8516  8517  8518  8519  8520  8521  8522  8523  8524  8525  8526  8527  8528 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8529  8530  8531  8532  8533  8534  8535  8536  8537  8538  8539  8540  8541 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8542  8543  8544  8545  8546  8547  8548  8549  8550  8551  8552  8553  8554 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8555  8556  8557  8558  8559  8560  8561  8562  8563  8564  8565  8566  8567 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8568  8569  8570  8571  8572  8573  8574  8575  8576  8577  8578  8579  8580 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8581  8582  8583  8584  8585  8586  8587  8588  8589  8590  8591  8592  8593 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8594  8595  8596  8597  8598  8599  8600  8601  8602  8603  8604  8605  8606 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8607  8608  8609  8610  8611  8612  8613  8614  8615  8616  8617  8618  8619 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8620  8621  8622  8623  8624  8625  8626  8627  8628  8629  8630  8631  8632 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8633  8634  8635  8636  8637  8638  8639  8640  8641  8642  8643  8644  8645 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8646  8647  8648  8649  8650  8651  8652  8653  8654  8655  8656  8657  8658 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8659  8660  8661  8662  8663  8664  8665  8666  8667  8668  8669  8670  8671 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8672  8673  8674  8675  8676  8677  8678  8679  8680  8681  8682  8683  8684 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8685  8686  8687  8688  8689  8690  8691  8692  8693  8694  8695  8696  8697 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8698  8699  8700  8701  8702  8703  8704  8705  8706  8707  8708  8709  8710 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8711  8712  8713  8714  8715  8716  8717  8718  8719  8720  8721  8722  8723 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8724  8725  8726  8727  8728  8729  8730  8731  8732  8733  8734  8735  8736 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8737  8738  8739  8740  8741  8742  8743  8744  8745  8746  8747  8748  8749 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8750  8751  8752  8753  8754  8755  8756  8757  8758  8759  8760  8761  8762 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8763  8764  8765  8766  8767  8768  8769  8770  8771  8772  8773  8774  8775 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8776  8777  8778  8779  8780  8781  8782  8783  8784  8785  8786  8787  8788 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8789  8790  8791  8792  8793  8794  8795  8796  8797  8798  8799  8800  8801 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8802  8803  8804  8805  8806  8807  8808  8809  8810  8811  8812  8813  8814 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8815  8816  8817  8818  8819  8820  8821  8822  8823  8824  8825  8826  8827 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8828  8829  8830  8831  8832  8833  8834  8835  8836  8837  8838  8839  8840 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8841  8842  8843  8844  8845  8846  8847  8848  8849  8850  8851  8852  8853 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8854  8855  8856  8857  8858  8859  8860  8861  8862  8863  8864  8865  8866 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8867  8868  8869  8870  8871  8872  8873  8874  8875  8876  8877  8878  8879 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8880  8881  8882  8883  8884  8885  8886  8887  8888  8889  8890  8891  8892 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8893  8894  8895  8896  8897  8898  8899  8900  8901  8902  8903  8904  8905 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8906  8907  8908  8909  8910  8911  8912  8913  8914  8915  8916  8917  8918 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8919  8920  8921  8922  8923  8924  8925  8926  8927  8928  8929  8930  8931 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8932  8933  8934  8935  8936  8937  8938  8939  8940  8941  8942  8943  8944 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8945  8946  8947  8948  8949  8950  8951  8952  8953  8954  8955  8956  8957 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8958  8959  8960  8961  8962  8963  8964  8965  8966  8967  8968  8969  8970 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8971  8972  8973  8974  8975  8976  8977  8978  8979  8980  8981  8982  8983 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8984  8985  8986  8987  8988  8989  8990  8991  8992  8993  8994  8995  8996 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 8997  8998  8999  9000  9001  9002  9003  9004  9005  9006  9007  9008  9009 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9010  9011  9012  9013  9014  9015  9016  9017  9018  9019  9020  9021  9022 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9023  9024  9025  9026  9027  9028  9029  9030  9031  9032  9033  9034  9035 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9036  9037  9038  9039  9040  9041  9042  9043  9044  9045  9046  9047  9048 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9049  9050  9051  9052  9053  9054  9055  9056  9057  9058  9059  9060  9061 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9062  9063  9064  9065  9066  9067  9068  9069  9070  9071  9072  9073  9074 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9075  9076  9077  9078  9079  9080  9081  9082  9083  9084  9085  9086  9087 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9088  9089  9090  9091  9092  9093  9094  9095  9096  9097  9098  9099  9100 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9101  9102  9103  9104  9105  9106  9107  9108  9109  9110  9111  9112  9113 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9114  9115  9116  9117  9118  9119  9120  9121  9122  9123  9124  9125  9126 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9127  9128  9129  9130  9131  9132  9133  9134  9135  9136  9137  9138  9139 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9140  9141  9142  9143  9144  9145  9146  9147  9148  9149  9150  9151  9152 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9153  9154  9155  9156  9157  9158  9159  9160  9161  9162  9163  9164  9165 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9166  9167  9168  9169  9170  9171  9172  9173  9174  9175  9176  9177  9178 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9179  9180  9181  9182  9183  9184  9185  9186  9187  9188  9189  9190  9191 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9192  9193  9194  9195  9196  9197  9198  9199  9200  9201  9202  9203  9204 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9205  9206  9207  9208  9209  9210  9211  9212  9213  9214  9215  9216  9217 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9218  9219  9220  9221  9222  9223  9224  9225  9226  9227  9228  9229  9230 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9231  9232  9233  9234  9235  9236  9237  9238  9239  9240  9241  9242  9243 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9244  9245  9246  9247  9248  9249  9250  9251  9252  9253  9254  9255  9256 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9257  9258  9259  9260  9261  9262  9263  9264  9265  9266  9267  9268  9269 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9270  9271  9272  9273  9274  9275  9276  9277  9278  9279  9280  9281  9282 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9283  9284  9285  9286  9287  9288  9289  9290  9291  9292  9293  9294  9295 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9296  9297  9298  9299  9300  9301  9302  9303  9304  9305  9306  9307  9308 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9309  9310  9311  9312  9313  9314  9315  9316  9317  9318  9319  9320  9321 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9322  9323  9324  9325  9326  9327  9328  9329  9330  9331  9332  9333  9334 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9335  9336  9337  9338  9339  9340  9341  9342  9343  9344  9345  9346  9347 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9348  9349  9350  9351  9352  9353  9354  9355  9356  9357  9358  9359  9360 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9361  9362  9363  9364  9365  9366  9367  9368  9369  9370  9371  9372  9373 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9374  9375  9376  9377  9378  9379  9380  9381  9382  9383  9384  9385  9386 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9387  9388  9389  9390  9391  9392  9393  9394  9395  9396  9397  9398  9399 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9400  9401  9402  9403  9404  9405  9406  9407  9408  9409  9410  9411  9412 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9413  9414  9415  9416  9417  9418  9419  9420  9421  9422  9423  9424  9425 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9426  9427  9428  9429  9430  9431  9432  9433  9434  9435  9436  9437  9438 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9439  9440  9441  9442  9443  9444  9445  9446  9447  9448  9449  9450  9451 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9452  9453  9454  9455  9456  9457  9458  9459  9460  9461  9462  9463  9464 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9465  9466  9467  9468  9469  9470  9471  9472  9473  9474  9475  9476  9477 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9478  9479  9480  9481  9482  9483  9484  9485  9486  9487  9488  9489  9490 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9491  9492  9493  9494  9495  9496  9497  9498  9499  9500  9501  9502  9503 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9504  9505  9506  9507  9508  9509  9510  9511  9512  9513  9514  9515  9516 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9517  9518  9519  9520  9521  9522  9523  9524  9525  9526  9527  9528  9529 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9530  9531  9532  9533  9534  9535  9536  9537  9538  9539  9540  9541  9542 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9543  9544  9545  9546  9547  9548  9549  9550  9551  9552  9553  9554  9555 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9556  9557  9558  9559  9560  9561  9562  9563  9564  9565  9566  9567  9568 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9569  9570  9571  9572  9573  9574  9575  9576  9577  9578  9579  9580  9581 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9582  9583  9584  9585  9586  9587  9588  9589  9590  9591  9592  9593  9594 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9595  9596  9597  9598  9599  9600  9601  9602  9603  9604  9605  9606  9607 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9608  9609  9610  9611  9612  9613  9614  9615  9616  9617  9618  9619  9620 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9621  9622  9623  9624  9625  9626  9627  9628  9629  9630  9631  9632  9633 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9634  9635  9636  9637  9638  9639  9640  9641  9642  9643  9644  9645  9646 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9647  9648  9649  9650  9651  9652  9653  9654  9655  9656  9657  9658  9659 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9660  9661  9662  9663  9664  9665  9666  9667  9668  9669  9670  9671  9672 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9673  9674  9675  9676  9677  9678  9679  9680  9681  9682  9683  9684  9685 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9686  9687  9688  9689  9690  9691  9692  9693  9694  9695  9696  9697  9698 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9699  9700  9701  9702  9703  9704  9705  9706  9707  9708  9709  9710  9711 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9712  9713  9714  9715  9716  9717  9718  9719  9720  9721  9722  9723  9724 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9725  9726  9727  9728  9729  9730  9731  9732  9733  9734  9735  9736  9737 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9738  9739  9740  9741  9742  9743  9744  9745  9746  9747  9748  9749  9750 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9751  9752  9753  9754  9755  9756  9757  9758  9759  9760  9761  9762  9763 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9764  9765  9766  9767  9768  9769  9770  9771  9772  9773  9774  9775  9776 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9777  9778  9779  9780  9781  9782  9783  9784  9785  9786  9787  9788  9789 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9790  9791  9792  9793  9794  9795  9796  9797  9798  9799  9800  9801  9802 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9803  9804  9805  9806  9807  9808  9809  9810  9811  9812  9813  9814  9815 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9816  9817  9818  9819  9820  9821  9822  9823  9824  9825  9826  9827  9828 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9829  9830  9831  9832  9833  9834  9835  9836  9837  9838  9839  9840  9841 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9842  9843  9844  9845  9846  9847  9848  9849  9850  9851  9852  9853  9854 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9855  9856  9857  9858  9859  9860  9861  9862  9863  9864  9865  9866  9867 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9868  9869  9870  9871  9872  9873  9874  9875  9876  9877  9878  9879  9880 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9881  9882  9883  9884  9885  9886  9887  9888  9889  9890  9891  9892  9893 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9894  9895  9896  9897  9898  9899  9900  9901  9902  9903  9904  9905  9906 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9907  9908  9909  9910  9911  9912  9913  9914  9915  9916  9917  9918  9919 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9920  9921  9922  9923  9924  9925  9926  9927  9928  9929  9930  9931  9932 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9933  9934  9935  9936  9937  9938  9939  9940  9941  9942  9943  9944  9945 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9946  9947  9948  9949  9950  9951  9952  9953  9954  9955  9956  9957  9958 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9959  9960  9961  9962  9963  9964  9965  9966  9967  9968  9969  9970  9971 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9972  9973  9974  9975  9976  9977  9978  9979  9980  9981  9982  9983  9984 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9985  9986  9987  9988  9989  9990  9991  9992  9993  9994  9995  9996  9997 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n 9998  9999 10000 10001 10002 10003 10004 10005 10006 10007 10008 10009 10010 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10011 10012 10013 10014 10015 10016 10017 10018 10019 10020 10021 10022 10023 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10024 10025 10026 10027 10028 10029 10030 10031 10032 10033 10034 10035 10036 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10037 10038 10039 10040 10041 10042 10043 10044 10045 10046 10047 10048 10049 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10050 10051 10052 10053 10054 10055 10056 10057 10058 10059 10060 10061 10062 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10063 10064 10065 10066 10067 10068 10069 10070 10071 10072 10073 10074 10075 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10076 10077 10078 10079 10080 10081 10082 10083 10084 10085 10086 10087 10088 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10089 10090 10091 10092 10093 10094 10095 10096 10097 10098 10099 10100 10101 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10102 10103 10104 10105 10106 10107 10108 10109 10110 10111 10112 10113 10114 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10115 10116 10117 10118 10119 10120 10121 10122 10123 10124 10125 10126 10127 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10128 10129 10130 10131 10132 10133 10134 10135 10136 10137 10138 10139 10140 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10141 10142 10143 10144 10145 10146 10147 10148 10149 10150 10151 10152 10153 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10154 10155 10156 10157 10158 10159 10160 10161 10162 10163 10164 10165 10166 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10167 10168 10169 10170 10171 10172 10173 10174 10175 10176 10177 10178 10179 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10180 10181 10182 10183 10184 10185 10186 10187 10188 10189 10190 10191 10192 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10193 10194 10195 10196 10197 10198 10199 10200 10201 10202 10203 10204 10205 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10206 10207 10208 10209 10210 10211 10212 10213 10214 10215 10216 10217 10218 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10219 10220 10221 10222 10223 10224 10225 10226 10227 10228 10229 10230 10231 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10232 10233 10234 10235 10236 10237 10238 10239 10240 10241 10242 10243 10244 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10245 10246 10247 10248 10249 10250 10251 10252 10253 10254 10255 10256 10257 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10258 10259 10260 10261 10262 10263 10264 10265 10266 10267 10268 10269 10270 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10271 10272 10273 10274 10275 10276 10277 10278 10279 10280 10281 10282 10283 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10284 10285 10286 10287 10288 10289 10290 10291 10292 10293 10294 10295 10296 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10297 10298 10299 10300 10301 10302 10303 10304 10305 10306 10307 10308 10309 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10310 10311 10312 10313 10314 10315 10316 10317 10318 10319 10320 10321 10322 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10323 10324 10325 10326 10327 10328 10329 10330 10331 10332 10333 10334 10335 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10336 10337 10338 10339 10340 10341 10342 10343 10344 10345 10346 10347 10348 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10349 10350 10351 10352 10353 10354 10355 10356 10357 10358 10359 10360 10361 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10362 10363 10364 10365 10366 10367 10368 10369 10370 10371 10372 10373 10374 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10375 10376 10377 10378 10379 10380 10381 10382 10383 10384 10385 10386 10387 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10388 10389 10390 10391 10392 10393 10394 10395 10396 10397 10398 10399 10400 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10401 10402 10403 10404 10405 10406 10407 10408 10409 10410 10411 10412 10413 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10414 10415 10416 10417 10418 10419 10420 10421 10422 10423 10424 10425 10426 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10427 10428 10429 10430 10431 10432 10433 10434 10435 10436 10437 10438 10439 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10440 10441 10442 10443 10444 10445 10446 10447 10448 10449 10450 10451 10452 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10453 10454 10455 10456 10457 10458 10459 10460 10461 10462 10463 10464 10465 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10466 10467 10468 10469 10470 10471 10472 10473 10474 10475 10476 10477 10478 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10479 10480 10481 10482 10483 10484 10485 10486 10487 10488 10489 10490 10491 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10492 10493 10494 10495 10496 10497 10498 10499 10500 10501 10502 10503 10504 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10505 10506 10507 10508 10509 10510 10511 10512 10513 10514 10515 10516 10517 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10518 10519 10520 10521 10522 10523 10524 10525 10526 10527 10528 10529 10530 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10531 10532 10533 10534 10535 10536 10537 10538 10539 10540 10541 10542 10543 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10544 10545 10546 10547 10548 10549 10550 10551 10552 10553 10554 10555 10556 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10557 10558 10559 10560 10561 10562 10563 10564 10565 10566 10567 10568 10569 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10570 10571 10572 10573 10574 10575 10576 10577 10578 10579 10580 10581 10582 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10583 10584 10585 10586 10587 10588 10589 10590 10591 10592 10593 10594 10595 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10596 10597 10598 10599 10600 10601 10602 10603 10604 10605 10606 10607 10608 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10609 10610 10611 10612 10613 10614 10615 10616 10617 10618 10619 10620 10621 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10622 10623 10624 10625 10626 10627 10628 10629 10630 10631 10632 10633 10634 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10635 10636 10637 10638 10639 10640 10641 10642 10643 10644 10645 10646 10647 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10648 10649 10650 10651 10652 10653 10654 10655 10656 10657 10658 10659 10660 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10661 10662 10663 10664 10665 10666 10667 10668 10669 10670 10671 10672 10673 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10674 10675 10676 10677 10678 10679 10680 10681 10682 10683 10684 10685 10686 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10687 10688 10689 10690 10691 10692 10693 10694 10695 10696 10697 10698 10699 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10700 10701 10702 10703 10704 10705 10706 10707 10708 10709 10710 10711 10712 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10713 10714 10715 10716 10717 10718 10719 10720 10721 10722 10723 10724 10725 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10726 10727 10728 10729 10730 10731 10732 10733 10734 10735 10736 10737 10738 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10739 10740 10741 10742 10743 10744 10745 10746 10747 10748 10749 10750 10751 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10752 10753 10754 10755 10756 10757 10758 10759 10760 10761 10762 10763 10764 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10765 10766 10767 10768 10769 10770 10771 10772 10773 10774 10775 10776 10777 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10778 10779 10780 10781 10782 10783 10784 10785 10786 10787 10788 10789 10790 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10791 10792 10793 10794 10795 10796 10797 10798 10799 10800 10801 10802 10803 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10804 10805 10806 10807 10808 10809 10810 10811 10812 10813 10814 10815 10816 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10817 10818 10819 10820 10821 10822 10823 10824 10825 10826 10827 10828 10829 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10830 10831 10832 10833 10834 10835 10836 10837 10838 10839 10840 10841 10842 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10843 10844 10845 10846 10847 10848 10849 10850 10851 10852 10853 10854 10855 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10856 10857 10858 10859 10860 10861 10862 10863 10864 10865 10866 10867 10868 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10869 10870 10871 10872 10873 10874 10875 10876 10877 10878 10879 10880 10881 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10882 10883 10884 10885 10886 10887 10888 10889 10890 10891 10892 10893 10894 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10895 10896 10897 10898 10899 10900 10901 10902 10903 10904 10905 10906 10907 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10908 10909 10910 10911 10912 10913 10914 10915 10916 10917 10918 10919 10920 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10921 10922 10923 10924 10925 10926 10927 10928 10929 10930 10931 10932 10933 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10934 10935 10936 10937 10938 10939 10940 10941 10942 10943 10944 10945 10946 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10947 10948 10949 10950 10951 10952 10953 10954 10955 10956 10957 10958 10959 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10960 10961 10962 10963 10964 10965 10966 10967 10968 10969 10970 10971 10972 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10973 10974 10975 10976 10977 10978 10979 10980 10981 10982 10983 10984 10985 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10986 10987 10988 10989 10990 10991 10992 10993 10994 10995 10996 10997 10998 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n10999 11000 11001 11002 11003 11004 11005 11006 11007 11008 11009 11010 11011 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11012 11013 11014 11015 11016 11017 11018 11019 11020 11021 11022 11023 11024 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11025 11026 11027 11028 11029 11030 11031 11032 11033 11034 11035 11036 11037 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11038 11039 11040 11041 11042 11043 11044 11045 11046 11047 11048 11049 11050 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11051 11052 11053 11054 11055 11056 11057 11058 11059 11060 11061 11062 11063 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11064 11065 11066 11067 11068 11069 11070 11071 11072 11073 11074 11075 11076 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11077 11078 11079 11080 11081 11082 11083 11084 11085 11086 11087 11088 11089 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11090 11091 11092 11093 11094 11095 11096 11097 11098 11099 11100 11101 11102 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11103 11104 11105 11106 11107 11108 11109 11110 11111 11112 11113 11114 11115 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11116 11117 11118 11119 11120 11121 11122 11123 11124 11125 11126 11127 11128 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11129 11130 11131 11132 11133 11134 11135 11136 11137 11138 11139 11140 11141 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11142 11143 11144 11145 11146 11147 11148 11149 11150 11151 11152 11153 11154 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11155 11156 11157 11158 11159 11160 11161 11162 11163 11164 11165 11166 11167 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11168 11169 11170 11171 11172 11173 11174 11175 11176 11177 11178 11179 11180 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11181 11182 11183 11184 11185 11186 11187 11188 11189 11190 11191 11192 11193 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11194 11195 11196 11197 11198 11199 11200 11201 11202 11203 11204 11205 11206 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11207 11208 11209 11210 11211 11212 11213 11214 11215 11216 11217 11218 11219 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11220 11221 11222 11223 11224 11225 11226 11227 11228 11229 11230 11231 11232 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11233 11234 11235 11236 11237 11238 11239 11240 11241 11242 11243 11244 11245 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11246 11247 11248 11249 11250 11251 11252 11253 11254 11255 11256 11257 11258 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11259 11260 11261 11262 11263 11264 11265 11266 11267 11268 11269 11270 11271 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11272 11273 11274 11275 11276 11277 11278 11279 11280 11281 11282 11283 11284 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11285 11286 11287 11288 11289 11290 11291 11292 11293 11294 11295 11296 11297 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11298 11299 11300 11301 11302 11303 11304 11305 11306 11307 11308 11309 11310 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11311 11312 11313 11314 11315 11316 11317 11318 11319 11320 11321 11322 11323 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11324 11325 11326 11327 11328 11329 11330 11331 11332 11333 11334 11335 11336 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11337 11338 11339 11340 11341 11342 11343 11344 11345 11346 11347 11348 11349 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11350 11351 11352 11353 11354 11355 11356 11357 11358 11359 11360 11361 11362 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11363 11364 11365 11366 11367 11368 11369 11370 11371 11372 11373 11374 11375 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11376 11377 11378 11379 11380 11381 11382 11383 11384 11385 11386 11387 11388 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11389 11390 11391 11392 11393 11394 11395 11396 11397 11398 11399 11400 11401 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11402 11403 11404 11405 11406 11407 11408 11409 11410 11411 11412 11413 11414 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11415 11416 11417 11418 11419 11420 11421 11422 11423 11424 11425 11426 11427 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11428 11429 11430 11431 11432 11433 11434 11435 11436 11437 11438 11439 11440 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11441 11442 11443 11444 11445 11446 11447 11448 11449 11450 11451 11452 11453 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11454 11455 11456 11457 11458 11459 11460 11461 11462 11463 11464 11465 11466 \n    1     1     2     2     1     1     1     1     1     1     1     1     1 \n11467 11468 11469 11470 11471 11472 11473 11474 11475 11476 11477 11478 11479 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11480 11481 11482 11483 11484 11485 11486 11487 11488 11489 11490 11491 11492 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11493 11494 11495 11496 11497 11498 11499 11500 11501 11502 11503 11504 11505 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11506 11507 11508 11509 11510 11511 11512 11513 11514 11515 11516 11517 11518 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11519 11520 11521 11522 11523 11524 11525 11526 11527 11528 11529 11530 11531 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11532 11533 11534 11535 11536 11537 11538 11539 11540 11541 11542 11543 11544 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11545 11546 11547 11548 11549 11550 11551 11552 11553 11554 11555 11556 11557 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11558 11559 11560 11561 11562 11563 11564 11565 11566 11567 11568 11569 11570 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11571 11572 11573 11574 11575 11576 11577 11578 11579 11580 11581 11582 11583 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11584 11585 11586 11587 11588 11589 11590 11591 11592 11593 11594 11595 11596 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11597 11598 11599 11600 11601 11602 11603 11604 11605 11606 11607 11608 11609 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11610 11611 11612 11613 11614 11615 11616 11617 11618 11619 11620 11621 11622 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11623 11624 11625 11626 11627 11628 11629 11630 11631 11632 11633 11634 11635 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11636 11637 11638 11639 11640 11641 11642 11643 11644 11645 11646 11647 11648 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11649 11650 11651 11652 11653 11654 11655 11656 11657 11658 11659 11660 11661 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11662 11663 11664 11665 11666 11667 11668 11669 11670 11671 11672 11673 11674 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11675 11676 11677 11678 11679 11680 11681 11682 11683 11684 11685 11686 11687 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11688 11689 11690 11691 11692 11693 11694 11695 11696 11697 11698 11699 11700 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11701 11702 11703 11704 11705 11706 11707 11708 11709 11710 11711 11712 11713 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11714 11715 11716 11717 11718 11719 11720 11721 11722 11723 11724 11725 11726 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11727 11728 11729 11730 11731 11732 11733 11734 11735 11736 11737 11738 11739 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11740 11741 11742 11743 11744 11745 11746 11747 11748 11749 11750 11751 11752 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11753 11754 11755 11756 11757 11758 11759 11760 11761 11762 11763 11764 11765 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11766 11767 11768 11769 11770 11771 11772 11773 11774 11775 11776 11777 11778 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11779 11780 11781 11782 11783 11784 11785 11786 11787 11788 11789 11790 11791 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11792 11793 11794 11795 11796 11797 11798 11799 11800 11801 11802 11803 11804 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11805 11806 11807 11808 11809 11810 11811 11812 11813 11814 11815 11816 11817 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11818 11819 11820 11821 11822 11823 11824 11825 11826 11827 11828 11829 11830 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11831 11832 11833 11834 11835 11836 11837 11838 11839 11840 11841 11842 11843 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11844 11845 11846 11847 11848 11849 11850 11851 11852 11853 11854 11855 11856 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11857 11858 11859 11860 11861 11862 11863 11864 11865 11866 11867 11868 11869 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11870 11871 11872 11873 11874 11875 11876 11877 11878 11879 11880 11881 11882 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11883 11884 11885 11886 11887 11888 11889 11890 11891 11892 11893 11894 11895 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11896 11897 11898 11899 11900 11901 11902 11903 11904 11905 11906 11907 11908 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11909 11910 11911 11912 11913 11914 11915 11916 11917 11918 11919 11920 11921 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11922 11923 11924 11925 11926 11927 11928 11929 11930 11931 11932 11933 11934 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11935 11936 11937 11938 11939 11940 11941 11942 11943 11944 11945 11946 11947 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11948 11949 11950 11951 11952 11953 11954 11955 11956 11957 11958 11959 11960 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11961 11962 11963 11964 11965 11966 11967 11968 11969 11970 11971 11972 11973 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11974 11975 11976 11977 11978 11979 11980 11981 11982 11983 11984 11985 11986 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n11987 11988 11989 11990 11991 11992 11993 11994 11995 11996 11997 11998 11999 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12000 12001 12002 12003 12004 12005 12006 12007 12008 12009 12010 12011 12012 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12013 12014 12015 12016 12017 12018 12019 12020 12021 12022 12023 12024 12025 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12026 12027 12028 12029 12030 12031 12032 12033 12034 12035 12036 12037 12038 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12039 12040 12041 12042 12043 12044 12045 12046 12047 12048 12049 12050 12051 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12052 12053 12054 12055 12056 12057 12058 12059 12060 12061 12062 12063 12064 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12065 12066 12067 12068 12069 12070 12071 12072 12073 12074 12075 12076 12077 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12078 12079 12080 12081 12082 12083 12084 12085 12086 12087 12088 12089 12090 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12091 12092 12093 12094 12095 12096 12097 12098 12099 12100 12101 12102 12103 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12104 12105 12106 12107 12108 12109 12110 12111 12112 12113 12114 12115 12116 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12117 12118 12119 12120 12121 12122 12123 12124 12125 12126 12127 12128 12129 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12130 12131 12132 12133 12134 12135 12136 12137 12138 12139 12140 12141 12142 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12143 12144 12145 12146 12147 12148 12149 12150 12151 12152 12153 12154 12155 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12156 12157 12158 12159 12160 12161 12162 12163 12164 12165 12166 12167 12168 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12169 12170 12171 12172 12173 12174 12175 12176 12177 12178 12179 12180 12181 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12182 12183 12184 12185 12186 12187 12188 12189 12190 12191 12192 12193 12194 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12195 12196 12197 12198 12199 12200 12201 12202 12203 12204 12205 12206 12207 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12208 12209 12210 12211 12212 12213 12214 12215 12216 12217 12218 12219 12220 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12221 12222 12223 12224 12225 12226 12227 12228 12229 12230 12231 12232 12233 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12234 12235 12236 12237 12238 12239 12240 12241 12242 12243 12244 12245 12246 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12247 12248 12249 12250 12251 12252 12253 12254 12255 12256 12257 12258 12259 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12260 12261 12262 12263 12264 12265 12266 12267 12268 12269 12270 12271 12272 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12273 12274 12275 12276 12277 12278 12279 12280 12281 12282 12283 12284 12285 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12286 12287 12288 12289 12290 12291 12292 12293 12294 12295 12296 12297 12298 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12299 12300 12301 12302 12303 12304 12305 12306 12307 12308 12309 12310 12311 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12312 12313 12314 12315 12316 12317 12318 12319 12320 12321 12322 12323 12324 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12325 12326 12327 12328 12329 12330 12331 12332 12333 12334 12335 12336 12337 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12338 12339 12340 12341 12342 12343 12344 12345 12346 12347 12348 12349 12350 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12351 12352 12353 12354 12355 12356 12357 12358 12359 12360 12361 12362 12363 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12364 12365 12366 12367 12368 12369 12370 12371 12372 12373 12374 12375 12376 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12377 12378 12379 12380 12381 12382 12383 12384 12385 12386 12387 12388 12389 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12390 12391 12392 12393 12394 12395 12396 12397 12398 12399 12400 12401 12402 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12403 12404 12405 12406 12407 12408 12409 12410 12411 12412 12413 12414 12415 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12416 12417 12418 12419 12420 12421 12422 12423 12424 12425 12426 12427 12428 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12429 12430 12431 12432 12433 12434 12435 12436 12437 12438 12439 12440 12441 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12442 12443 12444 12445 12446 12447 12448 12449 12450 12451 12452 12453 12454 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12455 12456 12457 12458 12459 12460 12461 12462 12463 12464 12465 12466 12467 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12468 12469 12470 12471 12472 12473 12474 12475 12476 12477 12478 12479 12480 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12481 12482 12483 12484 12485 12486 12487 12488 12489 12490 12491 12492 12493 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12494 12495 12496 12497 12498 12499 12500 12501 12502 12503 12504 12505 12506 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12507 12508 12509 12510 12511 12512 12513 12514 12515 12516 12517 12518 12519 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12520 12521 12522 12523 12524 12525 12526 12527 12528 12529 12530 12531 12532 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12533 12534 12535 12536 12537 12538 12539 12540 12541 12542 12543 12544 12545 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12546 12547 12548 12549 12550 12551 12552 12553 12554 12555 12556 12557 12558 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12559 12560 12561 12562 12563 12564 12565 12566 12567 12568 12569 12570 12571 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12572 12573 12574 12575 12576 12577 12578 12579 12580 12581 12582 12583 12584 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12585 12586 12587 12588 12589 12590 12591 12592 12593 12594 12595 12596 12597 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12598 12599 12600 12601 12602 12603 12604 12605 12606 12607 12608 12609 12610 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12611 12612 12613 12614 12615 12616 12617 12618 12619 12620 12621 12622 12623 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12624 12625 12626 12627 12628 12629 12630 12631 12632 12633 12634 12635 12636 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12637 12638 12639 12640 12641 12642 12643 12644 12645 12646 12647 12648 12649 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12650 12651 12652 12653 12654 12655 12656 12657 12658 12659 12660 12661 12662 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12663 12664 12665 12666 12667 12668 12669 12670 12671 12672 12673 12674 12675 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12676 12677 12678 12679 12680 12681 12682 12683 12684 12685 12686 12687 12688 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12689 12690 12691 12692 12693 12694 12695 12696 12697 12698 12699 12700 12701 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12702 12703 12704 12705 12706 12707 12708 12709 12710 12711 12712 12713 12714 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12715 12716 12717 12718 12719 12720 12721 12722 12723 12724 12725 12726 12727 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12728 12729 12730 12731 12732 12733 12734 12735 12736 12737 12738 12739 12740 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12741 12742 12743 12744 12745 12746 12747 12748 12749 12750 12751 12752 12753 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12754 12755 12756 12757 12758 12759 12760 12761 12762 12763 12764 12765 12766 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12767 12768 12769 12770 12771 12772 12773 12774 12775 12776 12777 12778 12779 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12780 12781 12782 12783 12784 12785 12786 12787 12788 12789 12790 12791 12792 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12793 12794 12795 12796 12797 12798 12799 12800 12801 12802 12803 12804 12805 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12806 12807 12808 12809 12810 12811 12812 12813 12814 12815 12816 12817 12818 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12819 12820 12821 12822 12823 12824 12825 12826 12827 12828 12829 12830 12831 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12832 12833 12834 12835 12836 12837 12838 12839 12840 12841 12842 12843 12844 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12845 12846 12847 12848 12849 12850 12851 12852 12853 12854 12855 12856 12857 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12858 12859 12860 12861 12862 12863 12864 12865 12866 12867 12868 12869 12870 \n    1     1     1     1     1     1     1     1     1     2     2     1     1 \n12871 12872 12873 12874 12875 12876 12877 12878 12879 12880 12881 12882 12883 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12884 12885 12886 12887 12888 12889 12890 12891 12892 12893 12894 12895 12896 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12897 12898 12899 12900 12901 12902 12903 12904 12905 12906 12907 12908 12909 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12910 12911 12912 12913 12914 12915 12916 12917 12918 12919 12920 12921 12922 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12923 12924 12925 12926 12927 12928 12929 12930 12931 12932 12933 12934 12935 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12936 12937 12938 12939 12940 12941 12942 12943 12944 12945 12946 12947 12948 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12949 12950 12951 12952 12953 12954 12955 12956 12957 12958 12959 12960 12961 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12962 12963 12964 12965 12966 12967 12968 12969 12970 12971 12972 12973 12974 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12975 12976 12977 12978 12979 12980 12981 12982 12983 12984 12985 12986 12987 \n    1     1     1     1     1     1     1     1     1     1     1     1     1 \n12988 12989 \n    1     1 \n\n\n\nsum(multiplicity(acc_ppp) &gt; 1)\n\n[1] 15\n\n\nThe output shows there are 15 duplicate point events (Accidents).\n\n\n\n\n\n\nTreatment of duplicates\n\n\n\n\nWe will use jittering approach to add a small perturbation to the duplicate points so that they do not occupy the exact same space.\nThe reason to use this approach is because we do not want to delete any accidents that overlaps in the same area.\n\n\n\n\naccBMR_ppp_jit &lt;- rjitter(accBMR_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\n\n\nany(duplicated(accBMR_ppp_jit))\n\n[1] FALSE\n\n\n\nplot(accBMR_ppp_jit)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\n\nNotably, the plot of accBMR_ppp_jit represents road network within the BMR area, since the accidents can only happen along the road network, and not outside of it."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#overview",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to compute Global Measures of Spatial Autocorrelation (GMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Global Spatial Autocorrelation (GSA) statistics by using appropriate functions of spdep package,\n\nplot Moran scatterplot,\ncompute and plot spatial correlogram using appropriate function of spdep package.\n\nprovide statistically correct interpretation of GSA statistics."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#getting-started",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.2 Getting Started",
    "text": "9.2 Getting Started\n\n9.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local government and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.\n\n\n9.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n9.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#getting-the-data-into-r-environment",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#getting-the-data-into-r-environment",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.3 Getting the Data Into R Environment",
    "text": "9.3 Getting the Data Into R Environment\nIn this section, you will learn how to bring a geospatial data and its associated attribute table into R environment. The geospatial data is in ESRI shapefile format and the attribute table is in csv fomat.\n\n9.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nShow the code\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex05a\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n9.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n9.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n9.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.4 Global Measures of Spatial Autocorrelation",
    "text": "9.4 Global Measures of Spatial Autocorrelation\nIn this section, you will learn how to compute global spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.\n\n9.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the global spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\nShow the code\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n9.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation-morans-i",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation-morans-i",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I",
    "text": "9.5 Global Measures of Spatial Autocorrelation: Moran’s I\nIn this section, you will learn how to perform Moran’s I statistics testing by using moran.test() of spdep.\n\n9.5.1 Maron’s I test\nThe code chunk below performs Moran’s I statistical testing using moran.test() of spdep.\n\n\nShow the code\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\n\n\n9.5.2 Computing Monte Carlo Moran’s I\nThe code chunk below performs permutation test for Moran’s I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.\n\n\nShow the code\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n9.5.3 Visualising Monte Carlo Moran’s I\nIt is always a good practice for us the examine the simulated Moran’s I test statistics in greater detail. This can be achieved by plotting the distribution of the statistical values as a histogram by using the code chunk below.\nIn the code chunk below hist() and abline() of R Graphics are used.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] -0.01504572\n\n\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.004371574\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\n\n\n\nShow the code\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\n\n\n\nShow the code\ndata &lt;- data.frame(Simulated_I = bperm$res)\n\nggplot(data, aes(x = Simulated_I)) +\n  geom_histogram(bins = 20, \n                 fill = \"lightblue\", \n                 color = \"black\") +  \n  geom_vline(xintercept = 0, \n             color = \"red\", \n             linetype = \"dashed\", \n             size = 1) + \n  labs(x = \"Simulated Moran's I\", \n       y = \"Frequency\", \n       title = \"Histogram of Simulated Moran's I Values\") +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#global-measures-of-spatial-autocorrelation-gearys-c",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.6 Global Measures of Spatial Autocorrelation: Geary’s C",
    "text": "9.6 Global Measures of Spatial Autocorrelation: Geary’s C\nIn this section, you will learn how to perform Geary’s C statistics testing by using appropriate functions of spdep package.\n\n9.6.1 Geary’s C test\nThe code chunk below performs Geary’s C test for spatial autocorrelation by using geary.test() of spdep.\n\n\nShow the code\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\n\n\n9.6.2 Computing Monte Carlo Geary’s C\nThe code chunk below performs permutation test for Geary’s C statistic by using geary.mc() of spdep.\n\n\nShow the code\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\n\n\n\n9.6.3 Visualising the Monte Carlo Geary’s C\nNext, we will plot a histogram to reveal the distribution of the simulated values by using the code chunk below.\n\n\nShow the code\nmean(bperm$res[1:999])\n\n\n[1] 1.004402\n\n\n\n\nShow the code\nvar(bperm$res[1:999])\n\n\n[1] 0.007436493\n\n\n\n\nShow the code\nsummary(bperm$res[1:999])\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\n\n\n\nShow the code\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\")"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#spatial-correlogram",
    "href": "Hands-on Exercise/Hands-on_Ex05a/Hands-on_Ex05a.html#spatial-correlogram",
    "title": "9 Global Measures of Spatial Autocorrelation",
    "section": "9.7 Spatial Correlogram",
    "text": "9.7 Spatial Correlogram\nSpatial correlograms are great to examine patterns of spatial autocorrelation in your data or model residuals. They show how correlated are pairs of spatial observations when you increase the distance (lag) between them - they are plots of some index of autocorrelation (Moran’s I or Geary’s c) against distance.Although correlograms are not as fundamental as variograms (a keystone concept of geostatistics), they are very useful as an exploratory and descriptive tool. For this purpose they actually provide richer information than variograms.\n\n9.7.1 Compute Moran’s I correlogram\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Moran’s I. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\n\n\nBy plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant. Hence, it is important for us to examine the full analysis report by printing out the analysis results as in the code chunk below.\n\n\nShow the code\nprint(MI_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\n9.7.2 Compute Geary’s C correlogram and plot\nIn the code chunk below, sp.correlogram() of spdep package is used to compute a 6-lag spatial correlogram of GDPPC. The global spatial autocorrelation used in Geary’s C. The plot() of base Graph is then used to plot the output.\n\n\nShow the code\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\n\n\nSimilar to the previous step, we will print out the analysis report by using the code chunk below.\n\n\nShow the code\nprint(GC_corr)\n\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example are Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#overview",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#overview",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "",
    "text": "Local Measures of Spatial Autocorrelation (LMSA) focus on the relationships between each observation and its surroundings, rather than providing a single summary of these relationships across the map. In this sense, they are not summary statistics but scores that allow us to learn more about the spatial structure in our data. The general intuition behind the metrics however is similar to that of global ones. Some of them are even mathematically connected, where the global version can be decomposed into a collection of local ones. One such example are Local Indicators of Spatial Association (LISA). Beside LISA, Getis-Ord’s Gi-statistics will be introduce as an alternative LMSA statistics that present complementary information or allow us to obtain similar insights for geographically referenced data.\nIn this hands-on exercise, you will learn how to compute Local Measures of Spatial Autocorrelation (LMSA) by using spdep package. By the end to this hands-on exercise, you will be able to:\n\nimport geospatial data using appropriate function(s) of sf package,\nimport csv file using appropriate function of readr package,\nperform relational join using appropriate join function of dplyr package,\ncompute Local Indicator of Spatial Association (LISA) statistics for detecting clusters and outliers by using appropriate functions spdep package;\ncompute Getis-Ord’s Gi-statistics for detecting hot spot or/and cold spot area by using appropriate functions of spdep package; and\nto visualise the analysis output by using tmap package."
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#getting-started",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#getting-started",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "10.2 Getting Started",
    "text": "10.2 Getting Started\n\n10.2.1 The analytical question\nIn spatial policy, one of the main development objective of the local govenment and planners is to ensure equal distribution of development in the province. Our task in this study, hence, is to apply appropriate spatial statistical methods to discover if development are even distributed geographically. If the answer is No. Then, our next question will be “is there sign of spatial clustering?”. And, if the answer for this question is yes, then our next question will be “where are these clusters?”\nIn this case study, we are interested to examine the spatial pattern of a selected development indicator (i.e. GDP per capita) of Hunan Provice, People Republic of China.(https://en.wikipedia.org/wiki/Hunan)\n\n\n10.2.2 The Study Area and Data\nTwo data sets will be used in this hands-on exercise, they are:\n\nHunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.\nHunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.\n\n\n\n10.2.3 Setting the Analytical Toolls\nBefore we get started, we need to ensure that spdep, sf, tmap and tidyverse packages of R are currently installed in your R.\n\nsf is use for importing and handling geospatial data in R,\ntidyverse is mainly use for wrangling attribute data in R,\nspdep will be used to compute spatial weights, global and local spatial autocorrelation statistics, and\ntmap will be used to prepare cartographic quality chropleth map.\n\nThe code chunk below is used to perform the following tasks:\n\ncreating a package list containing the necessary R packages,\nchecking if the R packages in the package list have been installed in R,\n\nif they have yet to be installed, RStudio will installed the missing packages,\n\nlaunching the packages into R environment.\n\n\n\nShow the code\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n10.3.1 Import shapefile into r environment\nThe code chunk below uses st_read() of sf package to import Hunan shapefile into R. The imported shapefile will be simple features Object of sf.\n\n\nShow the code\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\Hands-on Exercise\\Hands-on_Ex05b\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n10.3.2 Import csv file into r environment\nNext, we will import Hunan_2012.csv into R by using read_csv() of readr package. The output is R data frame class.\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\n10.3.3 Performing relational join\nThe code chunk below will be used to update the attribute table of hunan’s SpatialPolygonsDataFrame with the attribute fields of hunan2012 dataframe. This is performed by using left_join() of dplyr package.\n\n\nShow the code\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  select(1:4, 7, 15)\n\n\n\n\n10.3.4 Visualising Regional Development Indicator\nNow, we are going to prepare a basemap and a choropleth map showing the distribution of GDPPC 2012 by using qtm() of tmap package.\n\n\nShow the code\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#local-indicators-of-spatial-associationlisa",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#local-indicators-of-spatial-associationlisa",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "10.4 Local Indicators of Spatial Association(LISA)",
    "text": "10.4 Local Indicators of Spatial Association(LISA)\nLocal Indicators of Spatial Association or LISA are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. For instance if we are studying distribution of GDP per capita of Hunan Provice, People Republic of China, local clusters in GDP per capita mean that there are counties that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\nIn this section, you will learn how to apply appropriate Local Indicators for Spatial Association (LISA), especially local Moran’I to detect cluster and/or outlier from GDP per capita 2012 of Hunan Province, PRC.\n\n10.4.1 Computing Contiguity Spatial Weights\nBefore we can compute the local spatial autocorrelation statistics, we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units (i.e. county) in the study area.\nIn the code chunk below, poly2nb() of spdep package is used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. If you look at the documentation you will see that you can pass a “queen” argument that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.\nMore specifically, the code chunk below is used to compute Queen contiguity weight matrix.\n\n\nShow the code\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nThe summary report above shows that there are 88 area units in Hunan. The most connected area unit has 11 neighbours. There are two area units with only one neighbours.\n\n\n10.4.2 Row-standardised weights matrix\nNext, we need to assign weights to each neighboring polygon. In our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data. For this example, we’ll stick with the style=“W” option for simplicity’s sake but note that other more robust options are available, notably style=“B”.\n\n\nShow the code\nrswm_q &lt;- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\n\n\n\n\n\n\n\nWhat can we learn from the code chunk above?\n\n\n\n\nThe input of nb2listw() must be an object of class nb. The syntax of the function has two major arguments, namely style and zero.poly.\nstyle can take values “W”, “B”, “C”, “U”, “minmax” and “S”. B is the basic binary coding, W is row standardised (sums over all links to n), C is globally standardised (sums over all links to n), U is equal to C divided by the number of neighbours (sums over all links to unity), while S is the variance-stabilizing coding scheme proposed by Tiefelsdorf et al. 1999, p. 167-168 (sums over all links to n).\nIf zero policy is set to TRUE, weights vectors of zero length are inserted for regions without neighbour in the neighbours list. These will in turn generate lag values of zero, equivalent to the sum of products of the zero row t(rep(0, length=length(neighbours))) %*% x, for arbitrary numerical vector x of length length(neighbours). The spatially lagged value of x for the zero-neighbour region will then be zero, which may (or may not) be a sensible choice.\n\n\n\n\n\n10.4.3 Computing local Moran’s I\nTo compute local Moran’s I, the localmoran() function of spdep will be used. It computes Ii values, given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nThe code chunks below are used to compute local Moran’s I of GDPPC2012 at the county level.\n\n\nShow the code\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nThe code chunk below list the content of the local Moran matrix derived by using printCoefmat().\n\n\nShow the code\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n10.4.3.1 Mapping the local Moran’s I\nBefore mapping the local Moran’s I map, it is wise to append the local Moran’s I dataframe (i.e. localMI) onto hunan SpatialPolygonDataFrame. The code chunks below can be used to perform the task. The out SpatialPolygonDataFrame is called hunan.localMI.\n\n\nShow the code\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\n\n\n\n10.4.3.2 Mapping local Moran’s I values\nUsing choropleth mapping functions of tmap package, we can plot the local Moran’s I values by using the code chinks below.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n10.4.3.3 Mapping local Moran’s I p-values\nThe choropleth shows there is evidence for both positive and negative Ii values. However, it is useful to consider the p-values for each of these values, as consider above.\nThe code chunks below produce a choropleth map of Moran’s I p-values by using functions of tmap package.\n\n\nShow the code\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\n10.4.3.4 Mapping both local Moran’s I values and p-values\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nShow the code\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#creating-a-lisa-cluster-map",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#creating-a-lisa-cluster-map",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "10.5 Creating a LISA Cluster Map",
    "text": "10.5 Creating a LISA Cluster Map\nThe LISA Cluster Map shows the significant locations color coded by type of spatial autocorrelation. The first step before we can generate the LISA cluster map is to plot the Moran scatterplot.\n\n10.5.1 Plotting Moran scatterplot\nThe Moran scatterplot is an illustration of the relationship between the values of the chosen attribute at each location and the average value of the same attribute at neighboring locations.\nThe code chunk below plots the Moran scatterplot of GDPPC 2012 by using moran.plot() of spdep.\n\n\nShow the code\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lag GDPPC 2012\")\n\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner belongs to areas that have high GDPPC and are surrounded by other areas that have the average level of GDPPC. This are the high-high locations in the lesson slide.\n\n\n10.5.2 Plotting Moran scatterplot with standardised variable\nFirst we will use scale() to centers and scales the variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\n\nShow the code\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n\n\nThe as.vector() added to the end is to make sure that the data type we get out of this is a vector, that map neatly into out dataframe.\nNow, we are ready to plot the Moran scatterplot again by using the code chunk below.\n\n\nShow the code\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\n\n10.5.3 Preparing LISA map classes\nThe code chunks below show the steps to prepare a LISA cluster map.\n\n\nShow the code\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\n\nNext, derives the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\n\nShow the code\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\n\nThis is follow by centering the local Moran’s around the mean.\n\n\nShow the code\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\n\nNext, we will set a statistical significance level for the local Moran.\n\n\nShow the code\nsignif &lt;- 0.05       \n\n\nThese four command lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\n\nShow the code\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\n\nLastly, places non-significant Moran in the category 0.\n\n\nShow the code\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\nIn fact, we can combined all the steps into one single code chunk as shown below:\n\n\nShow the code\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \nLM_I &lt;- localMI[,1]   \nsignif &lt;- 0.05       \nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\n\n10.5.4 Plotting LISA map\nNow, we can build the LISA map by using the code chunks below.\n\n\nShow the code\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\nThe code chunk below will be used to create such visualisation.\n\n\nShow the code\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\nWe can also include the local Moran’s I map and p-value map as shown below for easy comparison.\n\n\nShow the code\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#hot-spot-and-cold-spot-area-analysis",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#hot-spot-and-cold-spot-area-analysis",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "10.6 Hot Spot and Cold Spot Area Analysis",
    "text": "10.6 Hot Spot and Cold Spot Area Analysis\nBeside detecting cluster and outliers, localised spatial statistics can be also used to detect hot spot and/or cold spot areas.\nThe term ‘hot spot’ has been used generically across disciplines to describe a region or value that is higher relative to its surroundings (Lepers et al 2005, Aben et al 2012, Isobe et al 2015).\n\n10.6.1 Getis and Ord’s G-Statistics\nAn alternative spatial statistics to detect spatial anomalies is the Getis and Ord’s G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.\nThe analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\n\n10.6.2 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.\nThere are two type of distance-based proximity matrix, they are:\n\nfixed distance weight matrix; and\nadaptive distance weight matrix.\n\n\n10.6.2.1 Deriving the centroid\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\nShow the code\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\n\nShow the code\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\nShow the code\ncoords &lt;- cbind(longitude, latitude)\n\n\n\n\n10.6.2.2 Determine the cut-off distance\nFirstly, we need to determine the upper limit for distance band by using the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using knearneigh() of spdep.\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using knn2nb().\nReturn the length of neighbour relationship edges by using nbdists() of spdep. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.\nRemove the list structure of the returned object by using unlist().\n\n\n\nShow the code\n#coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\n10.6.2.3 Computing fixed distance weight matrix\nNow, we will compute the distance weight matrix by using dnearneigh() as shown in the code chunk below.\n\n\nShow the code\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nShow the code\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\nThe output spatial weights object is called wm62_lw.\n\n\n\n10.6.3 Computing adaptive distance weight matrix\nOne of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code chunk below.\n\n\nShow the code\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\n\nNext, nb2listw() is used to convert the nb object into spatial weights object.\n\n\nShow the code\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014"
  },
  {
    "objectID": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#computing-gi-statistics",
    "href": "Hands-on Exercise/Hands-on_Ex05b/Hands-on_Ex05b.html#computing-gi-statistics",
    "title": "10 Local Measures of Spatial Autocorrelation",
    "section": "10.7 Computing Gi statistics",
    "text": "10.7 Computing Gi statistics\n\n10.7.1 Gi statistics using fixed distance\n\n\nShow the code\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe output of localG() is a vector of G or Gstar values, with attributes “gstari” set to TRUE or FALSE, “call” set to the function call, and class “localG”.\nThe Gi statistics is represented as a Z-score. Greater values represent a greater intensity of clustering and the direction (positive or negative) indicates high or low clusters.\nNext, we will join the Gi values to their corresponding hunan sf data frame by using the code chunk below.\n\n\nShow the code\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\nIn fact, the code chunk above performs three tasks. First, it convert the output vector (i.e. gi.fixed) into r matrix object by using as.matrix(). Next, cbind() is used to join hunan@data and gi.fixed matrix to produce a new SpatialPolygonDataFrame called hunan.gi. Lastly, the field name of the gi values is renamed to gstat_fixed by using rename().\n\n\n10.7.2 Mapping Gi values with fixed distance weights\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\nShow the code\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\n10.7.3 Gi statistics using adaptive distance\nThe code chunk below are used to compute the Gi values for GDPPC2012 by using an adaptive distance weight matrix (i.e knb_lw).\n\n\nShow the code\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\n\n10.7.4 Mapping Gi values with adaptive distance weights\nIt is time for us to visualise the locations of hot spot and cold spot areas. The choropleth mapping functions of tmap package will be used to map the Gi values.\nThe code chunk below shows the functions used to map the Gi values derived using fixed distance weight matrix.\n\n\nShow the code\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "",
    "text": "“Everything is related to everything else, but near things are more related than distant things.”"
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#measures-of-global-spatial-autocorrelation",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#measures-of-global-spatial-autocorrelation",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "1.0 Measures of Global Spatial Autocorrelation",
    "text": "1.0 Measures of Global Spatial Autocorrelation\n\n1.1 Moran’s I\nDescribe how features differ from the values in the study area as a whole.\n\nxi = observed value\nx-bar = whole study area\nxj = neighbour (affected by weight, Wij)\n\nMoran I (Z value) is:\n\npositive (I&gt;0): Clustered, observations tend to be similar;\nnegative(I&lt;0): Dispersed, observations tend to be dissimilar;\napproximately zero: observations are arranged randomly over space."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#gearys-c",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#gearys-c",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "1.2 Geary’s c",
    "text": "1.2 Geary’s c\nDescribing how features differ from their immediate neighbours.\n\n\nGeary c (Z value) is:\n\nLarge c value (&gt;1) : Dispersed, observations tend to be dissimilar;\nSmall c value (&lt;1) : Clustered, observations tend to be similar;\nc = 1: observations are arranged randomly over space."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#measures-of-global-highlow-clustering-getis-ord-global-g",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#measures-of-global-highlow-clustering-getis-ord-global-g",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "Measures of Global High/Low Clustering: Getis-Ord Global G",
    "text": "Measures of Global High/Low Clustering: Getis-Ord Global G\n\nGetis-Ord Global G statistic is concerned with the overall concentration or lack of concentration in all pairs that are neighbours given the definition of neighbouring areas.\nThe variable must contain only positive values to be used.\n\n\n\nG(d) is a distance-based matrix. Do not use contiguity matrix."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#differences-from-lesson-2-3",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#differences-from-lesson-2-3",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "1.3 Differences from lesson 2 & 3",
    "text": "1.3 Differences from lesson 2 & 3\n\nOnly look at point events (accidents) -&gt; spatial point pattern analysis."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#in-class-exercise-with-sfdep",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#in-class-exercise-with-sfdep",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "2.0 In-class Exercise with sfdep",
    "text": "2.0 In-class Exercise with sfdep\n\nsfdep() is based on sf dataframe.\ntidyverse framework.\nsfdep() is wrapper of spdep()\n\n\n2.1 Getting started\nInstalling and Loading the R Packages\n\n\nShow the code\npacman::p_load(sf,\n               sfdep,\n               tmap,\n               tidyverse)\n\n\n\n\nShow the code\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\n\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex05\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nShow the code\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\n\n\n\nShow the code\nhunan &lt;- left_join(hunan,hunan2012) %&gt;%\n  dplyr::select(1:4, 7, 15)\n\n\n\n\nShow the code\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nwm_q &lt;- hunan %&gt;% \n  mutate(nb = st_contiguity(geometry),\n         wt = st_weights(nb,\n                         style = \"W\"),\n         .before = 1)\n\n\n\n\nShow the code\nmoranI &lt;- global_moran_test(wm_q$GDPPC,\n                       wm_q$nb,\n                       wm_q$wt)\n\nglimpse(moranI)\n\n\nList of 6\n $ statistic  : Named num 4.74\n  ..- attr(*, \"names\")= chr \"Moran I statistic standard deviate\"\n $ p.value    : num 1.09e-06\n $ estimate   : Named num [1:3] 0.30075 -0.01149 0.00435\n  ..- attr(*, \"names\")= chr [1:3] \"Moran I statistic\" \"Expectation\" \"Variance\"\n $ alternative: chr \"greater\"\n $ method     : chr \"Moran I test under randomisation\"\n $ data.name  : chr \"x  \\nweights: listw    \\n\"\n - attr(*, \"class\")= chr [1:2] \"htest\" \"list\"\n\n\nUse global Moran I to test for randomisation.\nCheck compare p-value with alpha. If p-value is smaller than alpha, we reject Null hypothesis and there is statistical significance.\nMoran I statistic is 0.300749970, positive."
  },
  {
    "objectID": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#performing-global-moran-i-permutation-test",
    "href": "In-class Exercise/In-class_Ex05/In-class_Ex05.html#performing-global-moran-i-permutation-test",
    "title": "In-class Ex 05: Global and Local Measures of Spatial Autocorrelation:sfdep methods",
    "section": "Performing Global Moran I permutation test",
    "text": "Performing Global Moran I permutation test\nIn practice,\n\n\nShow the code\nset.seed(12345)\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim =99)\n\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n\n\nShow the code\nlisa &lt;- wm_q %&gt;% \n  mutate(local_moran = local_moran(GDPPC,\n                                   nb,wt,\n                                   nsim = 99),\n         .before = 1) %&gt;% \n  unnest(local_moran)\n\n\n\nunnest the table, write back to tibble data frame instead of one object.\n\nVisualising local Moran I and p-value\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"p_ii_sim\") +\n  tm_borders(alpha = 0.5) +\n    tm_layout(main.title = \"p-value of local Moran's I\",\n            main.title.size = 2)\n\n\n\n\n\n\n\n\n\nVisualising local Moran’s I\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n    tm_layout(main.title = \"Local Moran's I of GDPPC\",\n            main.title.size = .9)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_fill(\"ii\") +\n  tm_borders(alpha = 0.5) +\n  tm_view(set.zoom.limits = c(6,8)) +\n    tm_layout(main.title = \"Local Moran's I of GDPPC\",\n            main.title.size = 2)\n\n\n\n\n\n\n\n\n\nLISA Map\n\n\nShow the code\nlisa_sig &lt;- lisa %&gt;% \n  filter(p_ii &lt; 0.05)\n\ntmap_mode(\"plot\")\ntm_shape(lisa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(lisa_sig) +\n  tm_fill(\"mean\") +\n  tm_borders(alpha = 0.4)\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nwm_idw &lt;- hunan_GDPPC %&gt;% \n  mutate(st_contiguity())\n\n\n\n\nShow the code\nHCSA &lt;- wm_idw %&gt;% \n  mutate(local_Gi = local_gstar_perm(\n    GDPPC, nb,wt, nsim =99),\n    .before = 1) %&gt;% \n  unnest(local_Gi)\n\n\n\n\nShow the code\nHCSA_sig &lt;- HCSA %&gt;% \n  filter(p_sim &lt; 0.05)\ntmap_mode(\"plot\")\ntm_shape(HCSA) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(HCSA_sig) +\n  tm_fill(\"cluster\") +\n  tm_borders(alpha = 0.4)"
  }
]