---
title: "Take-home Ex 3: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods"
author: "Liang Xiuhao Rydia"
date: "Nov 10, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## 1.0 Introduction

### **1.1 The Task**

In this take-home exercise, we are required to calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023.

### 1.2 The Data

Below is the list of data used for this take-home exercise. These data are extracted from data.gov.sg and [LTA Data Mall](https://datamall.lta.gov.sg/content/datamall/en/static-data.html). We will be looking at resale flat that are 4-room, for ease of data manipulation. Similar method could be applied for resale HDB of various size.

-   Structural factors (From resale data)

    -   Area of the unit

    -   Floor level

    -   Remaining lease

    -   Age of the unit

    -   Main Upgrading Program (MUP) completed (optional)

-   Locational factors

    -   Proxomity to CBD

    -   Proximity to eldercare

    -   Proximity to foodcourt/hawker centres

    -   Proximity to MRT

    -   Proximity to park

    -   Proximity to good primary school

    -   Proximity to shopping mall

    -   Proximity to supermarket

    -   Numbers of kindergartens within 350m

    -   Numbers of childcare centres within 350m

    -   Numbers of bus stop within 350m

    -   Numbers of primary school within 1km

## 2.0 Importing Data

### 2.1 Setting up the environment

```{r}
pacman::p_load(sf, tmap,
               spdep, tidyverse,
               httr, jsonlite)
```

Importing all the data into the R environment:

1.  Resale data (3-Room Flat)

```{r}
resale <- read_csv("data/rawdata/resale.csv") %>% 
  filter(flat_type == "3 ROOM") %>%
  filter(month >= "2023-01" & month <= "2024-09") %>%
  mutate(address = paste(block,street_name)) %>%
  mutate(remaining_lease_yr = as.integer(
    str_sub(remaining_lease, 0, 2)))%>%
  mutate(remaining_lease_mth = as.integer(
    str_sub(remaining_lease, 9, 11)))
```

Extracting the coords:

```{r}
add_list <- sort(unique(resale$address))
```

```{r}
get_coords <- function(add_list){
  
  # Create a data frame to store all retrieved coordinates
  postal_coords <- data.frame()
    
  for (i in add_list){
    #print(i)

    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',
           query=list(searchVal=i,
                     returnGeom='Y',
                     getAddrDetails='Y'))
    data <- fromJSON(rawToChar(r$content))
    found <- data$found
    res <- data$results
    
    # Create a new data frame for each address
    new_row <- data.frame()
    
    # If single result, append 
    if (found == 1){
      postal <- res$POSTAL 
      lat <- res$LATITUDE
      lng <- res$LONGITUDE
      new_row <- data.frame(address= i, 
                            postal = postal, 
                            latitude = lat, 
                            longitude = lng)
    }
    
    # If multiple results, drop NIL and append top 1
    else if (found > 1){
      # Remove those with NIL as postal
      res_sub <- res[res$POSTAL != "NIL", ]
      
      # Set as NA first if no Postal
      if (nrow(res_sub) == 0) {
          new_row <- data.frame(address= i, 
                                postal = NA, 
                                latitude = NA, 
                                longitude = NA)
      }
      
      else{
        top1 <- head(res_sub, n = 1)
        postal <- top1$POSTAL 
        lat <- top1$LATITUDE
        lng <- top1$LONGITUDE
        new_row <- data.frame(address= i, 
                              postal = postal, 
                              latitude = lat, 
                              longitude = lng)
      }
    }

    else {
      new_row <- data.frame(address= i, 
                            postal = NA, 
                            latitude = NA, 
                            longitude = NA)
    }
    
    # Add the row
    postal_coords <- rbind(postal_coords, new_row)
  }
  return(postal_coords)
}
```

```{r}
coords <- get_coords(add_list)
```

```{r}
write_rds(coords,"data/rds/coords.rds")
```

```{r}
coords <- read_rds("data/rds/coords.rds")
```

```{r}
resale_xy <- left_join(resale, coords,
                       by = "address")
```

```{r}
write_rds(resale_xy, "data/rds/resale_xy.rds")
```
