---
title: "Take-home Ex01"
author: "Liang Xiuhao Rydia"
date: "Sep 2, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

![](images/A_detailed_illustration_of_a_study_on_road_traffic_landscape.jpeg)

## 1.0 Introduction

### 1.1 The Study Area

-   The study area is Bangkok Metropolitan Area.

-   WGS 84 / UTM zone 47N

-   EPSG code 32647

## 1.2 The Datasets

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

::: callout-caution
## On Projection

-   to check on the following:

    -   WGS 84 / UTM zone 47N

    -   EPSG code 32647
:::

## 2.0 Loading Library and Importing Traffic Accident Data

```{r}
pacman::p_load(sf, 
               raster,
               spNetwork,
               tmap, 
               tidyverse)
```

## 3.0 Importing Data

### 3.1 Importing Aspatial Data and Converting it into Spatial Data

Since the `Thailand Road Accident [2019-2022]` is data set is in csv file format, we will use [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) of readr package to import `Thailand Road Accident [2019-2022]`.Following which, we use the pipe function and dplyr::filter() to filter out rows that has "na" or is empty in value. Next, we use st_as_sf to combine the longitude and latitude in the csv file can combine it into "geometry" column. Lastly, we use st_transform to change the Coordinate Reference System (CRS) to 32647, which is Thailand's [ESPG code](https://epsg.io/map#srs=32647&x=769964.9694806639&y=1455180.7056970089&z=5&layer=streets). The output R object is called rdacc_sf and it is a sf data frame.

```{r}
rdacc_sf <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv") %>%
  filter(!is.na(longitude) &longitude != "",
         !is.na(latitude) & latitude != "") %>% 
  st_as_sf(coords = c("longitude", "latitude"),
           crs = 4326) %>% 
  st_transform(crs = 32647)
```

::: callout-note
## Notes on rdacc_sf

-   incident_datetime is datetime format of POSIXct.

-   st_as_sf(coords = c("longitude", "latitude"), crs = 4326) combines and longitude and latitude columns into geometry column

-   Thai projection code is 32647, hence we use this code chunk: st_transform(crs = 32647)

-   Filter is used to remove the longitude and latitude that has na as value.

-   Check what is the number of data lost after removing na. Make sure the study region, the data lost is not significant. (not more than 5% lost)

-   use readr::read_csv() to ensure the data is imported as tibble data frame. Do not use read.csv().

-   Check the data.
:::

### 3.1.1 Wrangling the Date Fields 

Using tidyverse::lubridate

```{r}
rdacc_sf <- rdacc_sf %>% 
  mutate(DayOfWeek = day(incident_datetime)) %>% 
  mutate(Month = month(incident_datetime,
                       label = TRUE,
                       abbr = TRUE))
```

```{r}
write_rds(rdacc_sf, "data/rds/rdacc_sf.rds")
```

::: callout-note
## Lubridate

-   lubridate::month(): label = TRUE -\> change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.
:::

### 3.2 Importing Spatial Data

```{r}

```

## References

News: <https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries>
