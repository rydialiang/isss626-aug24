---
title: "Take-home Ex01"
author: "Liang Xiuhao Rydia"
date: "Sep 2, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

![](images/A_detailed_illustration_of_a_study_on_road_traffic_landscape.jpeg)

## 1.0 Introduction & Objectives

In this Take-Home Exercise 1, we will be discovering factors affecting road traffic accidents in the [Bangkok Metropolitan Region BMR](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) by employing both spatial and spatio-temporal point patterns analysis methods.

The specific objectives of this take-home exercise are as follows:

-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.

-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.

-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.

### 1.1 The Study Area

-   Thailand has four administrative levels:

    -   Level 0 - Country - Whole of Thailand

    -   Level 1 - Provinces (Changwat) - Total: 76 provinces, with Bangkok as special administrative area.

    -   Level 2 - District (Amphoe)

    -   Level 3 - Sub-district (Tambon)

    -   Level 4 - Village (Muban)

-   In this exercise we will focus our analysis on the study area called the [Bangkok Metropolitan Region (BMR)](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region), which consists of [Bangkok](https://en.wikipedia.org/wiki/Bangkok) and its five adjacent provinces, namely [Nakhon Pathom](https://en.wikipedia.org/wiki/Nakhon_Pathom_Province "Nakhon Pathom Province"), [Pathum Thani](#0 "Pathum Thani Province"), [Nonthaburi](#0 "Nonthaburi Province"), [Samut Prakan](#0 "Samut Prakan Province"), and [Samut Sakhon](#0 "Samut Sakhon Province").

-   To confirm the EPSG code for the study area, we can check it on [epsg.io](https://epsg.io/). Enter "Thailand" and we will yield several results under Projected CRS:

    -   [Indian 1954 / UTM zone 46N](https://epsg.io/23946) - EPSG 23946 with transformation: 1153

    -   [Indian 1954 / UTM zone 47N](https://epsg.io/23947) - EPSG 23947 with transformation 1153

    -   [Indian 1954 / UTM zone 48N](https://epsg.io/23948) - EPSG 23948 with transformation 1153

    -   [Indian 1975 / UTM zone 47N](https://epsg.io/24047) - EPSG 24047 with transformation 1812

    -   [Indian 1975 / UTM zone 48N](https://epsg.io/24048) - EPSG 24048 with transformation 1812

    -   [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647

    -   [WGS 84 / UTM zone 48N](https://epsg.io/32648) - EPSG 32648

    -   [WGS 84 / PDC Mercator](https://epsg.io/3832) - EPSG 3832

We will be using Geodetic CRS **WGS 84** as it is a global standard. It leaves us with the last three options. As will click into each result, we will observe that [WGS 84 / PDC Mercator](https://epsg.io/3832) covers wide area of use, and perhaps, more suitable for seafare. Whereas for [WGS 84 / UTM zone 47N](https://epsg.io/32647) and [WGS 84 / UTM zone 48N](https://epsg.io/32648), the area are more precise, defined by the Easting and Northing.

| [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647                                                                                                                                                                                                                                                                                                                                   | [WGS 84 / UTM zone 48N](https://epsg.io/32648) - EPSG 32648                                                                                                                                                                                                                                                                                                                                                            |
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **Area of use:** [Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.](https://epsg.io/?q=Between+96%C2%B0E+and+102%C2%B0E%2C+northern+hemisphere+between+equator+and+84%C2%B0N%2C+onshore+and+offshore.+China.+Indonesia.+Laos.+Malaysia) | **Area of use:** [Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.](https://epsg.io/?q=Between+102%C2%B0E+and+108%C2%B0E%2C+northern+hemisphere+between+equator+and+84%C2%B0N%2C+onshore+and+offshore.+Cambodia.+China.+Indonesia.+Laos.+Malaysia) |

::: callout-important
## Projected CRS

Considering Bangkok's Coordinate (13.7563° N, 100.5018° E), we will use [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647, as its Northing of 13.7563° falls between the Equator and 84°N, and its Easting of 100.5018° falls between 96°E and 102°E, which are both in the area of use as indicated in the table above.
:::

### 1.2 The Datasets

The following datasets are provided as part of the Take Home Exercise 1:

[**Aspatial**]{.underline}

-   [Thailand Road Accident \[2019-2022\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle

    -   This dataset is a list of Thailand Road Accident between 2019 to 2022 in .csv format, where details like province, date/time of accident, cause of accident, type of vehicles and weather conditions are provided. The variables in this dataset will be used for analysis of the factors that contributes to the road traffic accidents.

[**Geospatial**]{.underline}

-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.

    -   This dataset contains all the Thailand Road network which we will use to extract relevant roads within the study area.

-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.

    -   This dataset will be used to set the boundaries for the study area, so as to exclude the data points that are irrelevant for this study.

## 2.0 Setting up the Environment

### 2.1 Installing and loading the required libraries

The code chunk below checks if the packages are installed. If the packages are not yet installed, it will proceed to install and subsequently load the libraries. If the packages are already installed, it will proceed to launch into the R environment.

```{r}
pacman::p_load(knitr,
               leaflet,
               lubridate,
               raster,
               sf,
               spatstat,
               spNetwork,
               tidyverse,
               tmap)
```

| Packages  | Description                                                              |
|-----------|--------------------------------------------------------------------------|
| knitr     | For dynamic report generation                                            |
| leaflet   | For interactive map                                                      |
| lubridate | Functions to work with date-times and time-spans                         |
| raster    | Reading, writing, manipulating, analyzing and modeling of spatial data.  |
| sf        | For importing, managing, ad handling geospatial data                     |
| spatstat  | For Spatial Point Pattern Analysis (SPPA)                                |
| spNetwork | Perform spatial analysis on network                                      |
| tidyverse | For aspatial data wrangling                                              |
| tmap      | For thematic mapping                                                     |

### 2.2 Setting Seeds to Ensure Reproducibility

The set. seed() function is used to set a Random seed which Pseudorandom number generators use when generating "random" numbers. By using this function, we ensure that the randomly generated numbers remain the same when the code are reproduced.

```{r}
set.seed(12345)
```

## 3.0 Importing and Wrangling the Data

### 3.1 Importing Aspatial Data and Converting it into Spatial Data

Importing the data without filtering:

```{r}
#| eval: False
acc <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv")
```

Importing the data, and conducting necessary filter, conversion to sf, transformation of CRS, and get the days component of the `incident_datetime`:

```{r}
#| eval: False
acc_sf <- read_csv("data/rawdata/thai_road_accident_2019_2022.csv") %>%   
  filter(!is.na(longitude) &longitude != "",!is.na(latitude) & latitude != "") %>%    
  st_as_sf(coords = c("longitude", "latitude"),            crs = 4326) %>%    
  st_transform(crs = 32647) %>% 
  mutate(Day = day(incident_datetime)) %>% 
  mutate(Month = month(incident_datetime,
                       label = TRUE,
                       abbr = TRUE)) %>% 
  mutate(Year = year(incident_datetime)) %>% 
  mutate(DaysOfWeek = wday(incident_datetime,
                           week_start = 1)) %>% 
  dplyr::select(c(2,5,7:21))
```

::: callout-note
## Thailand Road Accident \[ 2019-2022\]

-   [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) of readr package to import the data in .csv format as tibble dataframe.

```         
Before proceeding to filter the data, we observe that there is a total of 81,735 observations.

-   ![](images/clipboard-3840017767.png)
```

-   dplyr::filter() to filter out rows that has "na" or is empty in value.

    -   After filtering "na" and empty values, we are left with 81,376 observations. This means that we have lost about 0.44% of the data. This will not affect our analysis as 0.44% a small proportion of the total number of observations. (Rule of Thumb, not \>5% lost)

        ![](images/clipboard-38131559.png)

-   st_as_sf(coords = c("longitude", "latitude"), crs = 4326) combines and longitude and latitude columns into geometry column.

    -   before applying st_as_sf() function, we observe that the latitude and longitude are in decimal degrees, therefore, we assume it is WGS84 datum, with the EPSG code of 4326.

        ![](images/clipboard-1253609898.png)

    -   Notice that the number of variables changed from 18 to 17. This is because st_as_sf() function has combined the longitude and latitude columns in the original dataset into one column name geometry. The columns named longitude and latitude are no longer found in the data.

        ![](images/clipboard-3803839872.png)

-   st_transform() to change the Coordinate Reference System (CRS) to the correct EPSG code of 32647.

-   lubridate() is used to wrangle the incident_datetime, which is in datetime format of POSIXct.

    -   lubridate::month(): label = TRUE -\> change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.

    -   The columns of Day, Month, Year, and DaysOfWeek are created.

        ![](images/clipboard-1275594911.png)

-   Use dplyr::select() to select the relevant columns to retain.

-   The output R object is called acc_sf and it is a sf data frame.
:::

After the wrangling the data, we will save them for future use, using the write_rds() of readr package. The step will help us save time of re-running the codes for importing and wrangling the raw data.

```{r}
#| eval: False
write_rds(acc_sf, "data/rds/acc_sf.rds")
```

We can import the data using the read_rds() of the readr package:

```{r}
acc_sf <- read_rds("data/rds/acc_sf.rds")
```

### 3.2 Importing Spatial Data

#### 3.2.1 Importing the Administrative Boundaries

Importing the [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) using st_read() of sf package. Since we are only interested in the Bangkok Metropolitan Region (BMR) as our study area, we will extract only the six provinces by using filter(). We will use the layer name "tha_admbnda_adm1_rtsd_20220121" as ADM1 refers to the province level boundaries. Note: Thailand administrative level 0 (country), 1 (province), 2 (district), and 3 (sub-district, tambon) boundaries.

```{r}
sab_P <- st_read(dsn = "data/rawdata",
               layer = "tha_admbnda_adm1_rtsd_20220121") %>% filter(ADM1_EN %in% c("Bangkok","Nakhon Pathom", "Pathum Thani", "Nonthaburi", "Samut Prakan", "Samut Sakhon")) %>% 
  st_transform(crs = 32647) 

write_rds(sab_P, "data/rds/sab_P.rds")
```

We will use the following code chunk to take a quick look at selected BMR boundaries.

```{r}
plot(st_geometry(sab_P))
```

Since we are not very familiar with the Thailand map, we may want to double check the correctness by including the label with name of the six province and the coordinates.

```{r}
# setting the colors for each Province
colors = c("Bangkok" = "#FF0000",
           "Nakhon Pathom" = "#55FF00",
           "Pathum Thani" = "#FFAA00",
           "Nonthaburi" = "#0000FF",
           "Samut Prakan" = "#7F00FF",
           "Samut Sakhon" = "#00FFFF")

ggplot(data = sab_P) +
  geom_sf(aes(fill = ADM1_EN)) + 
  scale_fill_manual(values = colors, 
                    name = "Province") +
  geom_text(aes(label = ADM1_EN,
                geometry = geometry), 
            stat = "sf_coordinates", 
            size = 3)
```

If we wish to go to the district-level granularity, we may choose to import the ADM2 layer instead.

```{r}
sab_C <- st_read(dsn = "data/rawdata",
               layer = "tha_admbnda_adm2_rtsd_20220121") %>% filter(ADM1_EN %in% c("Bangkok","Nakhon Pathom", "Pathum Thani", "Nonthaburi", "Samut Prakan", "Samut Sakhon")) %>% 
  st_transform(crs = 32647) 

write_rds(sab_C, "data/rds/sab_C.rds")
```

Similarly, we will use ggplot2() to visualise the using the Level 2 - District (Amphoe) boundaries.

```{r}
ggplot(data = sab_C) +
  geom_sf(aes(fill = ADM1_EN)) +
  scale_fill_manual(values = colors, 
                    name = "Province")
```

::: callout-tip
## Boundaries

-   For creating the boundaries for the study area, ADM1_EN would be sufficient.

-   However, we may want to have ADM2_EN for detailed study for each districts within the BMR.
:::

```{r}
summarise(sab_P)
```

::: callout-important
## WIndow Area / Size of the Area

-   Window Area = 7,668,990,000 square units (m^2^)

    -   converting to km^2^ by dividing it by 1,000,000.

    -   Window Area of BMR = \~7,668.99 km^2^
:::

#### 3.2.2 Importing the Road Networks

In this code chunk, we will import the [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) downloaded from HDX.

```{r}
roads <- st_read(dsn ="data/rawdata",
                 layer = "hotosm_tha_roads_lines_shp") 
```

Assigning EPSG code 4326 as the geometry shows longlat decimal degree between (-180 to 180). Next, we use st_transform() to re-project from Geographic CRS of WGS84 to Projected CRS of UTM Zone 47N.

```{r}
roads_clean <- roads %>% 
  filter(highway %in% c("motorway", "trunk", "primary", "secondary", "tertiary", "unclassified")) %>% 
  st_set_crs(4326) %>%
  st_transform(crs = 32647)
```

Saving road_clean as .rds:

```{r}
#| eval: False
write_rds(roads_clean, "data/rds/roads_clean.rds")
```

```{r}
#| eval: False
sab_P <- read_rds("data/rds/sab_P.rds")
roads_clean <- read_rds("data/rds/roads_clean.rds")

roads_bmr <- st_intersection(sab_P,roads_clean)
```

Saving the roads network in BMR:

```{r}
#| eval: False
write_rds(roads_bmr, "data/rds/roads_bmr.rds")
```

```{r}
roads_bmr <- read_rds("data/rds/roads_bmr.rds")
plot(st_geometry(roads_bmr))
```

#### 3.2.5 Extracting the accidents records within BMR

```{r}
#| eval: False
acc_sf <- read_rds("data/rds/acc_sf.rds")

acc_bmr <- st_intersection(sab_P,acc_sf)
```

Saving the accidents records within BMR:

```{r}
#| eval: False
write_rds(acc_bmr,"data/rds/acc_bmr.rds")
```

### 3.3 Visualising the Geospatial Data

Before jumping into the analysis, we will use plot(), ggplot() and tmap() to take a quick look.

```{r}
sab_C <- read_rds("data/rds/sab_C.rds")
acc_bmr <-read_rds("data/rds/acc_bmr.rds")

plot(st_geometry(roads_bmr),
     col = "grey")
plot(acc_bmr, add = T, 
     col = "red", 
     pch = 19,
     cex = 0.1)
plot(st_geometry(sab_C), add = T)
```

```{r}

highway_color = c("motorway" = "#FF00FF",
           "trunk" = "#00FF00",
           "primary" = "#FFFF00",
           "secondary" = "#0000FF",
           "tertiary" = "#33AABB",
           "unclassified" = "#5500FF")

ggplot() +
  geom_sf(data = sab_C, 
          color = "black",
          size = 1.0) +
  geom_sf(data = roads_bmr, 
          aes(color = highway), 
          size = 1) + 
  geom_sf(data = acc_bmr, 
          color = "red", 
          size = 0.1) + 
  labs(title = "Road Network and Accident Points", 
       x = "Longitude", 
       y = "Latitude") +
  scale_color_manual(values = highway_color) 
```

```{r}

tmap_mode('view')

tm_shape(acc_bmr) + 
  tm_dots(col ="red",
          alpha = 0.5,
          size = 0.1) +
  tm_shape(roads_bmr) +
  tm_lines(col = "highway", 
           palette = highway_color,  
           lwd = 2)

```

```{r}
tmap_mode("plot")
```

Using tmap's view mode to explore, we are able to see that the motorway, primary, secondary and trunk highway types have higher accident records. There is significantly lesser incidents along tertiary and unclassified road.

Since most of the accidents happens in just four categories mentioned, we will further filter the accident data for those that happened in the relevant highway types, so that we can save on computation time.

```{r}
roads_bmr <-read_rds("data/rds/roads_bmr.rds")
roads_bmr_4 <- roads_bmr %>% 
  filter(highway %in% c("motorway", "trunk", "primary", "secondary")) %>% 
  select(3,14,18,19,31)
```

```{r}
write_rds(roads_bmr_4, "data/rds/roads_bmr_4.rds")
```

Instead of using tmap to physically track where are the accidents happening, we can also choose to extract these information from the "route" column in acc_bmr.

### 3.4 Attempted: Converting "route" to "highway" type

Creating a dictionary for Thai-to-English translation. The reference Thai words are drawn from [Thai Highway Classification](https://wiki.openstreetmap.org/wiki/WikiProject_Thailand#Highway_classification).

```{r}
#| eval: False
acc_bmr$route <- str_trim(acc_bmr$route) 
```

```{r}
translation_dict <- c("ทางพิเศษศรีรัชรัช" = "expressway",
                      "ถนนกรุงเทพฯ-ชลบุรีง" = "motorway",
                      "ถนนกาญจนาภิเษกน" = "trunk",
                      "ถนนมิตรภาพค์" = "trunk",
                      "ถนนชยางกูร" = "trunk",
                      "ถนนสุรนารายณ์" = "primary",
                      "ถนนอุบล-ตระการ" = "primary",
                      "ถนนบางกรวย-ไทรน้อย" = "secondary",
                      "ถนนลาดบัวหลวง-ไม้ตรา"= "secondary",
                      "ถนนทุ่งกลม-ตาลหมัน" = "tertiary")
```

```{r}
#| eval: False
acc_bmr$route <- str_trim(acc_bmr$route) 
```

```{r}
#| eval: False
acc_bmr$route <- str_replace_all(acc_bmr$route, translation_dict)
```

```{r}
#| eval: False
grep("สะพานภูมิพลที่", acc_bmr$route)
```

After troubleshooting, the above method did not work as intended. After checking a few route lines using Google Translate, we observe that the route is a description of the route (e.g. Bhumibol II Bridge to Bhumibol I Bridge), rather than the classification of the higway that the accident happened on. Nonetheless, there are certain helpful words to derive the possible highway classification.

## 4.0 Network Constrained Spatial Point Pattern Analysis

### 4.1 Preparing the lixel objects

Before computing NKDE, the SpatialLines object need to be cut into lixels with a specified minimal distance. This task can be performed by using with [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) of **spNetwork** as shown in the code chunk below.

As there some of the geometry in roads_bmr are "MULTILINESTRING", we will not be able to process it using [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) directly. [lixelize_lines()](https://jeremygelb.github.io/spNetwork/reference/lixelize_lines.html) requires the all geometries to be "LINESTRING", thus, we will use st_cast() to cast all the "MULTILINESTRING" into "LINESTRING" geometry.

```{r}
roads_ls <- st_cast(roads_bmr, "LINESTRING")
write_rds(roads_ls, "data/rds/roads_ls.rds")
```

::: callout-tip
## Choosing the cell size

-   recall that Window Area of BMR = \~7,668.99 km^2^

-   we will set the length of each lixel to be 500, which is equals to 500m on the map
:::

```{r}
lixels <- lixelize_lines(roads_ls, 
                         5000, 
                         mindist = 3000)
write_rds(lixels,"data/rds/lixels")
```

### 4.2 Generating line centre points

Next, *lines_center()* of **spNetwork** will be used to generate a SpatialPointsDataFrame (i.e. samples) with line centre points as shown in the code chunk below.

```{r}
samples <- lines_center(lixels) 
write_rds(samples, "data/rds/samples.rds")
```

### 4.3 Performing NKDE

::: callout-note
## NKDE

-   We will use "Simple" method for quick visualisation due to large dataset.
-   We will set bandwidth (bw) as 10,000, which is equivalent to 10km
:::

```{r}
#| eval: False
densities <- nkde(roads_ls, 
                  events = acc_bmr,
                  w = rep(1, nrow(acc_bmr)),
                  samples = samples,
                  kernel_name = "quartic",
                  bw = 20000,
                  div= "bw", 
                  method = "simple", 
                  digits = 1, 
                  tol = 1,
                  grid_shape = c(1,1), 
                  max_depth = 8,
                  agg = 100, 
                  sparse = TRUE,
                  verbose = FALSE)
```

```{r}
#| eval: False
write_rds(densities,"data/rds/densities.rds")
```

#### 4.3.1 Visualising NKDE

```{r}
densities <- read_rds("data/rds/densities.rds")

samples$density <- densities
lixels$density <- densities
```

Rescaling to per 1 kilometers

```{r}
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

Using tmap for visualisation

```{r}

tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(acc_bmr)+
  tm_dots()
tmap_mode('plot')
```

::: callout-note
## Hotspots

-   Hotspot 1 is at the highway along Suvarnabhumi International Airport.

    -   This is one of the busiest areas due to heavy traffic associated with the airport. Possible accident due to tourists who are driving in unfamiliar places.

-   Hotspot 2 is along highway 338, Borommaratchachonnani Rd.

    -   This highway is a major route leading out of Bangkok.

-   Hotspot 3 is along highway 8, Kanchanaphisek Road.

    -   This highway is a major route leading out of Bangkok.
:::

lixels = 5,000, mindist = 3,000.

bw = 10,000

![](images/clipboard-1347560788.png)

### 4.4 **Network Constrained G- and K-Function Analysis**

In this section, we are going to perform complete spatial randomness (CSR) test by using *kfunctions()* of **spNetwork** package. The null hypothesis is defined as:

**Ho: The observed spatial point events (i.e distribution of road accidents) are uniformly distributed over a street network in BMR.**

The CSR test is based on the assumption of the binomial point process which implies the hypothesis that the road accidents are randomly and independently distributed over the street network.

If this hypothesis is rejected, we may infer that the distribution of road accidents are spatially interacting and dependent on each other; as a result, they may form nonrandom patterns.

```{r}
#| eval: False
kfun_acc <- kfunctions(roads_ls, 
                       acc_bmr,
                       start = 0, 
                       end = 1000000, 
                       step = 10000, 
                       width = 10000, 
                       nsim = 50, 
                       resolution = 10,
                       verbose = FALSE, 
                       conf_int = 0.05,
                       agg = 1000)
```

## 5.0 Temporal Network Kernel Density Estimate (TNKDE)

Events recorded on a network often have a temporal dimension. In that context, one could estimate the density of events in both time and network spaces.

The spatio-temporal kernel is calculated as the product of the network kernel density and the time kernel density.

### 5.1 Temporal Dimension

```{r}
acc_bmr <- read_rds("data/rds/acc_bmr.rds")

# converting the Date field to a numeric field (counting days)
acc_bmr$Time <- as.POSIXct(acc_bmr$incident_datetime, format = "%Y/%m/%d")
start <- as.POSIXct("2019/01/01", format = "%Y/%m/%d")

acc_bmr$Time <- difftime(acc_bmr$Time, start, units = "days")
acc_bmr$Time <- as.numeric(acc_bmr$Time)

years <- as.character(2019:2022)
months <- as.character(1:12)
months <- ifelse(nchar(months) == 1, paste0("0", months), months)

months_starts_labs <- expand.grid(years, months)
months_starts_labs <- paste(months_starts_labs$Var1, "/", months_starts_labs$Var2, "/01", sep = "")

months_starts_num <- as.POSIXct(months_starts_labs, format = "%Y/%m/%d")
months_starts_num <- difftime(months_starts_num, start, units = "days")
months_starts_num <- as.numeric(months_starts_num)
months_starts_labs <- gsub("/01","", months_starts_labs)

ggplot(acc_bmr) + 
  geom_histogram(aes(x = Time), bins = 30, color = "white") + 
  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))
```

### 5.1.1 Calculate the kernel density values in time for several bandwidths

```{r}
w <- rep(1,nrow(acc_bmr))
samples <- seq(0, max(acc_bmr$Time), 0.5)

time_kernel_values <- data.frame(
  bw_10 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 10, kernel_name = "quartic"),
  bw_20 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 20, kernel_name = "quartic"),
  bw_30 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 30, kernel_name = "quartic"),
  bw_40 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 40, kernel_name = "quartic"),
  bw_50 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 50, kernel_name = "quartic"),
  bw_60 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 60, kernel_name = "quartic"),
  bw_70 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 70, kernel_name = "quartic"),
  bw_80 = tkde(acc_bmr$Time, w = w, samples = samples, bw = 80, kernel_name = "quartic"),
  time = samples
)

df_time <- reshape2::melt(time_kernel_values,id.vars = "time")
df_time$variable <- as.factor(df_time$variable)

ggplot(data = df_time) + 
  geom_line(aes(x = time, y = value)) +
  scale_x_continuous(breaks = months_starts_num, labels = months_starts_labs) +
  facet_wrap(vars(variable), ncol=2, scales = "free") + 
  theme(axis.text = element_text(size = 5, angle = 90))
  
```

::: callout-important
## Intepreting the tkde()

-   Cyclical pattern - Higher number of road traffic incidents in December period, which is the start of Thailand's peak tourist season.

-   Songkran festival - between 2019 and 2022, we can observe peak in Apr for year 2019, 2021 and 2022 using the bw_10 and bw_20 time series charts. In year 2020, Songkran was officially postponed due to COVID-19.

-   Lowest through - around April-July 2021 (bw_30 to bw_80), which coincides with Thailand's ban on all passengers flights landing in Thailand till July 2021 due to third wave of COVID-19 in the country.
:::

![](images/clipboard-1002896018.png)

Source: <https://ourworldindata.org/coronavirus/country/thailand>

### 5.2 Spatial Dimension

Before considering the spatio-temporal case, we can also investigate the spatial dimension.

```{r}
tm_shape(roads_bmr) + 
  tm_lines(col = "black") + 
  tm_shape(acc_bmr) + 
  tm_dots(col = "red", size = 0.1)
```

```{r}
densities <- read_rds("data/rds/densities.rds")

samples$density <- densities
lixels$density <- densities
samples$density <- samples$density*1000
lixels$density <- lixels$density*1000
```

Plotting with tmap:

```{r}
tmap_mode('view')
tm_shape(lixels)+
  tm_lines(col="density")+
tm_shape(acc_bmr)+
  tm_dots()
tmap_mode('plot')
```

![](images/clipboard-1395387298.png)

### 5.3 Spatio-Temporal

```{r}
#| eval: False
cv_scores <- bw_tnkde_cv_likelihood_calc(
  bw_net_range = c(100,500),
  bw_net_step = 100,
  bw_time_range = c(10,80),
  bw_time_step = 10,
  lines = roads_bmr,
  events = acc_bmr,
  time_field = "Time",
  w = rep(1, nrow(acc_bmr)),
  kernel_name = "quartic",
  method = "simple",
  diggle_correction = FALSE,
  study_area = NULL,
  max_depth = 10,
  digits = 2,
  tol = 0.1,
  agg = 10,
  sparse=TRUE,
  grid_shape=c(1,1),
  sub_sample=1,
  verbose = FALSE,
  check = TRUE)
```

```{r}
#| eval: False
knitr::kable(cv_scores)
```

## References

News: <https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries>
