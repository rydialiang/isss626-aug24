{
  "hash": "5a6418405f0cdcfa08d97011a0e81e79",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Ex 3: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods\"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Nov 10, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## 1.0 Introduction\n\n### **1.1 The Task**\n\nIn this take-home exercise, we are required to calibrate a predictive model to predict HDB resale prices between July-September 2024 by using HDB resale transaction records in 2023.\n\n### 1.2 The Data\n\nBelow is the list of data used for this take-home exercise. These data are extracted from data.gov.sg and [LTA Data Mall](https://datamall.lta.gov.sg/content/datamall/en/static-data.html). We will be looking at resale flat that are 4-room, for ease of data manipulation. Similar method could be applied for resale HDB of various size.\n\n-   Structural factors (From resale data)\n\n    -   Area of the unit\n\n    -   Floor level\n\n    -   Remaining lease\n\n    -   Age of the unit\n\n-   Locational factors\n\n    -   Proxomity to CBD\n\n    -   Proximity to eldercare\n\n    -   Proximity to foodcourt/hawker centres\n\n    -   Proximity to MRT\n\n    -   Proximity to park\n\n    -   Proximity to good primary school\n\n    -   Proximity to shopping mall\n\n    -   Proximity to supermarket\n\n    -   Numbers of kindergartens within 350m\n\n    -   Numbers of childcare centres within 350m\n\n    -   Numbers of bus stop within 350m\n\n    -   Numbers of primary school within 1km\n\n## 2.0 Getting Started\n\n### 2.1 Setting up the environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap,\n               spdep, tidyverse,\n               httr, jsonlite)\n```\n:::\n\n\n### 2.2 Importing and Wrangling the Data\n\nImporting all the data into the R environment.\n\n#### 2.2.1 Resale HDB Data\n\nResale data (3-Room Flat), and transaction between Jan 2023 to Sep 2024. Selecting to retain only relevant fields:\n\n-   Address\n\n-   Postal Code\n\n-   Area of the unit\n\n-   Floor level\n\n-   Remaining lease\n\n-   Age of the unit\n\n-   x-y coordinates (left_join with coordinates extracted through reverse geo-coding with address using onemap API)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/rawdata/resale.csv\") %>% \n  filter(flat_type == \"3 ROOM\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\") %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11))) %>% \n  mutate(age_of_unit = 2024 - lease_commence_date) %>% \n  select(address, floor_area_sqm, storey_range, remaining_lease_yr, remaining_lease_mth,age_of_unit)\n```\n:::\n\n\nExtracting the coords:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale$address))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords,\"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- read_rds(\"data/rds/coords.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_xy <- left_join(resale, coords,\n                       by = \"address\") %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(resale_xy, \"data/rds/resale_xy.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_xy <- read_rds(\"data/rds/resale_xy.rds\") \n```\n:::\n\n\n#### 2.2.2 Proximity to CBD\n\n![](images/clipboard-1267202484.png)\n\n![](images/clipboard-506858820.png)\n\n![](images/clipboard-2690948445.png)\n\nBased on scribblemaps.com and google map, we can have a sense of Singapore's CBD and Central Area. Central Area includes area spanning Orchard, Chinatown, Marina Bay, Marina East, Bras Basah, Rochor and Newton. For the purpose of this exercise, we will be taking Dhoby Ghaut MRT station(1.299866722252685, 103.8454773226203) as the definition of our centroid of the CBD area for distance calculation purpose. The reason for choosing this point is as such:\n\n1.  Dhoby Ghaut MRT station serves three lines (N-S Line, N-E Line, and Circle Line)\n2.  It is approximately central of the Central Area as per the google map.\n\nAnother possible centroid would be City Hall MRT(1.2932052372864624, 103.8519615479051), where it serves 2 main MRT lines (N-S Line and E-W Line) and would be representative of centroid when we consider including the Marina Bay East area as part of the Central Area of Singapore.\n\nNext, we will create the sf object for Dhoby Ghaut MRT station.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbd_dg <- data.frame(longitude = \"103.8454773226203\",\n                 latitude = \"1.299866722252685\") %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nThen, we will check to ensure that both sf data.frame have the same CRS:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(cbd_dg) == st_crs(resale_xy) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nNext, we will calculate the distance(in metres) using st_distance and append it back to resale_xy:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndistances <- st_distance(cbd_dg, resale_xy)\nresale_xy$dist_to_cbd <- as.numeric(distances)\n```\n:::\n\n\n#### 2.2.3 Proximity to Eldercare\n\nSince there may be multiple eldercare within the area, we will be using the proximity to the nearest available eldercare facility for the resale HDB. ELDERCARE is in shapefile format, hence, we will use st_read() to extract the file as sf data.frame, and also ensure the EPSG code is 3414 using st_transform().\n\n\n::: {.cell}\n\n```{.r .cell-code}\neldercare <- st_read(dsn = \"data/rawdata\", \n                  layer = \"ELDERCARE\") %>%\n  st_transform(crs = 3414) %>% \n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `ELDERCARE' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 133 features and 18 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 14481.92 ymin: 28218.43 xmax: 41665.14 ymax: 46804.9\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(eldercare)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\nAs there are multiple eldercares, we would need to first find the distance matrix, then find the minimum distance amongst all the matrix, and lastly, append the minimum dist back to our resale_xy dataframe.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_elder <- st_distance(resale_xy,eldercare)\nmin_distances <- apply(dist_elder, 1, min)\nresale_xy$dist_eldercare <- min_distances\n```\n:::\n\n\n#### 2.2.4 Proximity to Foodcourt/hawker center\n\nSimilar steps are applied to Foodcourt/hawker center.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfood <- st_read(dsn = \"data/rawdata/HawkerCentresKML.kml\") %>%\n  st_transform(crs = 3414) %>% \n  select(geometry) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `HAWKERCENTRE' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata\\HawkerCentresKML.kml' \n  using driver `KML'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_food <- st_distance(resale_xy,food)\nmin_distances <- apply(dist_food, 1, min)\nresale_xy$dist_food <- min_distances\n```\n:::\n\n\n#### 2.2.5 Proximity to MRT\n\nSimilar steps are applied to MRT.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmrt <- st_read(dsn = \"data/rawdata\",\n               layer = \"G_MP08_ACT_MRT_STN_PT\") %>%\n  st_transform(crs = 3414) %>% \n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `G_MP08_ACT_MRT_STN_PT' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 20 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 27879.15 ymin: 28725.59 xmax: 31079.98 ymax: 32740.97\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_mrt <- st_distance(resale_xy,mrt)\nmin_distances <- apply(dist_mrt, 1, min)\nresale_xy$dist_mrt <- min_distances\n```\n:::\n\n\n#### 2.2.6 Proximity to Park\n\nSimilar steps are applied to Park. As geojson file contains geometry information with Z-dimension (height), we will use st_zm() to remove this dimensions since we do not need this information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark <- st_read(dsn = \"data/rawdata/park.geojson\") %>%\n  st_zm() %>% \n  st_transform(crs = 3414) %>% \n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `park' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata\\park.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1685 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6836 ymin: 1.201022 xmax: 104.0321 ymax: 1.464108\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_park <- st_distance(resale_xy,park)\nmin_distances <- apply(dist_park, 1, min)\nresale_xy$dist_park <- min_distances\n```\n:::\n\n\n#### 2.2.7 Proximity to a good primary school\n\nSince the definition of a \"good\" primary school differs, we will use the knowledge from concerned community as the gauge for a \"good\" primary school. For the purpose of this exercise, I adopted the two definitions that is associated with a \"good\" primary school:\n\n1.  Special Assistance Plan (SAP) Schools - Cultural Richness in Learning\n2.  Gifted Education Programme (GEP) Schools - Tailoring Education for the Gifted\n\nBased on [Creative Campus](https://www.creativecampus.com.sg/best-primary-schools-in-singapore-2024), the list of \"good\" primary school are compiled in the list named good_sch, using google map to extract the latitude and longitude.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngood_sch <- data.frame(\n  name = c(\"Ai Tong School\", \n           \"Anglo-Chinese School (Primary)\", \n           \"Catholic High School\", \n           \"CHIJ St., Nicholas Girls’ School\", \n           \"Henry Park Primary School\", \n           \"Holy Innocents’ Primary School\", \n           \"Hong Wen School\", \n           \"Kong Hwa School\", \n           \"Maha Bodhi School\", \n           \"Maris Stella High School (Primary)\", \n           \"Nan Hua Primary School\", \n           \"Nanyang Primary School\", \n           \"Pei Chun Public School\", \n           \"Pei Hwa Presbyterian Primary School\", \n           \"Poi Ching School\", \n           \"Raffles Girls’ Primary School\", \n           \"Red Swastika School\", \n           \"Rosyth School\", \n           \"St. Hilda’s Primary School\", \n           \"Tao Nan School\"),\n  latitude = c(1.3605640181003413,\n               1.3191507364879236,\n               1.355277597260772, \n               1.374247187308568,\n               1.3170721007183392, \n               1.366919234532623, \n               1.3216304962516947,\n               1.3113035192025317,\n               1.3286168882975922,\n               1.3413858298053156,\n               1.3199812404785924,\n               1.3207867963363251,\n               1.3373761205768626,\n               1.3385314868306721,\n               1.3580371568487648,\n               1.3302362732220747,\n               1.3333982209974653,\n               1.3731445652271157,\n               1.3498237347980189,\n               1.3052062281563859),\n  longitude = c(103.83272785347252, \n                103.83577417484831,\n                103.84457970481196,\n                103.83412198595342,\n                103.78415775347251,\n                103.8935703058735,\n                103.85710945532114,\n                103.88815583813025,\n                103.90150335711749,\n                103.87764453470902,\n                103.76203935532115,\n                103.80855218230802,\n                103.85576078045922,\n                103.77617291114346,\n                103.9356781534726,\n                103.80616995162373,\n                103.9341450516237,\n                103.8747181976503,\n                103.93610449580149,\n                103.9114018092948)\n  ) %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\nwrite_rds(good_sch, \"data/rds/good_sch.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_good_sch <- st_distance(resale_xy,good_sch)\nmin_distances <- apply(dist_good_sch, 1, min)\nresale_xy$dist_good_sch <- min_distances\n```\n:::\n\n\n#### 2.2.8 Proximity to Shopping Mall\n\nSimilar steps are applied to Shopping Mall.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmall <- st_read(dsn = \"data/rawdata\",\n               layer = \"Mall\") %>%\n  st_transform(crs = 3414) %>% \n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Mall' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 464 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 15576.2 ymin: 24936 xmax: 40537.72 ymax: 48239.39\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_mall <- st_distance(resale_xy,mall)\nmin_distances <- apply(dist_mall, 1, min)\nresale_xy$dist_mall <- min_distances\n```\n:::\n\n\n#### 2.2.9 Proximity to Supermarket\n\nSimilar steps are applied to Supermarket.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarket <- st_read(dsn = \"data/rawdata/SupermarketsKML.kml\") %>%\n  st_transform(crs = 3414) %>% \n  select(geometry)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `SUPERMARKETS' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex03\\data\\rawdata\\SupermarketsKML.kml' \n  using driver `KML'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndist_supermarket <- st_distance(resale_xy,supermarket)\nmin_distances <- apply(dist_supermarket, 1, min)\nresale_xy$dist_supermarket <- min_distances\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}