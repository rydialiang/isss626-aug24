{
  "hash": "33e26730f3228a01d88156c75b098196",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Ex 2\"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Oct 3, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n## Take-home Exercise 2: Discovering impacts of COVID-19 on Thailand tourism economy at the province level using spatial and spatio-temporal statistics\n\n## 1.0 Background\n\n### **1.1 Objectives**\n\nWe aim to discover:\n\n-   If the key indicators of tourism economy of Thailand are independent from space and space and time.\n\n-   If the tourism economy is indeed spatial and spatio-temporal dependent, then, you would like to detect where are the clusters and outliers, and the emerging hot spot/cold spot areas.\n\n### **1.2 The Task**\n\nThe specific tasks of this take-home exercise are as follows:\n\n-   Using appropriate function of **sf** and **tidyverse**, preparing the following geospatial data layer:\n\n    -   a study area layer in sf polygon features. It must be at [province level](https://en.wikipedia.org/wiki/Provinces_of_Thailand) (including Bangkok) of Thailand.\n\n    -   a tourism economy indicators layer within the study area in sf polygon features.\n\n    -   a derived tourism economy indicator layer in [**spacetime s3 class of sfdep**](https://sfdep.josiahparry.com/articles/spacetime-s3). Keep the time series at **month and year levels**.\n\n-   Using the extracted data, perform global spatial autocorrelation analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-glsa).\n\n-   Using the extracted data, perform local spatial autocorrelation analysis by using [sfdep methods](https://r4gdsa.netlify.app/chap10.html).\n\n-   Using the extracted data, perform emerging hotspot analysis by using [sfdep methods](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex05/in-class_ex05-ehsa).\n\n-   Describe the spatial patterns revealed by the analysis above.\n\n### **1.3 The Data**\n\nFor the purpose of this take-home exercise, two data sets shall be used, they are:\n\n-   [Thailand Domestic Tourism Statistics](https://www.kaggle.com/datasets/thaweewatboy/thailand-domestic-tourism-statistics) at Kaggle. We will use **version 2** of the data set.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) at HDX. We will use the province boundary data set.\n\n## 2.0 Getting Started\n\n### 2.1 Setting up the R environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sfdep, tmap,\n               spdep,\n               sf, plotly, \n               tidyverse,\n               Kendall)\n```\n:::\n\n\n### 2.2 Loading the Data\n\nLoading the tourism economy indicators data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourism <- read_csv(\"data/rawdata/thailand_domestic_tourism_2019_2023_ver2.csv\") %>% \n  select(1,3,5:7) %>% \n  rename(province = province_eng) %>% \n  pivot_wider(names_from = variable, values_from = value) %>% \n  mutate(year = year(date),\n         month = month(date))\n\ntourism$date <- as.Date(tourism$date, format = \"%Y-%m-%d\")\ntourism$year_month <- (as.numeric(format(tourism$date, \"%Y\")) - 2019) * 12 + as.numeric(format(tourism$date, \"%m\"))\n```\n:::\n\n\nLoading the geospatial data, extracting the study area at province level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- st_read(\"data/rawdata\",\n                    layer = \"tha_admbnda_adm1_rtsd_20220121\" ) %>% \n  dplyr::select(3,17) %>% \n  rename(province = ADM1_EN ) %>% \n  mutate(province = case_when(\n    province == \"Buri Ram\" ~ \"Buriram\",\n    province == \"Chon Buri\" ~ \"Chonburi\",\n    province == \"Lop Buri\" ~ \"Lopburi\",\n    province == \"Nong Bua Lam Phu\" ~ \"Nong Bua Lamphu\",\n    province == \"Phangnga\" ~ \"Phang Nga\",\n    province == \"Prachin Buri\" ~ \"Prachinburi\",\n    province == \"Si Sa Ket\" ~ \"Sisaket\",\n    province == \"Chai Nat\" ~ \"Chainat\",\n    TRUE ~ province))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `C:\\rydialiang\\isss626-aug24\\Take-home Exercise\\Take-home_Ex02\\data\\rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nwrite_rds(province, \"data/rds/province.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(province)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### 2.3 Joining the dataset\n\nJoining the dataset using the province column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- left_join(tourism, \n                  province) %>% \n  st_as_sf() %>% \n  st_transform(crs = 32647)\n  \nwrite_rds(data, \"data/rds/data.rds\")\n```\n:::\n\n\n### 2.4 Setting Seeds to Ensure Reproducibility\n\nThe set. seed() function is used to set a Random seed which Pseudo-random number generators use when generating \"random\" numbers. By using this function, we ensure that the randomly generated numbers remain the same when the code are reproduced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n```\n:::\n\n\n## 3.0 Exploratory Data Analysis (EDA)\n\n### 3.1 Understanding the share of Revenue across Provinces\n\nCreating revenue_all for each province.\n\n1.  Since the value of the revenue is in trillions for top provinces, we will filter out those provinces that contributes \\> \\$2 billion revenue.\n2.  This filter is just applied for the visualization so as to declutter the chart. It is for us to know which are the top provinces in terms of revenue.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_rds(\"data/rds/data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all_2b <- data %>%\n  group_by(province) %>%\n  filter(revenue_all > 2000000000) %>% \n  summarise(revenue_all = sum(revenue_all, na.rm = TRUE)) %>% \n  ungroup()\n```\n:::\n\n\nTaking a look at the revenue distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rev_all_2b) +\n  geom_bar(aes(x = reorder(province, -revenue_all), \n               y = revenue_all, fill = province), \n           stat = \"identity\") +\n  labs(title = \"Total Revenue from Foreigner by Province\", x = \"Province\", y = \"Total Revenue\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  \n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Revenue_all\n\n-   From this chart, we can conclude that the top 10 provinces by revenue are:\n\n    -   Bangkok\n\n    -   Phuket\n\n    -   Chonburi\n\n    -   Chang Mai\n\n    -   Krabi\n\n    -   Surat Thani\n\n    -   Prachuap Khiri Khan\n\n    -   Songkhla\n\n    -   Chiang Rai\n\n    -   Phetchaburi\n:::\n\n### 3.2 Understanding the share of Revenue from Foreigners across Provinces\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_for_1b <- data %>%\n  group_by(province) %>%\n  filter(revenue_foreign > 1000000000) %>% \n  summarise(revenue_foreign = sum(revenue_foreign, na.rm = TRUE)) %>% \n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rev_for_1b) +\n  geom_bar(aes(x = reorder(province, -revenue_foreign), y = revenue_foreign, fill = province), stat = \"identity\") +\n  labs(title = \"Total Revenue from Foreigner by Province\", x = \"Province\", y = \"Total Revenue\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  \n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### 3.3 Understanding the share of Revenue from Thai across Provinces\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_thai_1b <- data %>%\n  group_by(province) %>%\n  filter(revenue_thai > 2000000000) %>% \n  summarise(revenue_thai = sum(revenue_thai, na.rm = TRUE)) %>% \n  ungroup()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = rev_thai_1b) +\n  geom_bar(aes(x = reorder(province, -revenue_thai), y = revenue_thai, fill = province), stat = \"identity\") +\n  labs(title = \"Total Revenue from Thai by Province\", x = \"Province\", y = \"Total Revenue\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  \n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### 3.4 Comparing the Top 10\n\n| S/N | Revenue All         | Revenue Foreigner   | Revenue Thai        |\n|-----|---------------------|---------------------|---------------------|\n| 1   | Bangkok             | Bangkok             | Bangkok             |\n| 2   | Phuket              | Phuket              | Chiang Mai          |\n| 3   | Chonburi            | Chonburi            | Chonburi            |\n| 4   | Chang Mai           | Surat Thani         | Phuket              |\n| 5   | Krabi               | Krabi               | Prachuap Khiri Khan |\n| 6   | Surat Thani         | Chiang Mai          | Chiang Rai          |\n| 7   | Prachuap Khiri Khan | Phang Nga           | Phetchaburi         |\n| 8   | Songkhla            | Songkhla            | Khanchanaburi       |\n| 9   | Chiang Rai          | Prachuap Khiri Khan | Krabi               |\n| 10  | Phetchaburi         | Trat                | Rayong              |\n\n### 3.5 Understanding number of Tourist\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntourist_all <- data %>%\n  group_by(province) %>%\n  summarise(no_tourist_all = sum(no_tourist_all, na.rm = TRUE)) %>%\n  ungroup() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tourist_all) +\n  geom_bar(aes(x = reorder(province, -no_tourist_all), y = no_tourist_all, fill = province), stat = \"identity\") +\n  labs(title = \"Total Number of Tourist by Province\", x = \"Province\", y = \"Total Number of Tourist\") +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),  \n    plot.title = element_text(hjust = 0.5, size = 14, face = \"bold\"),\n    legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## 4.0 Creating a Time Series Cube\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- read_rds(\"data/rds/province.rds\")\n\ndata_st <- spacetime(data,\n            province,\n            .loc_col = \"province\",\n            .time_col = \"year_month\")\n\nwrite_rds(data_st,\"data/rds/data_st.rds\")\n```\n:::\n\n\nConfirming data_st as spacetime_cube:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(data_st)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n## 5.0 Global Spatial Autocorrelation Analysis\n\n### 5.1 **Visualising Regional Development Indicator**\n\nIn this analysis, we will compare the sum all the relevant economic indicators for the year 2019 to 2023 to get a single value for each province to understand the global spatial autocorrelation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all <- data %>% \n  group_by(province) %>% \n  summarise(revenue_all = sum(revenue_all, \n                              na.rm = TRUE))\n\nrev_all_2019 <- data %>% \n  filter(year == \"2019\") %>% \n  group_by(province) %>% \n  summarise(revenue_all = sum(revenue_all, \n                              na.rm = TRUE))\n\nrev_all_2020 <- data %>% \n  filter(year == \"2020\") %>% \n  group_by(province) %>% \n  summarise(revenue_all = sum(revenue_all, \n                              na.rm = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall <- tm_shape(rev_all) +\n  tm_fill(\"revenue_all\",\n          n = 8,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Total Revenue\")\n\nall_2019 <- tm_shape(rev_all_2019) +\n  tm_fill(\"revenue_all\",\n          n = 8,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Revenue in 2019\")\n\nall_2020 <- tm_shape(rev_all_2020) +\n  tm_fill(\"revenue_all\",\n          n = 8,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Revenue in 2020\")\n\ntmap_arrange(all, \n             all_2019,\n             all_2020,\n             asp=1, \n             ncol=3)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nBy comparing the Sum of Total Revenue of 2019 to 2023, Total Revenue in 2019 and Total Revenue in 2020, we can see that by summing up the total revenue for all the years, the distribution is quite different from 2019 and 2020.\n\nIn fact, I have tried both revenue_all and revenue in just 2019, both cases did not have a significant p-value to reject the null hypothesis that the value at one location do not depend on depend on values at other (neighbouring) locations.\n:::\n\n### 5.2 **Computing Contiguity Spatial Weights**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q <- poly2nb(rev_all, \n                queen=TRUE)\n\nsummary(wm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n48\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n71 with 1 link\n2 most connected regions:\n17 69 with 9 links\n```\n\n\n:::\n:::\n\n\nSince there's one province region 48 which has no contiguous neighbour, we would need to find out which province is it and manually assign it a neighbour. It is likely that this particular province is an island.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all$province[48]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Phuket\"\n```\n\n\n:::\n:::\n\n\nAfter checking the province Phuket on the map, we can assign Phuket's nearest non-contiguous neighbour as Phang Nga and Krabi.\n\n![](images/clipboard-2105970456.png)\n\nUsing the code chunk below, we can identify the indices of Phang Nga (18) and Krabi (39), so as to edit the neighbour list before proceeding to the next step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(rev_all$province %in% c(\"Phang Nga\", \"Krabi\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18 39\n```\n\n\n:::\n:::\n\n\n#### 5.2.1 Assigning the neighbours to Phuket\n\nBesides assign Phang Nga and Krabi and neighbour to Phuket, we also need to add Phuket into Phang Nga and Krabi lists of neighbours.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwm_q[[48]] <- as.integer(c(18,39))\nwm_q[[18]] <- as.integer(c(31,39,48,67,70))\nwm_q[[39]] <- as.integer(c(18,48,51,67))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrswm_q <- nb2listw(wm_q, \n                   style=\"W\", \n                   zero.policy = TRUE)\nrswm_q\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 356 \nPercentage nonzero weights: 6.004385 \nAverage number of links: 4.623377 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 77 5929 77 36.85724 320.0353\n```\n\n\n:::\n:::\n\n\n### 5.3 **Global Measures of Spatial Autocorrelation: Moran’s I**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(rev_all$revenue_all, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  rev_all$revenue_all  \nweights: rswm_q    \n\nMoran I statistic standard deviate = -0.11051, p-value = 0.544\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     -0.018555519      -0.013157895       0.002385732 \n```\n\n\n:::\n:::\n\n\n::: callout-important\nSince p-value is 0.544 \\< 0.05, we conclude that we do not reject null hypothesis that the value at one location do not depend on depend on values at other (neighbouring) locations.\n\nMoran I statistic is -0.0185 \\< 0, showing that values are dispersed, and observations tend to be dissimilar.\n:::\n\n### **5.4 Computing Monte Carlo Moran’s I**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbperm= moran.mc(rev_all$revenue_all, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  rev_all$revenue_all \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = -0.018556, observed rank = 644, p-value = 0.356\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n\n::: callout-important\nSimilarly for Monte Carlo Moran's I, p-value = 0.356\\> 0.05, we conclude that we do not reject null hypothesis that the value at one location do not depend on values at other (neighbouring) locations.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nSince the visualisation has suggested skewness in the data, we will apply log transformation to the data to normalise the skewed data, and perform the Moran's I and Monte Carlo simulation again.\n:::\n\n### 5.5 Applying log to Moran's I and Monte Carlo Moran's I\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all$log_revenue_all <- log(rev_all$revenue_all)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmoran.test(rev_all$log_revenue_all, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMoran I test under randomisation\n\ndata:  rev_all$log_revenue_all  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 3.1119, p-value = 0.0009294\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.222834238      -0.013157895       0.005750938 \n```\n\n\n:::\n:::\n\n\n::: callout-important\nAfter performing the log transformation on the revenue, we obtain the following results:\n\n1.  p-value = 0.0009 \\< 0.05, we reject H0. We conclude that the value at one location depends on values at other (neighbouring) locations.\n2.  Moran's I statistic is 0.2228 \\> 0, indicating that values are Clustered, and observations tend to be similar.\n3.  Monte Carlo simulations of 1000 times also confirmed similar results.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbperm= moran.mc(rev_all$log_revenue_all, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tMonte-Carlo simulation of Moran I\n\ndata:  rev_all$log_revenue_all \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.22283, observed rank = 999, p-value = 0.001\nalternative hypothesis: greater\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.01085715\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.005679189\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(bperm$res[1:999])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.20175 -0.06421 -0.01690 -0.01086  0.04269  0.25231 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nAfter log transformation, the monte carlo simulation of the Moran's I also produced a normalise distribution.\n\n### 5.6 Geary's c\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngeary.test(rev_all$log_revenue_all, \n           listw=rswm_q)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tGeary C test under randomisation\n\ndata:  rev_all$log_revenue_all \nweights: rswm_q   \n\nGeary C statistic standard deviate = 2.9039, p-value = 0.001843\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.752575230       1.000000000       0.007259683 \n```\n\n\n:::\n:::\n\n\n::: callout-important\nThe results of Geary's C using log transformed data is as follows:\n\n1.  p-value = 0.0018 \\< 0.05, we reject H0. We conclude that the value at one location depends on values at other (neighbouring) locations.\n2.  Geary's C statistics is 0.736179399 \\<1. The values are Clustered, and observations tend to be similar to its immediate neighbours.\n:::\n\n## 6.0 Local Indicators of Spatial Association (LISA)\n\n### 6.1 **Computing local Moran’s I**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfips <- order(rev_all$province)\nlocalMI <- localmoran(rev_all$log_revenue_all, \n                      rswm_q)\nhead(localMI)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n             Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1  1.051168e+00 -4.329940e-02 1.034878e+00  1.07586673     0.28198686\n2  1.374230e-01 -1.938165e-02 3.512310e-01  0.26458331     0.79133048\n3 -8.566175e-01 -1.475173e-01 1.506277e+00 -0.57777029     0.56341922\n4  4.201326e-01 -1.606609e-02 3.949183e-01  0.69411392     0.48761077\n5 -8.081061e-05 -3.274493e-06 4.773758e-05 -0.01122209     0.99104625\n6  1.824269e-02 -9.176880e-06 8.008283e-05  2.03956493     0.04139368\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=rev_all$province[fips]),\n  check.names=FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                  Ii        E.Ii      Var.Ii        Z.Ii\nAmnat Charoen             1.0512e+00 -4.3299e-02  1.0349e+00  1.0759e+00\nAng Thong                 1.3742e-01 -1.9382e-02  3.5123e-01  2.6458e-01\nBangkok                  -8.5662e-01 -1.4752e-01  1.5063e+00 -5.7777e-01\nBueng Kan                 4.2013e-01 -1.6066e-02  3.9492e-01  6.9411e-01\nBuriram                  -8.0811e-05 -3.2745e-06  4.7738e-05 -1.1222e-02\nChachoengsao              1.8243e-02 -9.1769e-06  8.0083e-05  2.0396e+00\nChainat                   5.5545e-01 -1.3272e-02  2.4201e-01  1.1561e+00\nChaiyaphum               -3.3008e-01 -6.2269e-03  1.1436e-01 -9.5767e-01\nChanthaburi               2.2156e-01 -9.0556e-04  1.3190e-02  1.9371e+00\nChiang Mai                2.3592e-01 -5.2089e-02  7.1983e-01  3.3946e-01\nChiang Rai                5.1042e-01 -2.2095e-02  5.3978e-01  7.2480e-01\nChonburi                  1.0721e+00 -7.7040e-02  1.7763e+00  8.6218e-01\nChumphon                  9.0939e-03 -1.4645e-06  3.6585e-05  1.5037e+00\nKalasin                   3.6335e-01 -1.7235e-02  2.0288e-01  8.4495e-01\nKamphaeng Phet            1.4562e-01 -8.7427e-03  1.2634e-01  4.3427e-01\nKanchanaburi             -2.2478e-01 -1.7522e-02  2.5097e-01 -4.1371e-01\nKhon Kaen                -2.7185e-01 -6.6982e-03  5.0851e-02 -1.1758e+00\nKrabi                     2.1177e+00 -3.7038e-02  5.1997e-01  2.9882e+00\nLampang                  -9.1571e-03 -5.4707e-05  5.5360e-04 -3.8686e-01\nLamphun                  -5.3757e-01 -7.9145e-03  1.9616e-01 -1.1959e+00\nLoei                      6.2503e-03 -2.3194e-04  2.7775e-03  1.2300e-01\nLopburi                   7.2637e-04 -3.2611e-07  2.8459e-06  4.3077e-01\nMae Hong Son             -1.8366e-02 -3.8627e-06  1.4673e-04 -1.5159e+00\nMaha Sarakham             4.3807e-01 -1.7813e-02  2.5506e-01  9.0268e-01\nMukdahan                  4.1061e-01 -1.9267e-03  2.3033e-02  2.7182e+00\nNakhon Nayok              1.0095e-02 -1.2694e-04  1.8504e-03  2.3764e-01\nNakhon Pathom            -1.6539e-02 -1.1028e-05  1.1160e-04 -1.5645e+00\nNakhon Phanom             3.6864e-01 -3.9985e-03  9.9491e-02  1.1814e+00\nNakhon Ratchasima         1.8609e-02 -1.1108e-02  9.5859e-02  9.5981e-02\nNakhon Sawan              6.7644e-02 -1.9823e-04  1.7296e-03  1.6313e+00\nNakhon Si Thammarat       4.9652e-01 -4.3792e-03  6.3564e-02  1.9868e+00\nNan                       2.2033e-01 -1.4073e-03  3.5109e-02  1.1834e+00\nNarathiwat                6.2023e-01 -6.8989e-03  2.6026e-01  1.2293e+00\nNong Bua Lamphu          -6.4290e-01 -4.9534e-02  1.1762e+00 -5.4712e-01\nNong Khai                 2.3799e-02 -6.6115e-05  1.2217e-03  6.8276e-01\nNonthaburi               -1.7164e-01 -4.7287e-04  8.7344e-03 -1.8314e+00\nPathum Thani             -3.1559e-01 -2.6982e-03  3.2232e-02 -1.7428e+00\nPattani                  -1.0466e-01 -2.1400e-02  5.2317e-01 -1.1511e-01\nPhang Nga                 1.5826e+00 -1.6473e-02  2.9941e-01  2.9223e+00\nPhatthalung              -3.7416e-01 -4.7875e-03  8.8050e-02 -1.2448e+00\nPhayao                   -5.9504e-02 -7.2740e-03  1.3345e-01 -1.4298e-01\nPhetchabun               -3.4087e-02 -1.1215e-03  1.1337e-02 -3.0960e-01\nPhetchaburi               3.8417e-01 -1.9094e-02  4.6791e-01  5.8953e-01\nPhichit                   7.4950e-02 -1.0475e-02  1.9156e-01  1.9518e-01\nPhitsanulok              -1.3347e-01 -1.2638e-03  1.5119e-02 -1.0752e+00\nPhra Nakhon Si Ayutthaya -1.8315e-01 -7.5000e-03  7.5331e-02 -6.3999e-01\nPhrae                     2.5363e-01 -4.4907e-03  6.5174e-02  1.0111e+00\nPhuket                    3.9078e+00 -1.0276e-01  3.5025e+00  2.1430e+00\nPrachinburi              -3.1886e-02 -1.9438e-04  3.5915e-03 -5.2882e-01\nPrachuap Khiri Khan       8.5114e-01 -2.5820e-02  9.5549e-01  8.9715e-01\nRanong                   -4.1456e-01 -2.6630e-03  6.6351e-02 -1.5991e+00\nRatchaburi               -6.7484e-02 -8.9903e-04  1.3095e-02 -5.8187e-01\nRayong                    1.3952e+00 -1.4243e-02  5.3335e-01  1.9300e+00\nRoi Et                    8.7064e-01 -1.2304e-02  1.4556e-01  2.3143e+00\nSa Kaeo                   1.3042e-03 -4.6094e-07  6.7199e-06  5.0330e-01\nSakon Nakhon              2.4550e-01 -3.5373e-03  4.2219e-02  1.2120e+00\nSamut Prakan             -5.7312e-02 -1.5179e-05  5.7660e-04 -2.3861e+00\nSamut Sakhon             -6.1537e-01 -9.6432e-03  1.7649e-01 -1.4418e+00\nSamut Songkhram          -5.3086e-03 -4.3930e-04  1.0970e-02 -4.6491e-02\nSaraburi                  3.7606e-02 -2.6935e-04  3.9257e-03  6.0450e-01\nSatun                     1.0253e-01 -1.2689e-03  3.1659e-02  5.8337e-01\nSing Buri                 5.7502e-01 -2.0615e-02  2.9435e-01  1.0979e+00\nSisaket                   5.4221e-01 -7.7664e-03  1.4241e-01  1.4574e+00\nSongkhla                 -4.0241e-01 -2.6090e-02  3.7043e-01 -6.1831e-01\nSukhothai                 9.6600e-02 -1.5420e-03  1.8441e-02  7.2271e-01\nSuphan Buri              -1.7258e-02 -3.1315e-05  3.1690e-04 -9.6768e-01\nSurat Thani               9.5953e-01 -3.5176e-02  4.9478e-01  1.4141e+00\nSurin                     3.6060e-01 -3.2935e-03  6.0663e-02  1.4774e+00\nTak                       2.0506e-03 -3.1286e-04  2.3905e-03  4.8340e-02\nTrang                     9.1032e-02 -4.5321e-04  8.3715e-03  9.9989e-01\nTrat                      1.9160e-01 -7.0184e-03  5.3662e-01  2.7113e-01\nUbon Ratchathani         -1.1696e-01 -9.9978e-05  2.4974e-03 -2.3383e+00\nUdon Thani               -2.1310e-01 -2.2479e-03  2.6864e-02 -1.2864e+00\nUthai Thani              -4.0764e-02 -1.0342e-02  1.4922e-01 -7.8756e-02\nUttaradit                 1.6358e-01 -6.3263e-03  1.1617e-01  4.9850e-01\nYala                      8.6291e-02 -2.5222e-03  6.2852e-02  3.5426e-01\nYasothon                  1.1095e+00 -2.7394e-02  3.8843e-01  1.8242e+00\n                         Pr.z....E.Ii..\nAmnat Charoen                    0.2820\nAng Thong                        0.7913\nBangkok                          0.5634\nBueng Kan                        0.4876\nBuriram                          0.9910\nChachoengsao                     0.0414\nChainat                          0.2477\nChaiyaphum                       0.3382\nChanthaburi                      0.0527\nChiang Mai                       0.7343\nChiang Rai                       0.4686\nChonburi                         0.3886\nChumphon                         0.1327\nKalasin                          0.3981\nKamphaeng Phet                   0.6641\nKanchanaburi                     0.6791\nKhon Kaen                        0.2397\nKrabi                            0.0028\nLampang                          0.6989\nLamphun                          0.2317\nLoei                             0.9021\nLopburi                          0.6666\nMae Hong Son                     0.1295\nMaha Sarakham                    0.3667\nMukdahan                         0.0066\nNakhon Nayok                     0.8122\nNakhon Pathom                    0.1177\nNakhon Phanom                    0.2375\nNakhon Ratchasima                0.9235\nNakhon Sawan                     0.1028\nNakhon Si Thammarat              0.0469\nNan                              0.2366\nNarathiwat                       0.2190\nNong Bua Lamphu                  0.5843\nNong Khai                        0.4948\nNonthaburi                       0.0670\nPathum Thani                     0.0814\nPattani                          0.9084\nPhang Nga                        0.0035\nPhatthalung                      0.2132\nPhayao                           0.8863\nPhetchabun                       0.7569\nPhetchaburi                      0.5555\nPhichit                          0.8453\nPhitsanulok                      0.2823\nPhra Nakhon Si Ayutthaya         0.5222\nPhrae                            0.3120\nPhuket                           0.0321\nPrachinburi                      0.5969\nPrachuap Khiri Khan              0.3696\nRanong                           0.1098\nRatchaburi                       0.5607\nRayong                           0.0536\nRoi Et                           0.0207\nSa Kaeo                          0.6148\nSakon Nakhon                     0.2255\nSamut Prakan                     0.0170\nSamut Sakhon                     0.1493\nSamut Songkhram                  0.9629\nSaraburi                         0.5455\nSatun                            0.5596\nSing Buri                        0.2723\nSisaket                          0.1450\nSongkhla                         0.5364\nSukhothai                        0.4699\nSuphan Buri                      0.3332\nSurat Thani                      0.1573\nSurin                            0.1396\nTak                              0.9614\nTrang                            0.3174\nTrat                             0.7863\nUbon Ratchathani                 0.0194\nUdon Thani                       0.1983\nUthai Thani                      0.9372\nUttaradit                        0.6181\nYala                             0.7231\nYasothon                         0.0681\n```\n\n\n:::\n:::\n\n\n#### 6.2 Mapping the local Moran’s I and Moran’s I values, with p-value\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all.localMI <- cbind(rev_all,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlocalMI.map <- tm_shape(rev_all.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(rev_all.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.05, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nFrom the Local Moran's I statistics and p-values, we can conclude that there are four clusters based on p-value \\< 0.0.5\n:::\n\n### **6.3 Creating a LISA Cluster Map**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrev_all.Z <- scale(rev_all$log_revenue_all) %>% \n  as.vector \n\nnci <- moran.plot(rev_all.Z, \n                  rswm_q,\n                  labels=as.character(rev_all$province), \n                  xlab=\"Revenue_All\", \n                  ylab=\"Spatially Lag Revenue_All\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\nFrom the above, we can draw the following conclusion:\n\n1.  Phuket is in the high high autocorrelation, where it is a positive cluster with Phang Nga, and Krabi, where the neighbours also have high values.\n2.  Bangkok is a high outlier among its low neighbours\n3.  Amnat Charoen is in the low low autocorrelation, where it is a positive cluster with Yasothon, Mukdahan\n4.  Ubon Ratchathani seems to be just a slightly high outlier among its low neighbours\n:::\n\n#### 6.3.1 **Preparing LISA map classes**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI))\n\nrev_all$lag_log_revenue_all <- lag.listw(rswm_q, rev_all$log_revenue_all)\nDV <- rev_all$lag_log_revenue_all - mean(rev_all$lag_log_revenue_all)     \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nLM_I <- localMI[,1] - mean(localMI[,1])    \n```\n:::\n\n\nSet Significance level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsignif <- 0.05       \n```\n:::\n\n\nDefining the quadrants\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrant[DV <0 & LM_I>0] <- 1\nquadrant[DV >0 & LM_I<0] <- 2\nquadrant[DV <0 & LM_I<0] <- 3  \nquadrant[DV >0 & LM_I>0] <- 4      \n```\n:::\n\n\nPlacing all non-significant Moran in the category 0:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrant[localMI[,5]>signif] <- 0\n```\n:::\n\n\n#### 6.3.2 **Plotting LISA map**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdppc <- qtm(rev_all, \"log_revenue_all\")\n\nrev_all.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(rev_all.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\n::: callout-important\nUsing the LISA map we can conclude:\n\n1.  Mukdhan and Roi Et are in low-low cluster.\n2.  Ubon Ratchathani is high outlier with low neighbours.\n3.  Pkuket, Phang Nga, Krabi and Nakhon Si Thammarat are high-high cluster.\n4.  Chachoengsao and Samut Prakan are low outliers in with high neighbour (i.e. Bangkok)\n:::\n\n## 7.0 Emerging Hot Spot Analysis (EHSA)\n\n### 7.1 Computing local Gi\\* statistics\n\nUsing the space time cube created before, we will now derive the inverse weight distance using the following code chunk:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_st <- read_rds(\"data/rds/data_st.rds\")\n  \nst_nb <- data_st %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(\n    st_contiguity(geometry)),\n    wt = st_inverse_distance(nb, \n                             geometry, \n                             scale = 1,\n                             alpha = 1),\n    .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngi_stars <- st_nb %>% \n  group_by(year_month) %>% \n  mutate(gi_star = local_gstar_perm(\n    revenue_all, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n```\n:::\n\n\n### 7.2 Mann-Kendall Test on Gi\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg <- gi_stars %>% \n  ungroup() %>% \n  filter(province == \"Bangkok\") %>% \n  select(province, year_month, gi_star)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cbg, \n       aes(x = year_month, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\n### 7.3 Mann-Kendall Test Report\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 6\n     tau     sl     S     D   varS                                      geometry\n   <dbl>  <dbl> <dbl> <dbl>  <dbl>                            <MULTIPOLYGON [m]>\n1 -0.185 0.0587  -227  1225 14292. (((674339.8 1543300, 674382.3 1543278, 67444…\n```\n\n\n:::\n:::\n\n\n::: callout-note\nTau = -0.1853 (perfectly decreasing series)\n\nSince the p-value = 0.0587 \\> 0.05, we do not reject the null hypothesis that revenue_all is a monotonic decreasing series for 2019 to 2023.\n:::\n\n### 7.4 Mann-Kendall by Province\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- gi_stars %>%\n  group_by(province) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\nhead(ehsa)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  province          tau     sl     S     D   varS                       geometry\n  <chr>           <dbl>  <dbl> <dbl> <dbl>  <dbl>             <MULTIPOLYGON [m]>\n1 Amnat Charoen -0.202  0.0396  -247  1225 14292. (((1137720 1809629, 1137724 1…\n2 Ang Thong      0.0449 0.651     55  1225 14292. (((643472.8 1636469, 643496 1…\n3 Bangkok       -0.185  0.0587  -227  1225 14292. (((674339.8 1543300, 674382.3…\n4 Bueng Kan     -0.110  0.262   -135  1225 14292. (((965496 2045531, 965625.5 2…\n5 Buriram        0.0678 0.493     83  1225 14292. (((921217 1750212, 921217 175…\n6 Chachoengsao  -0.229  0.0192  -281  1225 14292. (((722656.1 1546054, 722796 1…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging <- ehsa %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:10)\nhead(emerging)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  province              tau      sl     S     D   varS                  geometry\n  <chr>               <dbl>   <dbl> <dbl> <dbl>  <dbl>        <MULTIPOLYGON [m]>\n1 Trang              -0.517 1.25e-7  -633  1225 14292. (((552555.6 770748.6, 55…\n2 Phayao              0.496 3.58e-7   607  1225 14292. (((648755.2 2182064, 648…\n3 Nakhon Si Thammar… -0.489 5.67e-7  -599  1225 14292. (((585074.4 1029631, 585…\n4 Krabi              -0.484 7.35e-7  -593  1225 14292. (((512499 827838.6, 5125…\n5 Surat Thani        -0.484 7.35e-7  -593  1225 14292. (((605865.7 1029259, 605…\n6 Phang Nga          -0.399 4.46e-5  -489  1225 14292. (((457515.4 856050.4, 45…\n```\n\n\n:::\n:::\n\n\n### 7.5 Performing Monte Carlo Simulation on EHSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa <- emerging_hotspot_analysis(\n  x = data_st, \n  .var = \"revenue_all\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_plot <- as.data.frame(ehsa)\n\nggplot(data = ehsa_plot,\n       aes(x = classification))+\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-55-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ehsa <- data %>%\n  as.data.frame() %>% \n  left_join(ehsa,\n            by = join_by(province == location)) %>% \n  st_as_sf()\n```\n:::\n\n\n### 7.6 Visualising EHSA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa_sig <- data_ehsa  %>%\n  filter(p_value < 0.05)\ntmap_mode(\"plot\")\ntm_shape(data_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-57-1.png){width=672}\n:::\n:::\n\n\n![](images/clipboard-1326676166.png){width=\"353\"}\n\n::: callout-important\n-   Sporadic Cold Spots - A lot of Thailand's provinces are sporadic cold spot, where 90% of the time they are statistically significant, and none of the time these province are significant hotspots. It means that these provinces almost never provides tourism revenue.\n\n-   Sporadic Hot Spots - One Thailand's provinces is sporadic hot spots, where 90% of the time they are statistically significant, and none of the time these province are significant coldspots. It means that these provinces are the ones likely to contribute to tourism revenue.\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}