{
  "hash": "6663842676e790cab0a24387317be7f2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Ex01\"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Sep 2, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n![](images/A_detailed_illustration_of_a_study_on_road_traffic_landscape.jpeg)\n\n## 1.0 Introduction\n\n### 1.1 The Study Area\n\n-   The study area is Bangkok Metropolitan Area.\n\n-   WGS 84 / UTM zone 47N\n\n-   EPSG code 32647\n\n## 1.2 The Datasets\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n::: callout-caution\n## On Projection\n\n-   to check on the following:\n\n    -   WGS 84 / UTM zone 47N\n\n    -   EPSG code 32647\n:::\n\n## 2.0 Loading Library and Importing Traffic Accident Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, \n               raster,\n               spNetwork,\n               tmap, \n               tidyverse)\n```\n:::\n\n\n## 3.0 Importing Data\n\n### 3.1 Importing Aspatial Data and Converting it into Spatial Data\n\nSince the `Thailand Road Accident [2019-2022]` is data set is in csv file format, we will use [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) of readr package to import `Thailand Road Accident [2019-2022]`.Following which, we use the pipe function and dplyr::filter() to filter out rows that has \"na\" or is empty in value. Next, we use st_as_sf to combine the longitude and latitude in the csv file can combine it into \"geometry\" column. Lastly, we use st_transform to change the Coordinate Reference System (CRS) to 32647, which is Thailand's [ESPG code](https://epsg.io/map#srs=32647&x=769964.9694806639&y=1455180.7056970089&z=5&layer=streets). The output R object is called rdacc_sf and it is a sf data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%\n  filter(!is.na(longitude) &longitude != \"\",\n         !is.na(latitude) & latitude != \"\") %>% \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),\n           crs = 4326) %>% \n  st_transform(crs = 32647)\n```\n:::\n\n\n::: callout-note\n## Notes on rdacc_sf\n\n-   incident_datetime is datetime format of POSIXct.\n\n-   st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) combines and longitude and latitude columns into geometry column\n\n-   Thai projection code is 32647, hence we use this code chunk: st_transform(crs = 32647)\n\n-   Filter is used to remove the longitude and latitude that has na as value.\n\n-   Check what is the number of data lost after removing na. Make sure the study region, the data lost is not significant. (not more than 5% lost)\n\n-   use readr::read_csv() to ensure the data is imported as tibble data frame. Do not use read.csv().\n\n-   Check the data.\n:::\n\n### 3.1.1 Wrangling the Date Fields \n\nUsing tidyverse::lubridate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- rdacc_sf %>% \n  mutate(DayOfWeek = day(incident_datetime)) %>% \n  mutate(Month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rdacc_sf, \"data/rds/rdacc_sf.rds\")\n```\n:::\n\n\n::: callout-note\n## Lubridate\n\n-   lubridate::month(): label = TRUE -\\> change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.\n:::\n\n### 3.2 Importing Spatial Data\n\n\n::: {.cell}\n\n:::\n\n\n## References\n\nNews: <https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}