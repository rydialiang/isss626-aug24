{
  "hash": "288dbb8162084389a19a4a0bf31693ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take-home Ex01\"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Sep 2, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n![](images/A_detailed_illustration_of_a_study_on_road_traffic_landscape.jpeg)\n\n## 1.0 Introduction & Objectives\n\nIn this Take-Home Exercise 1, we will be discovering factors affecting road traffic accidents in the [Bangkok Metropolitan Region BMR](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region) by employing both spatial and spatio-temporal point patterns analysis methods.\n\nThe specific objectives of this take-home exercise are as follows:\n\n-   To visualize the spatio-temporal dynamics of road traffic accidents in BMR using appropriate statistical graphics and geovisualization methods.\n\n-   To conduct detailed spatial analysis of road traffic accidents using appropriate Network Spatial Point Patterns Analysis methods.\n\n-   To conduct detailed spatio-temporal analysis of road traffic accidents using appropriate Temporal Network Spatial Point Patterns Analysis methods.\n\n### 1.1 The Study Area\n\n-   Thailand has four administrative levels:\n\n    -   Level 1 - Provinces (Changwat) - Total: 76 provinces + Bangkok as special administrative area.\n\n    -   Level 2 - District (Amphoe)\n\n    -   Level 3 - Sub-district (Tambon)\n\n    -   Level 4 - Village (Muban)\n\n-   In this exercise we will focus our analysis on the study area called the [Bangkok Metropolitan Region (BMR)](https://en.wikipedia.org/wiki/Bangkok_Metropolitan_Region), which consists of [Bangkok](https://en.wikipedia.org/wiki/Bangkok) and its five adjacent provinces, namely [Nakhon Pathom](https://en.wikipedia.org/wiki/Nakhon_Pathom_Province \"Nakhon Pathom Province\"), [Pathum Thani](#0 \"Pathum Thani Province\"), [Nonthaburi](#0 \"Nonthaburi Province\"), [Samut Prakan](#0 \"Samut Prakan Province\"), and [Samut Sakhon](#0 \"Samut Sakhon Province\").\n\n-   To confirm the EPSG code for the study area, we can check it on [epsg.io](https://epsg.io/). Enter \"Thailand\" and we will yield several results under Projected CRS:\n\n    -   [Indian 1954 / UTM zone 46N](https://epsg.io/23946) - EPSG 23946 with transformation: 1153\n\n    -   [Indian 1954 / UTM zone 47N](https://epsg.io/23947) - EPSG 23947 with transformation 1153\n\n    -   [Indian 1954 / UTM zone 48N](https://epsg.io/23948) - EPSG 23948 with transformation 1153\n\n    -   [Indian 1975 / UTM zone 47N](https://epsg.io/24047) - EPSG 24047 with transformation 1812\n\n    -   [Indian 1975 / UTM zone 48N](https://epsg.io/24048) - EPSG 24048 with transformation 1812\n\n    -   [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647\n\n    -   [WGS 84 / UTM zone 48N](https://epsg.io/32648) - EPSG 32648\n\n    -   [WGS 84 / PDC Mercator](https://epsg.io/3832) - EPSG 3832\n\nWe will be using Geodetic CRS **WGS 84** as it is a global standard. It leaves us with the last three options. As will click into each result, we will observe that [WGS 84 / PDC Mercator](https://epsg.io/3832) covers wide area of use, and perhaps, more suitable for seafare. Whereas for [WGS 84 / UTM zone 47N](https://epsg.io/32647) and [WGS 84 / UTM zone 48N](https://epsg.io/32648), the area are more precise, defined by the Easting and Northing.\n\n| [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647                                                                                                                                                                                                                                                                                                                                   | [WGS 84 / UTM zone 48N](https://epsg.io/32648) - EPSG 32648                                                                                                                                                                                                                                                                                                                                                            |\n|-----------------------------------|-------------------------------------|\n| **Area of use:** [Between 96°E and 102°E, northern hemisphere between equator and 84°N, onshore and offshore. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Myanmar (Burma). Russian Federation. Thailand.](https://epsg.io/?q=Between+96%C2%B0E+and+102%C2%B0E%2C+northern+hemisphere+between+equator+and+84%C2%B0N%2C+onshore+and+offshore.+China.+Indonesia.+Laos.+Malaysia) | **Area of use:** [Between 102°E and 108°E, northern hemisphere between equator and 84°N, onshore and offshore. Cambodia. China. Indonesia. Laos. Malaysia - West Malaysia. Mongolia. Russian Federation. Singapore. Thailand. Vietnam.](https://epsg.io/?q=Between+102%C2%B0E+and+108%C2%B0E%2C+northern+hemisphere+between+equator+and+84%C2%B0N%2C+onshore+and+offshore.+Cambodia.+China.+Indonesia.+Laos.+Malaysia) |\n\n::: callout-important\n## Projected CRS\n\nConsidering Bangkok's Coordinate (13.7563° N, 100.5018° E), we will use [WGS 84 / UTM zone 47N](https://epsg.io/32647) - EPSG 32647, as its Northing of 13.7563° falls between the Equator and 84°N, and its Easting of 100.5018° falls between 96°E and 102°E, which are both in the area of use as indicated in the table above.\n:::\n\n## 1.2 The Datasets\n\nThe following datasets are provided as part of the Take Home Exercise 1:\n\n[**Aspatial**]{.underline}\n\n-   [Thailand Road Accident \\[2019-2022\\]](https://www.kaggle.com/datasets/thaweewatboy/thailand-road-accident-2019-2022) on Kaggle\n\n    -   This dataset is a list of Thailand Road Accident between 2019 to 2022 in .csv format, where details like province, date/time of accident, cause of accident, type of vehicles and weather conditions are provided. The variables in this dataset will be used for analysis of the factors that contributes to the road traffic accidents.\n\n[**Geospatial**]{.underline}\n\n-   [Thailand Roads (OpenStreetMap Export)](https://data.humdata.org/dataset/hotosm_tha_roads) on HDX.\n\n    -   This dataset contains all the Thailand Road network which we will use to extract relevant roads within the study area.\n\n-   [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?) on HDX.\n\n    -   This dataset will be used to set the boundaries for the study area, so as to exclude the data points that are irrelevant for this study.\n\n## 2.0 Setting up the Environment\n\n### 2.1 Installing and loading the required libraries\n\nThe code chunk below checks if the packages are installed. If the packages are not yet installed, it will proceed to install and subsequently load the libraries. If the packages are already installed, it will proceed to launch into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(leaflet,\n               lubridate,\n               raster,\n               sf,\n               spNetwork,\n               tidyverse,\n               tmap)\n```\n:::\n\n\n| Packages  | Description                                                              |\n|-------------------|-----------------------------------------------------|\n| leaflet   | For interactive map                                                      |\n| lubridate | Functions to work with date-times and time-spans                         |\n| raster    | Reading, writing, manipulating, analyzing and modeling of spatial data.  |\n| sf        | For importing, managing, ad handling geospatial data                     |\n| spNetwork | Perform spatial analysis on network                                      |\n| tidyverse | For aspatial data wrangling                                              |\n| tmap      | For thematic mapping                                                     |\n\n### 2.2 Setting Seeds to Ensure Reproducibility\n\nThe set. seed() function is used to set a Random seed which Pseudorandom number generators use when generating \"random\" numbers. By using this function, we ensure that the randomly generated numbers remain the same when the code are reproduced.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n```\n:::\n\n\n## 3.0 Importing and Wrangling the Data\n\n### 3.1 Importing Aspatial Data and Converting it into Spatial Data\n\nImporting the data without filtering:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\")\n```\n:::\n\n\nImporting the data, and conducting necessary filter, conversion to sf, transformation of CRS, and get the days component of the `incident_datetime`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_sf <- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %>%   \n  filter(!is.na(longitude) &longitude != \"\",!is.na(latitude) & latitude != \"\") %>%    \n  st_as_sf(coords = c(\"longitude\", \"latitude\"),            crs = 4326) %>%    \n  st_transform(crs = 32647) %>% \n  mutate(Day = day(incident_datetime)) %>% \n  mutate(Month = month(incident_datetime,\n                       label = TRUE,\n                       abbr = TRUE)) %>% \n  mutate(Year = year(incident_datetime)) %>% \n  mutate(DaysOfWeek = wday(incident_datetime,\n                           week_start = 1)) %>% \n  dplyr::select(c(2,5,8:21))\n```\n:::\n\n\n::: callout-note\n## Thailand Road Accident \\[ 2019-2022\\]\n\n-   [read_csv()](https://readr.tidyverse.org/reference/read_delim.html) of readr package to import the data in .csv format as tibble dataframe.\n\n```         \nBefore proceeding to filter the data, we observe that there is a total of 81,735 observations.\n\n-   ![](images/clipboard-3840017767.png)\n```\n\n-   dplyr::filter() to filter out rows that has \"na\" or is empty in value.\n\n    -   After filtering \"na\" and empty values, we are left with 81,376 observations. This means that we have lost about 0.44% of the data. This will not affect our analysis as 0.44% a small proportion of the total number of observations. (Rule of Thumb, not \\>5% lost)\n\n        ![](images/clipboard-38131559.png)\n\n-   st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) combines and longitude and latitude columns into geometry column.\n\n    -   before applying st_as_sf() function, we observe that the latitude and longitude are in decimal degrees, therefore, we assume it is WGS84 datum, with the EPSG code of 4326.\n\n        ![](images/clipboard-1253609898.png)\n\n    -   Notice that the number of variables changed from 18 to 17. This is because st_as_sf() function has combined the longitude and latitude columns in the original dataset into one column name geometry. The columns named longitude and latitude are no longer found in the data.\n\n        ![](images/clipboard-3803839872.png)\n\n-   st_transform() to change the Coordinate Reference System (CRS) to the correct EPSG code of 32647.\n\n-   lubridate() is used to wrangle the incident_datetime, which is in datetime format of POSIXct.\n\n    -   lubridate::month(): label = TRUE -\\> change it into factor. If we do not use label = TRUE, it will be sorted using alphabetical logic. If it is a factor, it will be sorted according to date/month logic from Jan to Dec.\n\n    -   The columns of Day, Month, Year, and DaysOfWeek are created.\n\n        ![](images/clipboard-1275594911.png)\n\n-   Use dplyr::select() to select the relevant columns to retain.\n\n-   The output R object is called acc_sf and it is a sf data frame.\n:::\n\nAfter the\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(acc_sf, \"data/rds/acc_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nacc_sf <- read_rds(\"data/rds/acc_sf.rds\")\n```\n:::\n\n\n### 3.2 Importing Spatial Data\n\nImporting the [Thailand - Subnational Administrative Boundaries](https://data.humdata.org/dataset/cod-ab-tha?)\n\n## References\n\nNews: <https://www.who.int/news-room/fact-sheets/detail/road-traffic-injuries>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}