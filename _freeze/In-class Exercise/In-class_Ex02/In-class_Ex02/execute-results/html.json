{
  "hash": "28218c4246aada9aa0ce87714682a791",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Ex 02\"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Sep 2, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n![](images/clipboard-2125730519.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n## Issue 1: Installing maptools\n\nmaptools is retired and binary is removed from CRAN. However, we can download from Posit Public Package Manager snapshots by using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\",\n                 repos = \"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n\n::: callout-note\n-   Avoid sp because we have to use maptools and maptools is retired as mentioned.\n\n-   Use sf straight. We can convert to ppp directly without more steps compared to sp.\n\n-   Shiny is developed by Posit. Dedicate support for Shiny repository. We can request Posit to have a repository required by you.\n\n-   Remember to add \"#\\| eval: False\" in quarto code chunk after installation:\n\n    ![](images/clipboard-3459518601.png)\n:::\n\n## Issue 2: Creating coastal outline\n\nIn sf package, there are two functions allow us to combine XXXX.\n\n### Working with st_union()\n\nDerive the coastal outline sf tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- mpsz_sf %>% \n  st_union()\n```\n:::\n\n\n::: callout-note\n## sf package\n\n-   buffer\n\n-   remove boundaries / dissolve (GIS term)\n\n-   manipulate\n:::\n\n::: callout-note\n## spatstat package\n\n-   ppp: if input data is sp object. convert generic sp object.\n\n-   as.ppp: if input is sf. Allow us to create point object.\n\n-   as.owin: Allow us to create boundary.\n\n-   Advice: Don't use sp!!\n:::\n\n## Kernel Density Estimation\n\n2 different ways to covert KDE output into grid object.\n\n1.  maptools method(retired)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gridded_kde_childcareSG_ad <- maptools::as.SpatialGridDataFrame(kde_childcareSG_adaptive)\n    spplot(gridded_kde_childcareSG_ad)\n    ```\n    :::\n\n\n2.  spatstat.geom method (use this)\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gridded_kde_childcareSG_ad <- as(kde_childcareSG_adaptive,\n                                     \"SpatialGridDataFrame\")\n    spplot(gridded_kde_childcareSG_ad)\n    ```\n    :::\n\n\n## Monte Carlo Simulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(12345)\n```\n:::\n\n\n::: callout-tip\n## Monte Carlo Simulation\n\n-   remember to set.seed(1234), to ensure the simulation for randomisation is fixed.\n\n-   This ensure reproducibility.\n:::\n\n## Edge Correction\n\n::: callout-note\n## Edge correction\n\n-   If we are looking at Singapore as a whole, it is bounded by sea, hence we do not need worry about edge correction, as data points will not be in the sea.\n\n-   However, if we are looking at study region, for example, planning area, the points at the edges correction is important to handle biases that arises from estimating spatial statistics near the boundaries of a study region.\n\n-   Important for K-function, L-function, pair correlation function, etc.\n:::\n\n## Checking Duplicates\n\nFor example, there are multiple childcare centers in a mall, but all the points are stacked together.\n\n1.  Check duplicate\n2.  Count the coincidence points\n3.  Sum up coincidence points\n4.  Use jitter approach( nsim = 49) , simulate 50 times.\n\n::: callout-important\n-   Convert multiple points into a marked point, and indicate as the sum of the number of coincidence points.\n\n-   If the point is marked point, then we will not need to sum up multiplicity.\n\n-   Need to check if the point is marked point.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}