{
  "hash": "0d91d2e92ceddddcfe79531ad2508468",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Ex 01 \"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Aug 26, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  message: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\n## 1.0 Loading Library and Data\n\nThis code chunk install and load the relevant package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,sf,\n               tmap,ggstatsplot)\n```\n:::\n\n\n## 2.1 Working with Master Plan Planning Sub-zone Data\n\nThis code chunk imports shapefile(.shp):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz14_shp = st_read(dsn = \"data/\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nThis code chunk imports kml file(.kml):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(mpsz14_shp,\n         \"data/MP14_SUBZONE_WEB_PL.kml\",\n         delete_dsn = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting layer `MP14_SUBZONE_WEB_PL' to data source \n  `data/MP14_SUBZONE_WEB_PL.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n:::\n\n\n::: callout-note\n-   for \"delete_dsn\" argument = TRUE, the file of the same name (mpsz14_shp) will be overwritten by the new file.\n:::\n\n## 2.2 Working with Pre-school Location Data\n\nThis code chunk imports kml file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_kml <- st_read(\"data/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThis code chunk imports geojson file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool_geojson <- st_read(\"data/PreSchoolsLocation.geojson\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PreSchoolsLocation' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\PreSchoolsLocation.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## 2.3 Working with Master Plan 2019 Subzone Boundary Data\n\nThis code chunk import shapefile.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nThis code chunk import kml file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_kml <- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n## 3.0 Handling Coordinate Systems\n\n### 3.1 Checking coordinate system\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n::: callout-note\n-   Note that the EPSG code is 4326 for WGS84.\n\n-   We may need to perform transformation to change the EPSG code accordingly if we notice that the EPSG code does not corresponding to the CRS.\n\n-   The correct EPSG code for svy21 should be [3414](https://epsg.io/3414).\n:::\n\n## 3.0 Transformation / Re-projection\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz19_shp <- st_read(dsn = \"data/\",\n                  layer = \"MPSZ-2019\") %>% \n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex01\\data' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: callout-note\n### Geographical Coordinate Systems\n\n-   GCS define locations on the earth using a three-dimensional spherical surface. For example, WGS84.\n\n-   They provides accuracy position information. Unit of measurement will be in either decimal degree or degree-minute-second format.\n\n-   GCS, however, are not appropriate for distance and area measurements. In this figure, it is clear that 1 degree distance at the north pole is relatively shorter than 1 degree at the equator.\n\n-   Refer to [9.1 Geographic Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#geographic-coordinate-systems) to learn more about GCS.\n:::\n\n::: callout-note\n### Projected Coordinate Systems (PCS)\n\n-   Based on a map projection such as transverse Mercator, Albers equal area, or Robinson.\n\n-   PCS provides consistent length and area measurement across space. Hence, it is important to transform a geospatial data from GCS to PCS before performing geospatial analysis.\n\n-   Refer to [9.2 Projected Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#projected-coordinate-systems) to learn more about GCS.\n:::\n\n::: callout-note\n## Transformation (st_transform)\n\n-   technical term: re-projection\n\n-   mpsz19_shp geometry changed.\n\n-   Before:\n\n    ![](images/clipboard-21986329.png)\n\n-   After:\n\n    ![](images/clipboard-1838988116.png)\n:::\n\n### Choosing between excel and csv file\n\n## 3.0 Population Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- read_csv(\"data/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata2023 <- popdata2023 %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(POP = sum(Pop)) %>%\n  ungroup() %>%\n  pivot_wider(names_from = AG, values_from = POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames (popdata2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_Over\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}