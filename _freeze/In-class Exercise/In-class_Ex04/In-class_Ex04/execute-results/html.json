{
  "hash": "2c033490c3e31fe02cd398628227fd0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Ex 04 \"\nauthor: \"Liang Xiuhao Rydia\"\ndate: \"Sep 16, 2024\"\ndate-modified: \"last-modified\"\nexecute:\n  eval: true\n  echo: true\n  warning: false\n  freeze: true\nformat: \n  html:\n    code-fold: true\n    code-summary: \"Show the code\"\n---\n\n\nShort cut to [In-class Ex 4]\n\n# **Theory Lession: Spatial Weights and Applications**\n\n## 1.0 What are Spatial Weights (wij)\n\nIt is a way to define spatial neighbourhood.\n\n![](images/clipboard-4061349882.png)\n\n## 2.0 Contiguity Neighbours\n\n![](images/clipboard-3101433054.png)\n\nRefer to [Hands on Ex 4 - 8.5.3.1 and 8.5.3.2](https://ry-geog.netlify.app/hands-on%20exercise/hands-on_ex04/hands-on_ex04#plotting-queen-contiguity-based-neighbours-map):\n\n| Queen's                                           | Rook's (differences in blue circle)               |\n|---------------------------------------------------|---------------------------------------------------|\n| ![](images/clipboard-1338689405.png){width=\"340\"} | ![](images/clipboard-3739373479.png){width=\"320\"} |\n\n## 2.1 Lagged Contiguity\n\n![](images/clipboard-1340200063.png)\n\n## 2.2 Defining Spatial Weights\n\n![](images/clipboard-3036623236.png)\n\nA better measure of spatial weights will be using the third method, a general spatial distance weight matrices, where no boundaries were set (like distance criterion).\n\n## 2.3 Weights Matrix: Distance-based neighbours\n\nThe weight matrix below is constructed using Queen's method.\n\n![](images/clipboard-257919302.png)\n\n**Quiz**: With reference to the figure above, list down the neighbour(s) of area 1202 using Rook case.\n\nNeighbour of 1202 using Rook's case:\n\n1.  1201\n2.  1302\n3.  901\n4.  1000\n5.  1102\n\n### Weights Matrix: Distance-based neighbours\n\n![](images/clipboard-3048454540.png)\n\nAnswer: (all distance, d \\>650, will become 0 in value)\n\n|        |   A |   B |   C |   D |   E |\n|-------:|----:|----:|----:|----:|----:|\n|  **A** |   0 | 353 | 516 | 641 |   0 |\n|  **B** | 353 |   0 | 357 |   0 |   0 |\n|  **C** | 516 | 357 |   0 |   0 |   0 |\n|  **D** | 641 |   0 |   0 |   0 | 263 |\n|  **E** |   0 |   0 |   0 | 263 |   0 |\n\n### Row standardisation\n\nIn practice, row-standardised weights instead of spatial weights will be used.\n\n![](images/clipboard-3114063397.png)\n\n### Spatially Lagged Variables\n\nSpatial lag with row-standardised weights.\n\n![](images/clipboard-2194023446.png)\n\n::: callout-note\n## GDPCC (left) vs lag GDPCC (right)\n\n-   Lag GDPCC smooth out the value, and help us identify the difference of the lighter western region and the darker regions to the north-east.\n\n-   Ideally, we want to know which areas are with values that are statistically significant. Having 2 neighbours vs 6 neighbours? Next lesson!\n:::\n\n### Spatial window sum\n\nThe spatial window sum uses and includes the diagonal element. (Include self = lag_sum)\n\n![](images/clipboard-2628551806.png)\n\n### Comparing the visualisation to actual network\n\nSource: [Analysis of Coupling Coordination Relationship between the Accessibility and Economic Linkage of a High-Speed Railway Network Case Study in Hunan, China](https://www.mdpi.com/2071-1050/14/13/7550)\n\n![](images/clipboard-2635178354.png)\n\n::: callout-important\n## Polygon Centroid Distance vs Network Distance\n\n-   Centroid distance vs Network distance (e.g. shortest path)\n\n-   It may take longer time to compute all possible shortest path.\n\n-   Centroid distance generally simpler to calculate and it is quite similar to Network distance after aggregation.\n\n-   However, there are many cases that network distance is a better measure.\n\n    -   i.e. Rail network.\n:::\n\n# In-class Ex 4\n\n## 3.0 Setting up the environment\n\nLoading required packages using the code chunk below:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,\n               sf,\n               ggstatsplot,\n               tmap,\n               knitr,\n               GWmodel)\n```\n:::\n\n\n## 3.1 Preparing the Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `C:\\rydialiang\\isss626-aug24\\In-class Exercise\\In-class_Ex04\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Geometry Type\n\n-   Usually in polygon.\n\n-   If there's island apart from mainland, there might be cases of multi-polygon.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n::: callout-note\n## Relational Join\n\n-   We need to final potential Unique Identifier to do the left_join().\n\n-   Usually we have to define the join field.\n\n-   For example, we can use NAME_3 for hunan_sf and County for hunan2012 to do the relational join.\n\n-    We need to make sure that the cells has the same values, including upper and lower case.\n\n-   The case below, it is already tidied up and we know exactly what information/columns we need to sift out, by using select().\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sf <- left_join(hunan_sf,hunan2012) %>% \n  select(1:3,7,15,16,31,32)\n```\n:::\n\n\n## Converting to SpatialPolygonDataFrame\n\nGWmodel is presently built around the older sp and\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan_sf %>% \n  as_Spatial()\n```\n:::\n\n\n## GWSS with adaptive bandwidth\n\n### Determine adaptive bandwidth ( adaptive = TRUE )\n\nCross-validation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth: 62 CV score: 15515442343 \nAdaptive bandwidth: 46 CV score: 14937956887 \nAdaptive bandwidth: 36 CV score: 14408561608 \nAdaptive bandwidth: 29 CV score: 14198527496 \nAdaptive bandwidth: 26 CV score: 13898800611 \nAdaptive bandwidth: 22 CV score: 13662299974 \nAdaptive bandwidth: 22 CV score: 13662299974 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Results\n\n-   62 ..... 22 are number of neighbours.\n\n-   stop when the figure (GDPPC) don't change much.\n:::\n\nAIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = TRUE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Results\n\n-   AICc values in kilometers (?)\n\n-   both CV and AIC provide same results.\n:::\n\n### Fixed Kernal ( adaptive = FALSE )\n\nCV:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"CV\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n:::\n\n\nAIC\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <-bw.gwr(GDPPC ~ 1,\n               data = hunan_sp,\n               approach = \"AIC\",\n               adaptive = FALSE,\n               kernel = \"bisquare\",\n               longlat = T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n:::\n\n\n::: callout-note\n## Results Intepretation\n\n-   Fixed distance (kernel) produce vastly different results.\n\n-   Distance will provide more variability.\n\n-   Same location but different methods, bandwidth of neighbours differs.\n\n    -   We need to test different numbers of neighbours. In this case, use adaptive as the results for both CV and AIC are similar.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data = hunan_sp,\n               vars = \"GDPPC\",\n               bw = bw_AIC,\n               kernel = \"bisquare\",\n               adaptive = TRUE,\n               longlat = T)\n```\n:::\n\n\n::: callout-important\n## gwss()\n\n-   remember to ensure the arguments for kernel, adaptive, longlat, must be the same as the chosen method, CV or AIC.\n\n-   the resulting object is gwss class.\n\n-   We can access the data table by clicking into the document icon to the right of the \"data\" attribute.\n\n-   \n:::\n\nAccessing gwstat:\n\n![](images/clipboard-207531247.png)\n\nAccessing SDF data table:\n\n![](images/clipboard-1032847310.png)\n\nThis data table is calculated using 22 neighbour (based on AIC, adaptive kernel)\n\nExtracting the data table as df:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\ncbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan_sf, gwstat_df)\n```\n:::\n\n\n::: callout-important\n## cbind()\n\n-   cannot work if we do sorting prior to this step.\n\n-   works without unique identifier, given that the sequence of the data did not change.\n:::\n\n### Visualising geographically weighted summary statistics\n\nThe Geographically Weighted Mean\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\ntm_shape(hunan_gstat) +\n  tm_fill(\"GDPPC_LM\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5 ) +\n  tm_layout(main.title = \"Distribution of geographically weighted mean\",\n            main.title.position = \"center\",\n            main.title.size = 0.9,\n            legend.text.size = 0.5,\n            legend.height = 1.0,\n            legend.width = 1.0,\n            frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex04_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nBusiness Quesion: Is there any relationship between GDP per capita (GDPPC) and Gross Industry Output (GIO)?\n\n\n::: {.cell}\n\n:::\n\n\n### Visualising Local Correlation\n\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "In-class_Ex04_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}