---
title: "In-class Ex 04 "
author: "Liang Xiuhao Rydia"
date: "Sep 16, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

Short cut to [In-class Ex 4]

# **Theory Lession: Spatial Weights and Applications**

## 1.0 What are Spatial Weights (wij)

It is a way to define spatial neighbourhood.

![](images/clipboard-4061349882.png)

## 2.0 Contiguity Neighbours

![](images/clipboard-3101433054.png)

Refer to [Hands on Ex 4 - 8.5.3.1 and 8.5.3.2](https://ry-geog.netlify.app/hands-on%20exercise/hands-on_ex04/hands-on_ex04#plotting-queen-contiguity-based-neighbours-map):

| Queen's                                           | Rook's (differences in blue circle)               |
|---------------------------------------------------|---------------------------------------------------|
| ![](images/clipboard-1338689405.png){width="340"} | ![](images/clipboard-3739373479.png){width="320"} |

## 2.1 Lagged Contiguity

![](images/clipboard-1340200063.png)

## 2.2 Defining Spatial Weights

![](images/clipboard-3036623236.png)

A better measure of spatial weights will be using the third method, a general spatial distance weight matrices, where no boundaries were set (like distance criterion).

## 2.3 Weights Matrix: Distance-based neighbours

The weight matrix below is constructed using Queen's method.

![](images/clipboard-257919302.png)

**Quiz**: With reference to the figure above, list down the neighbour(s) of area 1202 using Rook case.

Neighbour of 1202 using Rook's case:

1.  1201
2.  1302
3.  901
4.  1000
5.  1102

### Weights Matrix: Distance-based neighbours

![](images/clipboard-3048454540.png)

Answer: (all distance, d \>650, will become 0 in value)

|        |   A |   B |   C |   D |   E |
|-------:|----:|----:|----:|----:|----:|
|  **A** |   0 | 353 | 516 | 641 |   0 |
|  **B** | 353 |   0 | 357 |   0 |   0 |
|  **C** | 516 | 357 |   0 |   0 |   0 |
|  **D** | 641 |   0 |   0 |   0 | 263 |
|  **E** |   0 |   0 |   0 | 263 |   0 |

### Row standardisation

In practice, row-standardised weights instead of spatial weights will be used.

![](images/clipboard-3114063397.png)

### Spatially Lagged Variables

Spatial lag with row-standardised weights.

![](images/clipboard-2194023446.png)

::: callout-note
## GDPCC (left) vs lag GDPCC (right)

-   Lag GDPCC smooth out the value, and help us identify the difference of the lighter western region and the darker regions to the north-east.

-   Ideally, we want to know which areas are with values that are statistically significant. Having 2 neighbours vs 6 neighbours? Next lesson!
:::

### Spatial window sum

The spatial window sum uses and includes the diagonal element. (Include self = lag_sum)

![](images/clipboard-2628551806.png)

### Comparing the visualisation to actual network

Source: [Analysis of Coupling Coordination Relationship between the Accessibility and Economic Linkage of a High-Speed Railway Network Case Study in Hunan, China](https://www.mdpi.com/2071-1050/14/13/7550)

![](images/clipboard-2635178354.png)

::: callout-important
## Polygon Centroid Distance vs Network Distance

-   Centroid distance vs Network distance (e.g. shortest path)

-   It may take longer time to compute all possible shortest path.

-   Centroid distance generally simpler to calculate and it is quite similar to Network distance after aggregation.

-   However, there are many cases that network distance is a better measure.

    -   i.e. Rail network.
:::

# In-class Ex 4

## 3.0 Setting up the environment

Loading required packages using the code chunk below:

```{r}
pacman::p_load(tidyverse,
               sf,
               ggstatsplot,
               tmap,
               knitr,
               GWmodel)
```

## 3.1 Preparing the Data

```{r}
hunan_sf <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

::: callout-note
## Geometry Type

-   Usually in polygon.

-   If there's island apart from mainland, there might be cases of multi-polygon.
:::

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

::: callout-note
## Relational Join

-   We need to final potential Unique Identifier to do the left_join().

-   Usually we have to define the join field.

-   For example, we can use NAME_3 for hunan_sf and County for hunan2012 to do the relational join.

-    We need to make sure that the cells has the same values, including upper and lower case.

-   The case below, it is already tidied up and we know exactly what information/columns we need to sift out, by using select().
:::

```{r}
hunan_sf <- left_join(hunan_sf,hunan2012) %>% 
  select(1:3,7,15,16,31,32)
```

## Converting to SpatialPolygonDataFrame

GWmodel is presently built around the older sp and

```{r}
hunan_sp <- hunan_sf %>% 
  as_Spatial()
```

## GWSS with adaptive bandwidth

### Determine adaptive bandwidth ( adaptive = TRUE )

Cross-validation:

```{r}
bw_CV <-bw.gwr(GDPPC ~ 1,
               data = hunan_sp,
               approach = "CV",
               adaptive = TRUE,
               kernel = "bisquare",
               longlat = T)
```

::: callout-note
## Results

-   62 ..... 22 are number of neighbours.

-   stop when the figure (GDPPC) don't change much.
:::

AIC

```{r}
bw_AIC <-bw.gwr(GDPPC ~ 1,
               data = hunan_sp,
               approach = "AIC",
               adaptive = TRUE,
               kernel = "bisquare",
               longlat = T)
```

::: callout-note
## Results

-   AICc values in kilometers (?)

-   both CV and AIC provide same results.
:::

### Fixed Kernal ( adaptive = FALSE )

CV:

```{r}
bw_CV <-bw.gwr(GDPPC ~ 1,
               data = hunan_sp,
               approach = "CV",
               adaptive = FALSE,
               kernel = "bisquare",
               longlat = T)
```

AIC

```{r}
bw_AIC <-bw.gwr(GDPPC ~ 1,
               data = hunan_sp,
               approach = "AIC",
               adaptive = FALSE,
               kernel = "bisquare",
               longlat = T)
```

::: callout-note
## Results Intepretation

-   Fixed distance (kernel) produce vastly different results.

-   Distance will provide more variability.

-   Same location but different methods, bandwidth of neighbours differs.

    -   We need to test different numbers of neighbours. In this case, use adaptive as the results for both CV and AIC are similar.
:::

```{r}
gwstat <- gwss(data = hunan_sp,
               vars = "GDPPC",
               bw = bw_AIC,
               kernel = "bisquare",
               adaptive = TRUE,
               longlat = T)
```

::: callout-important
## gwss()

-   remember to ensure the arguments for kernel, adaptive, longlat, must be the same as the chosen method, CV or AIC.

-   the resulting object is gwss class.

-   We can access the data table by clicking into the document icon to the right of the "data" attribute.

-   
:::

Accessing gwstat:

![](images/clipboard-207531247.png)

Accessing SDF data table:

![](images/clipboard-1032847310.png)

This data table is calculated using 22 neighbour (based on AIC, adaptive kernel)

Extracting the data table as df:

```{r}
gwstat_df <- as.data.frame(gwstat$SDF)
```

cbind() is used to append the newly derived data.frame onto hunan_sf sf data.frame.

```{r}
hunan_gstat <- cbind(hunan_sf, gwstat_df)
```

::: callout-important
## cbind()

-   cannot work if we do sorting prior to this step.

-   works without unique identifier, given that the sequence of the data did not change.
:::

### Visualising geographically weighted summary statistics

The Geographically Weighted Mean

```{r}
tmap_mode("plot")
tm_shape(hunan_gstat) +
  tm_fill("GDPPC_LM",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5 ) +
  tm_layout(main.title = "Distribution of geographically weighted mean",
            main.title.position = "center",
            main.title.size = 0.9,
            legend.text.size = 0.5,
            legend.height = 1.0,
            legend.width = 1.0,
            frame = TRUE)

```

Business Quesion: Is there any relationship between GDP per capita (GDPPC) and Gross Industry Output (GIO)?

```{r}

```

### Visualising Local Correlation

```{r}

```

## References
