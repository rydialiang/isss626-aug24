---
title: "In-class Ex 01 "
author: "Liang Xiuhao Rydia"
date: "Aug 26, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

## 1.0 Loading Library and Data

This code chunk install and load the relevant package.

```{r}
pacman::p_load(tidyverse,sf,
               tmap,ggstatsplot)
```

## 2.1 Working with Master Plan Planning Sub-zone Data

This code chunk imports shapefile(.shp):

```{r}
mpsz14_shp = st_read(dsn = "data/", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

This code chunk imports kml file(.kml):

```{r}
st_write(mpsz14_shp,
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```

::: callout-note
-   for "delete_dsn" argument = TRUE, the file of the same name (mpsz14_shp) will be overwritten by the new file.
:::

## 2.2 Working with Pre-school Location Data

This code chunk imports kml file.

```{r}
preschool_kml <- st_read("data/PreSchoolsLocation.kml")
```

This code chunk imports geojson file.

```{r}
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson") 
```

## 2.3 Working with Master Plan 2019 Subzone Boundary Data

This code chunk import shapefile.

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                layer = "MPSZ-2019")
```

This code chunk import kml file:

```{r}
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

## 3.0 Handling Coordinate Systems

### 3.1 Checking coordinate system

```{r}
st_crs(mpsz19_shp)
```

::: callout-note
-   Note that the EPSG code is 4326 for WGS84.

-   We may need to perform transformation to change the EPSG code accordingly if we notice that the EPSG code does not corresponding to the CRS.

-   The correct EPSG code for svy21 should be [3414](https://epsg.io/3414).
:::

### 3.2 Transformation / Re-projection

Import and transform coordinate system for the shapefile:

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                  layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

::: callout-note
### Geographical Coordinate Systems

-   GCS define locations on the earth using a three-dimensional spherical surface. For example, WGS84.

-   They provides accuracy position information. Unit of measurement will be in either decimal degree or degree-minute-second format.

-   GCS, however, are not appropriate for distance and area measurements. In this figure, it is clear that 1 degree distance at the north pole is relatively shorter than 1 degree at the equator.

-   Refer to [9.1 Geographic Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#geographic-coordinate-systems) to learn more about GCS.
:::

::: callout-note
### Projected Coordinate Systems (PCS)

-   Based on a map projection such as transverse Mercator, Albers equal area, or Robinson.

-   PCS provides consistent length and area measurement across space. Hence, it is important to transform a geospatial data from GCS to PCS before performing geospatial analysis.

-   Refer to [9.2 Projected Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#projected-coordinate-systems) to learn more about GCS.
:::

::: callout-note
## Transformation (st_transform)

-   technical term: re-projection

-   mpsz19_shp geometry changed.

-   Before:

    ![](images/clipboard-21986329.png)

-   After:

    ![](images/clipboard-1838988116.png)
:::

Import and transform kml file:

```{r}
preschool <- st_read("data/PreSchoolsLocation.kml") %>%
  st_transform(crs = 3414)
```

::: callout-note
## Note on CSV and Excel file

We may prefer to work with csv file as it is tidier. Excel file may contain headers and merged cell, which may result in requirement for data cleaning.
:::

## 4.0 Geospatial Data Wrangling

### 4.1 Point-in-Polygon count

The code chunk below count the number of pre-schools in each planning sub-zone.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(`PreSch Count` = lengths(
    st_intersects(mpsz19_shp, preschool)))
```

::: callout-note
## Recap on st_intersects / st_intersection

-   *st_intersects*: touch or overlap. This [commands](https://r-spatial.github.io/sf/reference/geos_binary_pred.html) compare two sf data object and return a sparse matrix with matching (TRUE) indexes, or a full logical matrix.

-   st_intersection: intersection of pairs of geometries. This command overlay two sf data frames.
:::

### 4.2 Computing Density

The code chunk below performs the following tasks:

-   Derive the area of each planning sub-zone.

-   Drop the unit of measurement of the area (i.e. m\^2)

-   Calculate the density of pre-school at the planning sub-zone level.

```{r}
mpsz19_shp <- mpsz19_shp %>%
  mutate(Area = units::drop_units(
    st_area(.)),
    `PreSch Density` = `PreSch Count` / Area * 1000000
  )
```

## 5.0 Statistical Analysis

The tasks: Using appropriate Exploratory Data Analysis (EDA) and Confirmatory Data Analysis (CDA) methods to explore and confirm the statistical relationship between Pre-school Density and Pre-school count.

Tip: Refer to [`ggscatterstats()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggscatterstats.html) of **ggstatsplot** package.

```{r}
mpsz19_shp$`PreSch Density` <- as.numeric(as.character(mpsz19_shp$`PreSch Density`))
mpsz19_shp$`PreSch Count` <- as.numeric(as.character(mpsz19_shp$`PreSch Count`)) 
mpsz19_shp <- as.data.frame(mpsz19_shp)

ggscatterstats(data = mpsz19_shp,
               x = `PreSch Density`,
               y = `PreSch Count`,
               type = "parametric",
               label.var = `SUBZONE_N`,
               label.expression =  `PreSch Density` > 30 |`PreSch Count` > 50) 
```

## 6.0 Working with Population Data

```{r}
popdata <- read_csv("data/respopagesextod2023.csv")
```

```{r}
popdata2023 <- popdata %>%
  group_by(PA, SZ, AG) %>%
  summarise(POP = sum(Pop)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG, values_from = POP)
colnames (popdata2023)
```
