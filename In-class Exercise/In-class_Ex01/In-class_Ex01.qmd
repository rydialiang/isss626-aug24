---
title: "In-class Ex 01 "
author: "Liang Xiuhao Rydia"
date: "Aug 26, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  message: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

## 1.0 Loading Library and Data

This code chunk install and load the relevant package.

```{r}
pacman::p_load(tidyverse,sf,
               tmap,ggstatsplot)
```

## 2.1 Working with Master Plan Planning Sub-zone Data

This code chunk imports shapefile(.shp):

```{r}
mpsz14_shp = st_read(dsn = "data/", 
                  layer = "MP14_SUBZONE_WEB_PL")
```

This code chunk imports kml file(.kml):

```{r}
st_write(mpsz14_shp,
         "data/MP14_SUBZONE_WEB_PL.kml",
         delete_dsn = TRUE)
```

::: callout-note
-   for "delete_dsn" argument = TRUE, the file of the same name (mpsz14_shp) will be overwritten by the new file.
:::

## 2.2 Working with Pre-school Location Data

This code chunk imports kml file.

```{r}
preschool_kml <- st_read("data/PreSchoolsLocation.kml")
```

This code chunk imports geojson file.

```{r}
preschool_geojson <- st_read("data/PreSchoolsLocation.geojson") 
```

## 2.3 Working with Master Plan 2019 Subzone Boundary Data

This code chunk import shapefile.

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                layer = "MPSZ-2019")
```

This code chunk import kml file:

```{r}
mpsz19_kml <- st_read("data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml")
```

## 3.0 Handling Coordinate Systems

### 3.1 Checking coordinate system

```{r}
st_crs(mpsz19_shp)
```

::: callout-note
-   Note that the EPSG code is 4326 for WGS84.

-   We may need to perform transformation to change the EPSG code accordingly if we notice that the EPSG code does not corresponding to the CRS.

-   The correct EPSG code for svy21 should be [3414](https://epsg.io/3414).
:::

## 3.0 Transformation / Re-projection

```{r}
mpsz19_shp <- st_read(dsn = "data/",
                  layer = "MPSZ-2019") %>% 
  st_transform(crs = 3414)
```

::: callout-note
### Geographical Coordinate Systems

-   GCS define locations on the earth using a three-dimensional spherical surface. For example, WGS84.

-   They provides accuracy position information. Unit of measurement will be in either decimal degree or degree-minute-second format.

-   GCS, however, are not appropriate for distance and area measurements. In this figure, it is clear that 1 degree distance at the north pole is relatively shorter than 1 degree at the equator.

-   Refer to [9.1 Geographic Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#geographic-coordinate-systems) to learn more about GCS.
:::

::: callout-note
### Projected Coordinate Systems (PCS)

-   Based on a map projection such as transverse Mercator, Albers equal area, or Robinson.

-   PCS provides consistent length and area measurement across space. Hence, it is important to transform a geospatial data from GCS to PCS before performing geospatial analysis.

-   Refer to [9.2 Projected Coordinate Systems](https://mgimond.github.io/Spatial/chp09_0.html#projected-coordinate-systems) to learn more about GCS.
:::

::: callout-note
## Transformation (st_transform)

-   technical term: re-projection

-   mpsz19_shp geometry changed.

-   Before:

    ![](images/clipboard-21986329.png)

-   After:

    ![](images/clipboard-1838988116.png)
:::

### Choosing between excel and csv file

## 3.0 Population Data

```{r}
popdata2023 <- read_csv("data/respopagesextod2023.csv")
```

```{r}
popdata2023 <- popdata2023 %>%
  group_by(PA, SZ, AG) %>%
  summarise(POP = sum(Pop)) %>%
  ungroup() %>%
  pivot_wider(names_from = AG, values_from = POP)
colnames (popdata2023)
```
