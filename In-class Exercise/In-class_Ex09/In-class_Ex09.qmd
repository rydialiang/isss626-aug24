---
title: "In-class Ex 09: Preparing HDB Data"
author: "Liang Xiuhao Rydia"
date: "Oct 28, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
format: 
  html:
    code-fold: true
    code-summary: "Show the code"
---

```{r}
pacman::p_load(sf, spdep,
               tmap, tidyverse)
```

## Count Number of Points within a Distance

ELDERCARE is in shapefile format, the code chunk below will be used:

```{r}
eldercare <- st_read(dsn = "data/rawdata",
                     layer = "ELDERCARE") %>% 
  st_transform(crs = 3414)
```

The code chunk to import CHAS information.

```{r}
CHAS <- st_read("data/rawdata/CHASClinics.kml") %>% 
  st_transform(crs = 3414)
```

## Count Number of Points within a Distance

Buffering: st_buffer()

```{r}
buffer_1km <- st_buffer(eldercare, 
                        dist = 1000)
```

EPSG 3414 =\> Unit is in meters. Hence we use dist = 1000, i.e. 1000m, for 1km buffer.

## Visualising the Buffer and CHAS clinic

The code chunk below is used to plot the newly created buffer and the CHAS clinics.

```{r}
tmap_mode("view")
tm_shape(buffer_1km) +
  tm_polygons() +
tm_shape(CHAS) +
  tm_dots()
```

![](images/clipboard-4025690323.png)

::: callout-note
-   Notice that there are overlapping points within a 1km-circles around the Eldercare.

-   Note that there are outliers.

-   Note that kml will be in WGS 84
:::

```{r}
tmap_mode("plot")
```

```{r}
buffer_1km$pts_count <- lengths(
  st_intersects(buffer_1km,CHAS)
)
```

::: callout-note
-   lengths() will give the count of the intersects

-   need to append this into the exist table. We need to drop other unnecessary columns
:::

```{r}
write_rds(eldercare,"data/rds/eldercare.rds")
```

```{r}
write_rds(CHAS, "data/rds/CHAS.rds")
```

```{r}
CHAS
```

::: callout-note
-   Notice that the geometry is Point Z.

-   If we are using Spatstat, we need to drop "Z" of point Z.
:::

```{r}
write_rds(buffer_1km, "data/rds/buffer_1km.rds")
```

## Data Import

### Using st_jitter()

::: callout-important
-   use st_jitter() to exclude away overlapping points.

-   use to displace multiple points on the same coordinate.

-   use amount, it is unit of coordinate. 2 meters.

-   don't use decimal place as small numbers will lead to rounding down, i.e. resulting in zero, which means no jitter effects.

-   factor, not recommended.

-   the jitter effect will be applied to all data. if we only want to jitter the repeated transactions, we should extract them out and merge back again.

-   reverse Geo-coding done on postal code, i.e. in our case, there may be more than one transaction that is on the same postal code. Therefore, we need to use jitter to shifts the geometry to ensure they are seen as separate points.
:::

```{r}
mdata <- read_rds("data/model/mdata.rds") %>% 
  st_jitter(amount = 2)
```

## Hands-on Exercise 9 review

```{r}
pacman::p_load(SpatialAcc, sf, 
               tidyverse, ggstatsplot, tmap)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_NO_SEA_PL")
```

```{r}
hexagons <- st_read(dsn = "data/geospatial", layer = "hexagons") 
```

```{r}
eldercare <- st_read(dsn = "data/geospatial", layer = "ELDERCARE") 
```

```{r}
st_crs(mpsz)
```

```{r}
ODMatrix <- read_csv("data/aspatial/OD_Matrix.csv", skip = 0)
```

Data cleaning and Updating Attributes:

```{r}
eldercare <- eldercare %>%
  select(fid, ADDRESSPOS) %>%
  mutate(capacity = 100)
```

```{r}
hexagons <- hexagons %>%
  select(fid) %>%
  mutate(demand = 100)
```

::: callout-note
-   Capacity and demand is a created field for this exercise. Real capacity and demand can be crawled online.

-   We dropped away all column that are not important.
:::

```{r}
distmat <- ODMatrix %>%
  select(origin_id, destination_id, total_cost) %>%
  spread(destination_id, total_cost)%>%
  select(c(-c('origin_id')))
```

```{r}
distmat_km <- as.matrix(distmat/1000)
```

```{r}
acc_Hansen <- data.frame(ac(hexagons$demand,
                            eldercare$capacity,
                            distmat_km, 
                            #d0 = 50,
                            power = 2, 
                            family = "Hansen"))
```
